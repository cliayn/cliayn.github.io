<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Windows注册表防更新</title>
    <url>/2024/12/30/Windows%E6%B3%A8%E5%86%8C%E8%A1%A8%E9%98%B2%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings]</span><br><span class="line">&quot;FlightSettingsMaxPauseDays&quot;=dword:0000F423F</span><br><span class="line">&quot;PauseFeatureUpdatesStartTime&quot;=&quot;2023-08-06T08:00:00Z&quot;</span><br><span class="line">&quot;PauseFeatureUpdatesEndTime&quot;=&quot;2099-01-19T03:14:07Z&quot;</span><br><span class="line">&quot;PauseQualityUpdatesStartTime&quot;=&quot;2023-08-06T08:00:00Z&quot;</span><br><span class="line">&quot;PauseQualityUpdatesEndTime&quot;=&quot;2099-01-19T03:14:07Z&quot;</span><br><span class="line">&quot;PauseUpdatesExpiryTime&quot;=&quot;2099-01-19T03:14:07Z&quot;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>直接去注册表如下位置添加DWORD(32位)值(D)，值自己设，进制改为10按道理也行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"> </span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings]</span><br><span class="line">&quot;FlightSettingsMaxPauseDays&quot;=dword:00002710</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows update</tag>
      </tags>
  </entry>
  <entry>
    <title>主页和api</title>
    <url>/2024/12/26/%E4%B8%BB%E9%A1%B5%E5%92%8Capi/</url>
    <content><![CDATA[<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><p>在工作期间所遇到的小程序和web端所用的方式如下：</p>
<p>1、主页由其子域名显示，其他功能显示皆由该子域名指向，xxx#&#x2F;page&#x2F;xxx</p>
<p>2、其信息由专门的api子域名来传回，有时会有sms子域名用作短信的发送</p>
<p>3、若没有登录，部分功能的显示可以显示，但无实际信息，即，空白，json为{}</p>
<span id="more"></span>

<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>1.页面和小程序反编译爬取出的js文件或者json文件通常会有上述两个子域名的指向&#x2F;接口</p>
<p>2.找到指向&#x2F;接口，能够查看页面的功能以及接口的作用，用作于测试接口</p>
<p>3.通常会有登录接口用作返回token，大概率为jwt</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>1.有些网址不登录，后台的接口，以及其他的接口无法查看，只能看到个登录接口，即后续网址接口信息需要后台返回，但不代表不存在，通常即使是一个服务器其功能和作用都会十分广泛，毕竟好的服务器很贵的。</p>
<p>—&gt;所以可以从多方入手，例如：该子域名的其他小程序，该接口子域名是否存在被其他网址或小程序被调用的可能</p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>1.web需要登录就找它对应的小程序，一般来说小程序一旦授权就会给合法jwt</p>
<p>2.用jwt深度爬取js，就是哪里能点点哪里，都点一遍，然后把js脚本下下来，分析指向#&#x2F;xxx&#x2F;和api</p>
<p>3.看有无越权，逻辑漏洞，版本泄露，路径泄露和框架泄露等等</p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>认真分析一个事物就会形成一条思路明显的线路，整体的框架和内容就会完整，认真很久了还没思路那就去睡觉</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>api</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>漏洞库</title>
    <url>/2024/12/26/%E6%BC%8F%E6%B4%9E%E5%BA%93/</url>
    <content><![CDATA[<p><a href="https://wiki.wy876.cn/#/">漏洞文库</a></p>
<p><a href="https://github.com/wy876/POC">github漏洞库</a></p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>poc</tag>
      </tags>
  </entry>
  <entry>
    <title>自动追番网址</title>
    <url>/2024/12/25/%E8%87%AA%E5%8A%A8%E8%BF%BD%E7%95%AA%E7%BD%91%E5%9D%80/</url>
    <content><![CDATA[<h1 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h1><p><a href="https://www.autobangumi.org/">AutoBangumi官网</a> —利用rss订阅字幕组，实现自动追番，部署比较轻松，docker部署</p>
<p><a href="https://www.qbittorrent.org/download">qbittorrent下载地址</a> —下载器，订阅后这玩意负责自动下载，我1kG的流量就这么没的</p>
<p><a href="https://emby.media/download.html">Emby下载地址</a> —播放器，其他的也可以，具体看bangumi和服务器支不支持</p>
<span id="more"></span>

<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="/../image/auto_anime/1.png"></p>
<hr>
<p><a href="https://github.com/wushuo894/ani-rss?tab=readme-ov-file">ani-rss项目地址-GitHub</a> —支持 <strong>Transmission</strong> <strong>qBittorrent</strong> <strong>Aria2</strong> 下载器</p>
<p>ani-rss部署参考别个博客<a href="https://www.himiku.com/archives/ani-rss.html">初之音博客</a></p>
]]></content>
      <categories>
        <category>anime</category>
      </categories>
      <tags>
        <tag>rss</tag>
        <tag>qBitTorrent</tag>
        <tag>Two-dimensional</tag>
      </tags>
  </entry>
  <entry>
    <title>正则匹配脚本</title>
    <url>/2024/12/23/%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>今天上班的时候，老是发现uuid这些长id，我要想利用又懒得一个个复制，所以搞了一个脚本扩展，因为我是新手嘛，所以这个脚本有蛮多毛病，这章专门用来介绍哪些毛病，方便以后想改了，拿出来看看好找到要改的地方，我脚本放到github了，以防自己改炸了还有备份</p>
<span id="more"></span>

<h2 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h2><p>1、python代码里只匹配了双引号和单引号</p>
<p>2、直接将匹配到的内容写入文件—空格字符和回车字符</p>
<p>3、没有检查匹配字符的过程—不能实时的查看自己的匹配过程	&#x2F;&#x2F;主要</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jython</tag>
        <tag>Burp Suite</tag>
      </tags>
  </entry>
  <entry>
    <title>web和小程序的漏洞排查</title>
    <url>/2024/12/20/%E7%AC%94%E8%AE%B0_js-request/</url>
    <content><![CDATA[<p>该篇文章为记录在工作时遇到的基本问题以及对应的解决方式，以免自己把一些方法用完就忘，下次遇到又得🐔🐔</p>
<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><h3 id="过前端加密"><a href="#过前端加密" class="headerlink" title="过前端加密"></a>过前端加密</h3><p>​	在web端或者小程序中可能遇到请求包中的参数加密的情况，这种加密我一般用下面的两种处理方式。</p>
<span id="more"></span>

<h6 id="1、在js中找加密和解密算法"><a href="#1、在js中找加密和解密算法" class="headerlink" title="1、在js中找加密和解密算法"></a>1、在js中找加密和解密算法</h6><p>​		—如果是自定义算法你可中大奖了，你得解算法</p>
<p>​		—&gt;适用于简单的、有框架可套的算法，例如：AES、DES、RSA-酌情考虑</p>
<p>​		1&gt;主要是排查js代码中的加密函数和解密函数，小程序的话需要用工具调出控制台进行调试</p>
<p>​		2&gt;排查的函数通常为encrypt、decrypt函数，简单的直接在源代码处ctrl+f找这两单词就行，复杂的需要交数据前暂停执行进行调试，可能有点抽象，给个图就好了</p>
<p><img src="/../image/note_24_12/1_1-2.jpg" alt="1_1-2"></p>
<p>​		3&gt;复杂的需要一步步找，一般是小程序需要调试，步骤如下：</p>
<p>​			（1）、暂停执行</p>
<p>​			（2）、输入框中输入数据</p>
<p>​			（3）、点下一步，或者下一个函数</p>
<p>​			（4）、等监视的数据突然加密了，就记下那个函数分析</p>
<p>​			（5）、主要找加密算法是什么、iv和key，自定义算法和国密那些就用第二个方法吧</p>
<p>​	小程序需要用工具调出，工具推荐如下：</p>
<p>​			①、<a href="https://github.com/eeeeeeeeee-code/e0e1-wx">windows_自动化反编译</a> </p>
<p>​			②、<a href="https://github.com/JaveleyQAQ/WeChatOpenDevTools-Python/releases/">WeChatOpenDevTools-Python</a> </p>
<h6 id="2、在控制台中定义函数直接输入数据"><a href="#2、在控制台中定义函数直接输入数据" class="headerlink" title="2、在控制台中定义函数直接输入数据"></a>2、在控制台中定义函数直接输入数据</h6><p>​		1&gt;这个如果处理的好，在web端基本可以直接无需理会加密</p>
<p>​			—&gt;需要比较熟练的使用python或者其他的代码，但是，熟练使用ai也行</p>
<p>​		2&gt;有篇文章讲的很细，如下：</p>
<p>​			—&gt;<a href="https://xz.aliyun.com/t/14629?time__1311=GqAhYK0KBKAIP05DKBOxmEr8RpQcC1aoD">保姆级教程—前端加密的对抗（附带靶场） - 先知社区</a> </p>
<h6 id="3、other"><a href="#3、other" class="headerlink" title="3、other"></a>3、other</h6><p>​	—&gt;在应用软件中去壳逆向分析伪代码</p>
<h3 id="jwt-api问题"><a href="#jwt-api问题" class="headerlink" title="jwt_api问题"></a>jwt_api问题</h3><p>​	我见识现在不多，有错误的地方，想起来了就回来改一下，没有想起来就错下去喽。</p>
<p>​	jwt身份验证，一般情况不会给人伪造为空或者爆破出来密钥的机会，对我们有利的地方是通过正规途径获得一个合法的jwt后他们的接口通常不会有过多的权限管理，人话就是越权，逻辑洞可能比较多</p>
<h6 id="1、尝试jwt绕过"><a href="#1、尝试jwt绕过" class="headerlink" title="1、尝试jwt绕过"></a>1、尝试jwt绕过</h6><h6 id="—-生产环境没成功过"><a href="#—-生产环境没成功过" class="headerlink" title="—&gt;生产环境没成功过"></a>—&gt;生产环境没成功过</h6><p>在渗透测试中，可以尝试以下几种JWT绕过方法—没有也要试试，成功就爽了</p>
<p>​	1&gt;<strong>修改JWT令牌</strong>：通过修改JWT的Payload部分，可以尝试提升权限。例如，将用户角色从普通用户修改为管理员<a href="https://xz.aliyun.com/t/12906">1</a>。</p>
<p>​	2&gt;<strong>利用过期令牌</strong>：有时即使JWT令牌已过期，服务器端可能仍然接受该令牌。通过修改令牌中的<em>exp</em>（过期时间）字段，可以尝试让过期令牌重新生效<a href="https://blog.csdn.net/yang1234567898/article/details/122226635">2</a>。</p>
<p>​	3&gt;<strong>历史令牌伪造</strong>：如果能够获取到历史JWT令牌，可以尝试修改其中的<em>iat</em>（签发时间）和<em>exp</em>字段，使其看起来像是新签发的令牌<a href="https://blog.csdn.net/weixin_51559599/article/details/134860478">3</a>。</p>
<p>​	4&gt;<strong>算法混淆</strong>：JWT头部中的<em>alg</em>字段指定了签名算法。如果服务器端没有正确验证该字段，可以尝试将其修改为<em>none</em>，绕过签名验证<a href="https://xz.aliyun.com/t/12906">1</a>。</p>
<p>​	5&gt;<strong>密钥爆破</strong>：如果服务器使用了弱密钥，可以尝试使用密钥字典进行爆破，获取用于签名的密钥<a href="https://blog.csdn.net/yang1234567898/article/details/122226635">2</a>。</p>
<p>​	6&gt;<strong>SQL注入绕过key</strong>：在某些情况下，如果JWT令牌中包含SQL注入漏洞，可以通过注入攻击绕过密钥验证<a href="https://blog.csdn.net/yang1234567898/article/details/122226635">2</a>。</p>
<h6 id="2、利用jwt"><a href="#2、利用jwt" class="headerlink" title="2、利用jwt"></a>2、利用jwt</h6><h6 id="—-找api看越权"><a href="#—-找api看越权" class="headerlink" title="—&gt;找api看越权"></a>—&gt;找api看越权</h6><p>​	拿小程序来说，一般会直接给你一个jwt，这个jwt在服务器里面没有绑定任何用户，里面一般会有一个类似于openid的存在，当然有些要你注册或者登录才会响应一个jwt或者token</p>
<p>​	1&gt;将小程序反编译出来的代码进行分析整理，可以用我上面给的自动化反编译的那个软件，主要整理出接口和网址</p>
<p>​	2&gt;有接口就直接爆GET、POST、PUT、HEAD、TRACE等（生产环境没事别爆delete，爆成功等死）分析响应包，很明显的，一般就几种响应，要么200，要么权限不足，要么返回数据，要么说你类型错误，当然还有给你拉小黑屋的</p>
<p>​	3&gt;有响应就分析操作；该方法主要是找api，不一定只有反编译的js里有，其本身小程序也是前端，可以尝试更改响应包跑前端的接口</p>
<h6 id="—-同一域名使用"><a href="#—-同一域名使用" class="headerlink" title="—&gt;同一域名使用"></a>—&gt;同一域名使用</h6><p>​	拿网址举例，123.123.com的合法jwt，或许是可以到111.123.com的网址使用的，也就是说，如果你一个网址没有权限，可以先尝试去找一样域名的其他网址去注册一个合法用户，获得jwt后尝试直接使用该网址的功能</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>api</tag>
        <tag>Cybersecurity</tag>
        <tag>js</tag>
        <tag>jwt</tag>
        <tag>keys</tag>
      </tags>
  </entry>
  <entry>
    <title>智能桌宠</title>
    <url>/2024/12/18/%E6%99%BA%E8%83%BD%E6%A1%8C%E9%9D%A2%E5%AE%A0%E7%89%A9/</url>
    <content><![CDATA[<p>该文章为尝试进行智能桌宠的搭建前记录的相关流程和笔记，以免自己行动时步骤不对直接爆炸；</p>
<h2 id="教程视频"><a href="#教程视频" class="headerlink" title="教程视频"></a>教程视频</h2><p>​	<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc">STM32智能桌面宠物总教程_哔哩哔哩_bilibili</a>	该视频为搭建桌宠的教程</p>
<p>​	总计花费3.6元购买了总材料</p>
<h3 id="视频步骤"><a href="#视频步骤" class="headerlink" title="视频步骤"></a>视频步骤</h3><span id="more"></span>

<h5 id="嘉立创下单PCB和3D打印"><a href="#嘉立创下单PCB和3D打印" class="headerlink" title="嘉立创下单PCB和3D打印"></a>嘉立创下单PCB和3D打印</h5><p>​		—&gt;用他的模板，导出文件后去领卷买东西</p>
<p>​		（1）、<a href="https://pro.lceda.cn/">构建单片机的软件</a>	可有可无</p>
<p>​		（2）、<a href="https://www.jlc.com/portal/appDownloadsWithConfig.html">嘉立创PCB下单</a></p>
<p><img src="/../image/Smart_table_pets/buy_pcb.png"></p>
<p>​			后面下单参数太多懒得截图：</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=390">STM32智能桌面-跳转到第390秒</a></p>
<p>​			哔哩哔哩把跳转参数关了的话就是该教程的6:30分处</p>
<p>​			（3）、嘉立创3D打印下单</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=461">STM32智能桌面-跳转到第7:41</a></p>
<h5 id="焊接"><a href="#焊接" class="headerlink" title="焊接"></a>焊接</h5><h6 id="1-焊接视频"><a href="#1-焊接视频" class="headerlink" title="1&gt;焊接视频"></a>1&gt;焊接视频</h6><p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=481">STM32智能桌面-跳转到第8:01</a></p>
<p>​		（1）、焊接开关</p>
<p>​			—&gt;焊接开关时，一定要先焊接开关左侧的</p>
<p>​			—&gt;先上锡固定开关左侧一角，然后直接焊其他角</p>
<p><img src="/../image/Smart_table_pets/Welding_switches.jpg" alt="焊接开关后成品"></p>
<p>​		（2）、焊接电阻、LED灯</p>
<p>​			—&gt;LED反面有箭头，必须保证箭头朝上</p>
<p>​			然后在电阻的右侧焊接AMS芯片</p>
<p>​					(c1、c2全是电容)</p>
<p>​			可以用锂电池进行测试—确保开关已拨通</p>
<p><img src="/../image/Smart_table_pets/hj_1-2.jpg"></p>
<p>​		（3）、焊接电容</p>
<p>​			—&gt;C1为10UF、C2为100NF</p>
<p>​			<img src="/../image/Smart_table_pets/Soldering_capacitors.jpg"></p>
<p><img src="/../image/Smart_table_pets/Soldering_capacitors2.jpg"></p>
<p>​			—&gt;当然右侧开关那还有一堆电容</p>
<p>​		（4）、焊接电源排针</p>
<p><img src="/../image/Smart_table_pets/hj_1-4.jpg"></p>
<p>​		（5）、焊接1X20P的排母</p>
<p>​			—&gt;只需要焊接两部分，即开头、结尾两行：</p>
<p><img src="/../image/Smart_table_pets/hj_1-5.jpg"></p>
<p>​			<img src="/../image/Smart_table_pets/hj_1-5_2.jpg"></p>
<p>​			—&gt;单片机的两种选择{<a href="%E6%8E%92%E9%92%88%E8%BF%87%E9%95%BF%E4%BC%9A%E5%8E%8B%E5%88%B0%E4%B8%8B%E9%9D%A2%E7%9A%84%E7%94%B5%E6%B1%A0">焊接好排针的</a>、[直接带排针的]、<a href="%E8%80%83%E9%AA%8C%E7%84%8A%E6%8E%A5%E8%83%BD%E5%8A%9B%EF%BC%8C%E5%BB%BA%E8%AE%AE%E9%80%890%EF%BC%8C%E7%84%B6%E5%90%8E%E5%89%AA%E6%8E%89%E9%95%BF%E7%9A%84">不焊接排针的</a>}</p>
<p>​	<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=815">STM32智能桌面-跳转到第13:35</a>  —不焊接排查麻烦但可以避免压到电池和语音模块不好插上</p>
<p>​		（6）、焊接XH直针</p>
<p>​		—&gt;右上角焊接XH直针     &#x2F;&#x2F;语音模块的咪头和喇叭处也是</p>
<p>​		—&gt;语音模块焊接排针</p>
<h6 id="2-其余相关注意事项"><a href="#2-其余相关注意事项" class="headerlink" title="2&gt;其余相关注意事项"></a>2&gt;其余相关注意事项</h6><p>​		（1）、锂电池的正负极分别充放电模块的B+和B</p>
<p>​		（2）、输出电源线要接好—是焊接到模块中央位置两侧：</p>
<p><img src="/../image/Smart_table_pets/zy_2-2.jpg"></p>
<p>​		（3）、喇叭没有正负，味头上有三条线的是负极</p>
<h6 id="3-程序"><a href="#3-程序" class="headerlink" title="3&gt;程序"></a>3&gt;程序</h6><p>​		（1）、串口下载单片机程序</p>
<p>​			—&gt;使用前需要安装CH340的环境驱动</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=900">STM32智能桌面-跳转到第15:00</a> </p>
<p>​		（2）、接线部分</p>
<p>​			接线—接线烧录 &#x2F; CH340</p>
<p>​			—&gt;使用前拔跳线帽</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=941">STM32智能桌面-跳转到第15:41</a> </p>
<p>​		（3）、烧录语音部分</p>
<p>​			—&gt;点击烧录后，需要拔5V线等两秒再接上去</p>
<p>​			</p>
<h6 id="4-组装"><a href="#4-组装" class="headerlink" title="4&gt;组装"></a>4&gt;组装</h6><p>​		（1）、模型组装</p>
<p>​			—&gt;考验手工了，前面都完成了，这里应该没什么问题了</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=1114">STM32智能桌面-跳转到第18:34</a></p>
<p>​			—&gt;用面包板线将OLED的排母与做成的排母相连时，要看好你OLED屏幕左侧是GND还是VCC</p>
<p>​		（2）、排线</p>
<p>​			—&gt;太长了剪掉重新接应该也可以</p>
<h6 id="5-语音网站配置"><a href="#5-语音网站配置" class="headerlink" title="5&gt;语音网站配置"></a>5&gt;语音网站配置</h6><p>​		（1）、智能公元网址</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=1640">STM32智能桌面-跳转到第27:20</a></p>
<p>​		（2）、代码逻辑</p>
<p>​			<a href="https://www.bilibili.com/video/BV1xD6MYGEzD/?spm_id_from=333.999.0.0&vd_source=62ec56a0e96ac07702343ec20500f1cc&t=1860">STM32智能桌面-跳转到第31:00</a></p>
<p>结束语：此篇文章为制作前的准备，如果爆炸了不想做了与我无关</p>
]]></content>
      <categories>
        <category>microcontroller</category>
      </categories>
      <tags>
        <tag>单片机</tag>
        <tag>狗</tag>
        <tag>三次元</tag>
      </tags>
  </entry>
  <entry>
    <title>方言识别</title>
    <url>/2025/02/18/%E6%96%B9%E8%A8%80%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<p>前言：</p>
<p>​	为了便宜行事，可以找语音识别的现成项目进行修改，请记住我不是开发，我最多是一个拼接的应用层，技术算法那些就别花费太多时间了，我只要知道是什么，如何用就成，把高端的科技服务我这种普通人</p>
<h1 id="方言识别模型训练思路框架"><a href="#方言识别模型训练思路框架" class="headerlink" title="方言识别模型训练思路框架"></a>方言识别模型训练思路框架</h1><h2 id="1-数据准备"><a href="#1-数据准备" class="headerlink" title="1. 数据准备"></a>1. 数据准备</h2><h3 id="1-1-收集方言语音数据"><a href="#1-1-收集方言语音数据" class="headerlink" title="1.1 收集方言语音数据"></a>1.1 收集方言语音数据</h3><ul>
<li>收集多种方言的语音数据，如粤语、吴语、闽南语等。</li>
<li>数据应该包括：<ul>
<li><strong>音频文件</strong>：采用 WAV 格式的语音文件。</li>
<li><strong>转录文件</strong>：每个音频文件对应的文字转录（普通话或方言的标注文本）。</li>
</ul>
</li>
<li>数据量要足够多，保证训练的多样性。</li>
</ul>
<h3 id="1-2-数据标注"><a href="#1-2-数据标注" class="headerlink" title="1.2 数据标注"></a>1.2 数据标注</h3><ul>
<li>对方言语音进行准确的标注，确保转录文件和音频文件一一对应。</li>
<li>可以使用拼音、普通话字符集进行标注。</li>
<li>对不同方言的转录进行统一标准化处理。</li>
</ul>
<h2 id="2-数据预处理"><a href="#2-数据预处理" class="headerlink" title="2. 数据预处理"></a>2. 数据预处理</h2><h3 id="2-1-特征提取"><a href="#2-1-特征提取" class="headerlink" title="2.1 特征提取"></a>2.1 特征提取</h3><ul>
<li>将音频文件转换为 <strong>梅尔频率倒谱系数（MFCC）</strong> 特征。<ul>
<li>通过音频处理工具（如 <code>librosa</code>）提取 MFCC 特征。</li>
</ul>
</li>
<li>可选：使用数据增强技术，如添加背景噪声，进行时间偏移等。</li>
</ul>
<h3 id="2-2-文本规范化"><a href="#2-2-文本规范化" class="headerlink" title="2.2 文本规范化"></a>2.2 文本规范化</h3><ul>
<li>规范化文本数据，确保文本格式统一。<ul>
<li>可以进行拼音转换，或者采用标准的普通话字符集。</li>
</ul>
</li>
</ul>
<h3 id="2-3-数据集划分"><a href="#2-3-数据集划分" class="headerlink" title="2.3 数据集划分"></a>2.3 数据集划分</h3><ul>
<li>划分训练集、验证集和测试集（常见的比例是 80% 训练集，10% 验证集，10% 测试集）。</li>
</ul>
<h2 id="3-安装-DeepSpeech"><a href="#3-安装-DeepSpeech" class="headerlink" title="3. 安装 DeepSpeech"></a>3. 安装 DeepSpeech</h2><h3 id="3-1-安装依赖"><a href="#3-1-安装依赖" class="headerlink" title="3.1 安装依赖"></a>3.1 安装依赖</h3><ul>
<li><p>安装 DeepSpeech：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install deepspeech</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装训练时的依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制编辑</span><br><span class="line">pip install deepspeech-gpu</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-2-环境配置"><a href="#3-2-环境配置" class="headerlink" title="3.2 环境配置"></a>3.2 环境配置</h3><ul>
<li>配置 Python 环境，安装所需的库（如 <code>tensorflow</code>, <code>numpy</code> 等）。</li>
</ul>
<h2 id="4-模型训练"><a href="#4-模型训练" class="headerlink" title="4. 模型训练"></a>4. 模型训练</h2><h3 id="4-1-准备数据文件"><a href="#4-1-准备数据文件" class="headerlink" title="4.1 准备数据文件"></a>4.1 准备数据文件</h3><ul>
<li><p>将数据集转化为 DeepSpeech 支持的格式（CSV 文件），包含音频路径和对应文本。</p>
</li>
<li><p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制编辑</span><br><span class="line">path/to/audio1.wav,你好</span><br><span class="line">path/to/audio2.wav,早安</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-2-配置训练参数"><a href="#4-2-配置训练参数" class="headerlink" title="4.2 配置训练参数"></a>4.2 配置训练参数</h3><ul>
<li><p>设置训练参数：</p>
<ul>
<li><p>学习率、批量大小、训练步数等。</p>
</li>
<li><p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制编辑</span><br><span class="line">--train_batch_size 32</span><br><span class="line">--dev_batch_size 16</span><br><span class="line">--epochs 30</span><br><span class="line">--checkpoint_dir checkpoints</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="4-3-启动训练"><a href="#4-3-启动训练" class="headerlink" title="4.3 启动训练"></a>4.3 启动训练</h3><ul>
<li><p>使用 DeepSpeech 的命令行工具启动训练：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制编辑</span><br><span class="line">deepspeech --train_files data/train.csv --dev_files data/dev.csv --test_files data/test.csv --train_batch_size 32 --dev_batch_size 16 --epochs 30 --checkpoint_dir checkpoints</span><br></pre></td></tr></table></figure>
</li>
<li><p>训练过程中 DeepSpeech 会自动进行特征提取和模型训练。</p>
</li>
</ul>
<h2 id="5-模型评估与优化"><a href="#5-模型评估与优化" class="headerlink" title="5. 模型评估与优化"></a>5. 模型评估与优化</h2><h3 id="5-1-评估模型性能"><a href="#5-1-评估模型性能" class="headerlink" title="5.1 评估模型性能"></a>5.1 评估模型性能</h3><ul>
<li>在每个训练周期后评估模型在验证集和测试集上的表现。</li>
<li>使用 <strong>字符错误率（CER）</strong> 或 <strong>词错误率（WER）</strong> 来衡量模型性能。</li>
</ul>
<h3 id="5-2-优化策略"><a href="#5-2-优化策略" class="headerlink" title="5.2 优化策略"></a>5.2 优化策略</h3><ul>
<li>调整超参数（如学习率、批量大小等）来优化模型训练。</li>
<li>增加训练数据量，特别是方言区域的多样性。</li>
<li>使用噪声抑制和数据增强来提高鲁棒性。</li>
</ul>
<h2 id="6-方言识别应用"><a href="#6-方言识别应用" class="headerlink" title="6. 方言识别应用"></a>6. 方言识别应用</h2><h3 id="6-1-使用训练好的模型进行推理"><a href="#6-1-使用训练好的模型进行推理" class="headerlink" title="6.1 使用训练好的模型进行推理"></a>6.1 使用训练好的模型进行推理</h3><ul>
<li><p>使用训练好的模型进行语音识别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制编辑</span><br><span class="line">deepspeech --model checkpoints/model.pbmm --scorer checkpoints/model.scorer --audio your_audio.wav</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-2-应用部署"><a href="#6-2-应用部署" class="headerlink" title="6.2 应用部署"></a>6.2 应用部署</h3><ul>
<li>将模型部署到实际的应用中，如语音助手、自动字幕生成、方言识别等。</li>
</ul>
<h2 id="7-持续优化"><a href="#7-持续优化" class="headerlink" title="7. 持续优化"></a>7. 持续优化</h2><ul>
<li>根据用户反馈不断更新和优化模型，增加方言样本，优化模型结构。</li>
<li>定期更新训练数据，确保模型的准确性和鲁棒性。</li>
</ul>
<hr>
<p><strong>注意事项：</strong></p>
<ul>
<li>方言识别的难点之一是口音和发音差异，因此训练数据必须具备多样性。</li>
<li>端到端训练是一个计算密集型过程，训练时需要高效的硬件支持（如 GPU）。</li>
<li>可以考虑使用 <strong>迁移学习</strong>，利用已有的大规模语音识别模型进行微调，以加速训练过程。</li>
</ul>
]]></content>
      <categories>
        <category>machine-learning</category>
      </categories>
      <tags>
        <tag>数据集</tag>
        <tag>语言模型</tag>
      </tags>
  </entry>
  <entry>
    <title>信息搜集思路</title>
    <url>/2024/12/20/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="信息搜集思路扩散"><a href="#信息搜集思路扩散" class="headerlink" title="信息搜集思路扩散"></a>信息搜集思路扩散</h1><p>​	1.ico图标搜集</p>
<p>​	2.icp备案号&#x2F;icp.name备案公司搜集</p>
<p>​	3.域名搜集———简写域名搜集&#x2F;子域名搜集</p>
<span id="more"></span>

<p>​	4.关键字搜寻-title&#x2F;body</p>
<p>​	5.中标公司，名下公司查询—涉及就查</p>
<p>​	6.证书查询</p>
<p>​	7.图片搜索—基本没用</p>
<p>​		1&gt;联合&#x2F;递归查询</p>
<p>​		2&gt;爆破域名查询——-针对空间测绘找不到的影子资产</p>
<p>​		3&gt;域名目录更改—–例如，ab.sb.com——&gt;ab.sb.com&#x2F;ab          目录爆破**</p>
<h1 id="找网址漏洞的信息搜集思路"><a href="#找网址漏洞的信息搜集思路" class="headerlink" title="找网址漏洞的信息搜集思路"></a>找网址漏洞的信息搜集思路</h1><p>​	1.要是信息搜集能力强于web渗透思路如下</p>
<p>​		1&gt;与其在网址上找漏洞不如，根据漏洞找对应网址</p>
<p>​	2.web渗透强于其他</p>
<p>​		2&gt;搜集边缘&#x2F;影子资产，从易到难</p>
<h1 id="根据公众号找web的思路"><a href="#根据公众号找web的思路" class="headerlink" title="根据公众号找web的思路"></a>根据公众号找web的思路</h1><p>​	1.找合作公司的公众号，找相关的功能web</p>
<p>​	2.找到公众号所有的web，根据域名找公司，根据公司找公众号，以此往复***</p>
<p>​	3.根据全称公众号，找下面的无关公众号点点，可能存在你要找的内容功能</p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>Information</tag>
        <tag>Official account</tag>
      </tags>
  </entry>
  <entry>
    <title>蜜罐怎么获取个人信息</title>
    <url>/2024/12/20/%E8%9C%9C%E7%BD%90%E8%8E%B7%E5%8F%96%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h3 id="蜜罐防守"><a href="#蜜罐防守" class="headerlink" title="蜜罐防守"></a>蜜罐防守</h3><p>​	蜜罐主要是通过web蜜罐和mysql蜜罐来获取个人信息</p>
<p>​	蜜罐通过模拟各种服务来获取个人信息，但也跟漏洞JSONP有关</p>
<p>​	蜜罐获取个人信息主要是依赖用户所注册的网址存在JSONP、XSS等信息泄露的漏洞</p>
<span id="more"></span>

<p><strong>JSONP漏洞与CSRF非常相似，但JSONP劫持只能获得js返回的敏感数据</strong></p>
<p><strong>JSONP劫持步骤：</strong></p>
<p>​	1.蜜罐被访问url</p>
<p>​	2.蜜罐返回包含回调函数的JS代码</p>
<p>​	3.访问网址B时-将回调函数作为参数请求</p>
<p>​	4.返回包含用户信息的JSON数据</p>
<p>​	5.上传用户信息数据到蜜罐</p>
<p><strong>读取微信号</strong></p>
<p>win系统下，读取手机号和微信ID的方法（默认常见微信文件路径）</p>
<p>我们可以下面的步骤来获取用户的微信号</p>
<p>1）通过C:&#x2F;Windows&#x2F;PFRO.log获取windows用户名</p>
<p>2）通过C:&#x2F;Users&#x2F;用户名&#x2F;Documents&#x2F;WeChat Files&#x2F;All Users&#x2F;config&#x2F;config.data获取wxid</p>
<p>3）通过C:&#x2F;Users&#x2F;用户名&#x2F;Documents&#x2F;WeChat Files&#x2F;wx_id&#x2F;config&#x2F;AccInfo.dat获取微信号、手机号</p>
<p><strong>读取chrome的登录数据</strong></p>
<p>读取chrome的login data，虽然无法解密出密码，但是还是可以获取到对方的一些账号</p>
<p>C:&#x2F;Users&#x2F;‘ + username + ‘&#x2F;AppData&#x2F;Local&#x2F;Google&#x2F;Chrome&#x2F;User Data&#x2F;Default&#x2F;Login Data</p>
<p><strong>chrome的历史记录</strong></p>
<p>我们还可以读取chrome的历史记录</p>
<p>C:&#x2F;Users&#x2F;‘ + username + ‘&#x2F;AppData&#x2F;Local&#x2F;Google&#x2F;Chrome&#x2F;User Data&#x2F;Default&#x2F;History</p>
<p>开源蜜罐系统hfish中的mysql蜜罐就利用了这种方式来获取攻击者的文件，如下首先在蜜罐中设置要读取的文件。</p>
<p><img src="/../image/Honeypot/%E8%9C%9C%E7%BD%90.png" alt="蜜罐"></p>
]]></content>
      <categories>
        <category>Cybersecurity</category>
      </categories>
      <tags>
        <tag>Cybersecurity</tag>
        <tag>Honeypot</tag>
        <tag>Information Gathering</tag>
        <tag>Intrusion Detection</tag>
        <tag>Attack Analysis</tag>
      </tags>
  </entry>
</search>
